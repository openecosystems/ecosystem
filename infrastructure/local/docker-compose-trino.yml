services:
    #  opensearch:
    #    container_name: temporal-opensearch
    #    environment:
    #      - discovery.type=single-node
    #      - OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m
    #      - cluster.routing.allocation.disk.threshold_enabled=true
    #      - cluster.routing.allocation.disk.watermark.low=512mb
    #      - cluster.routing.allocation.disk.watermark.high=256mb
    #      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
    #      - plugins.security.disabled=true
    #    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    #    ulimits:
    #      #      memlock:
    #      #        soft: -1 # Set memlock to unlimited (no soft or hard limit)
    #      #        hard: -1
    #      nofile:
    #        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
    #        hard: 65536
    #    networks:
    #      - oeco-network
    #    ports:
    #      - 9200:9200
    #    volumes:
    #      - /usr/share/opensearch/data
    #  postgresql:
    #    container_name: temporal-postgresql
    #    environment:
    #      POSTGRES_PASSWORD: temporal
    #      POSTGRES_USER: temporal
    #    image: postgres:${POSTGRESQL_VERSION}
    #    networks:
    #      - oeco-network
    #    ports:
    #      - 5432:5432
    #    volumes:
    #      - /var/lib/postgresql/data
    #  temporal:
    #    container_name: temporal
    #    depends_on:
    #      - postgresql
    #      - opensearch
    #    environment:
    #      - DB=postgres12
    #      - DB_PORT=5432
    #      - POSTGRES_USER=temporal
    #      - POSTGRES_PWD=temporal
    #      - POSTGRES_SEEDS=postgresql
    #      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    #      - ENABLE_ES=true
    #      - ES_SEEDS=opensearch
    #      - ES_VERSION=v7
    #    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    #    networks:
    #      - oeco-network
    #    ports:
    #      - 7233:7233
    #    volumes:
    #      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    #  temporal-admin-tools:
    #    container_name: temporal-admin-tools
    #    depends_on:
    #      - temporal
    #    environment:
    #      - TEMPORAL_ADDRESS=temporal:7233
    #      - TEMPORAL_CLI_ADDRESS=temporal:7233
    #    image: temporalio/admin-tools:${TEMPORAL_ADMINTOOLS_VERSION}
    #    networks:
    #      - oeco-network
    #    stdin_open: true
    #    tty: true
    #  temporal-ui:
    #    container_name: temporal-ui
    #    depends_on:
    #      - temporal
    #    environment:
    #      - TEMPORAL_ADDRESS=temporal:7233
    #      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    #    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    #    networks:
    #      - oeco-network
    #    ports:
    #      - 8080:8080

    # Tempo runs as user 10001, and docker compose creates the volume as root.
    # As such, we need to chown the volume in order for Tempo to start correctly.
    init:
        image: &tempoImage grafana/tempo:latest
        user: root
        entrypoint:
            - 'chown'
            - '10001:10001'
            - '/var/tempo'
        volumes:
            - ./tempo-data:/var/tempo

    memcached:
        image: memcached:1.6.29
        container_name: memcached
        ports:
            - '11211:11211'
        networks:
            - oeco-network
        environment:
            - MEMCACHED_MAX_MEMORY=64m # Set the maximum memory usage
            - MEMCACHED_THREADS=4 # Number of threads to use

    tempo:
        image: *tempoImage
        command: ['-config.file=/etc/tempo.yaml']
        volumes:
            - ./tempo.yaml:/etc/tempo.yaml
            - ./tempo-data:/var/tempo
        ports:
            - '14268:14268' # jaeger ingest
            - '3200:3200' # tempo
            - '9095:9095' # tempo grpc
            - '4317:4317' # otlp grpc
            - '4318:4318' # otlp http
            - '9411:9411' # zipkin
        networks:
            - oeco-network
        depends_on:
            - init
            - memcached
    #
    #  k6-tracing:
    #    image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
    #    environment:
    #      - ENDPOINT=tempo:4317
    #    restart: always
    #    depends_on:
    #      - tempo

    prometheus:
        image: prom/prometheus:latest
        command:
            - --config.file=/etc/prometheus.yaml
            - --web.enable-remote-write-receiver
            - --enable-feature=exemplar-storage
            - --enable-feature=native-histograms
        volumes:
            - ./tempo-shared/prometheus.yaml:/etc/prometheus.yaml
        networks:
            - oeco-network
        ports:
            - '9090:9090'

    grafana:
        image: grafana/grafana:11.0.0
        volumes:
            - ./tempo-shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
            - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
        networks:
            - oeco-network
        ports:
            - '3000:3000'

    trino:
        image: trinodb/trino
        volumes:
            - ./trino-etc:/etc
            - ./trino-data:/data
        environment:
            - JAVA_TOOL_OPTIONS="-XX:UseSVE=0"
        networks:
            - oeco-network
        ports:
            - '8081:8080'

networks:
    oeco-network:
        driver: bridge
        name: oeco-network
