# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json
version: 2
dockers:

  - #
    id: ecosystem
    goos: linux
    goarch: amd64
    goarm: "6"
    goamd64: "v2"

    # IDs to filter the binaries/packages.
    #
    # Make sure to only include the IDs of binaries you want to `COPY` in your
    # Dockerfile.
    #
    # If you include IDs that don't exist or are not available for the current
    # architecture being built, the build of the image will be skipped.
    ids:
      - app

    image_templates:
      - "openecosystems/ecosystem:latest"
      - "openecosystems/ecosystem:{{ .Tag }}"
      - "openecosystems/ecosystem:v{{ .Major }}"
      - "gcr.io/openecosystems/ecosystem:latest"

    # Skips the docker build.
    # Could be useful if you want to skip building the windows docker image on
    # linux, for example.
    #
    # This option is only available on GoReleaser Pro.
    # Templates: allowed.
    skip_build: false

    skip_push: false

    # Path to the Dockerfile (from the project root).
    #
    # Default: 'Dockerfile'.
    # Templates: allowed.
    dockerfile: "Dockerfile"

    # Use this instead of `dockerfile` if the contents of your Dockerfile are
    # supposed to go through the template engine as well.
    #
    # `dockerfile` is ignored when this is set.
    #
    # This feature is only available in GoReleaser Pro.
    # Templates: allowed.
    #templated_dockerfile: "{{.Env.DOCKERFILE }}"

    # Valid options are: docker, buildx, podman.
    use: docker

    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--platform=linux/arm64"

    # Extra flags to be passed down to the push command.
    push_flags:
      - --tls-verify=false

