// Code generated by protoc-gen-platform go/entity-unspecified-v2beta. DO NOT EDIT.
// source: platform/iam/v2alpha/account.proto

package iamv2alphapb

import (
	"context"
	"encoding/json"

	"errors"
	"github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta"
	specv2pb "github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta/gen/platform/spec/v2"
	"google.golang.org/protobuf/types/known/anypb"
	//specv2pb "github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta/gen/platform/spec/v2"
	//typev2pb "github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta/gen/platform/type/v2"
	//timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type AccountSpecEntity struct {
	Account *Account
}

func NewAccountSpecEntity(specContext *specv2pb.SpecContext) (*AccountSpecEntity, error) {

	return &AccountSpecEntity{
		Account: &Account{},
	}, nil

}

func NewAccountSpecEntityFromSpec(ctx context.Context, s *specv2pb.Spec) (*AccountSpecEntity, error) {
	data := &Account{}
	err := sdkv2betalib.GetDataFromSpec[*Account](ctx, s, data)
	if err != nil {
		return nil, sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(err)
	}

	return &AccountSpecEntity{
		Account: data,
	}, nil
}

func (entity *AccountSpecEntity) ToProto() (*Account, error) {

	return entity.Account, nil

}

func (entity *AccountSpecEntity) ToEvent() (*string, error) {

	bytes, err := json.Marshal(entity)
	if err != nil {
		return nil, err
	}

	event := string(bytes)

	return &event, nil

}

func (entity *AccountSpecEntity) FromEvent(event *string) (*AccountSpecEntity, error) {

	bytes := []byte(*event)
	err := json.Unmarshal(bytes, entity)
	if err != nil {
		return nil, err
	}

	return entity, nil

}

func (entity *AccountSpecEntity) MarshalEntity() (*anypb.Any, error) {

	d, err := anypb.New(entity.Account)
	if err != nil {
		return nil, sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall entity"), err)
	}

	return d, nil

}

func (entity *AccountSpecEntity) MarshalProto() (*anypb.Any, error) {

	proto, err := entity.ToProto()
	if err != nil {
		return nil, sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to convert entity to proto"), err)
	}

	d, err := anypb.New(proto)
	if err != nil {
		return nil, sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall proto"), err)
	}

	return d, nil

}

func (entity *AccountSpecEntity) TypeName() string {
	return "account"
}

func (entity *AccountSpecEntity) CommandTopic() string {
	return CommandDataAccountTopic
}

func (entity *AccountSpecEntity) EventTopic() string {
	return EventDataAccountTopic
}

func (entity *AccountSpecEntity) RoutineTopic() string {
	return RoutineDataAccountTopic
}

func (entity *AccountSpecEntity) TopicWildcard() string {
	return AccountTypeNameEventPrefix + ">"
}

func (entity *AccountSpecEntity) SystemName() string {
	return "iam"
}

func (entity *AccountSpecEntity) internal() {

	//
	//var _ timestamppb.Timestamp
	//created_at

	//
	//var _ timestamppb.Timestamp
	//updated_at

	// Struct
	// var _ *typev2pb.Credential
}
