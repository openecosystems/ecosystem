// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: platform/type/v2/cidr.proto

package typev2pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Classless Inter-Domain Routing
type CIDR struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CidrNotation  string                 `protobuf:"bytes,1,opt,name=cidr_notation,json=cidrNotation,proto3" json:"cidr_notation,omitempty"`
	FirstIp       string                 `protobuf:"bytes,2,opt,name=first_ip,json=firstIp,proto3" json:"first_ip,omitempty"`
	SubnetMask    string                 `protobuf:"bytes,3,opt,name=subnet_mask,json=subnetMask,proto3" json:"subnet_mask,omitempty"`
	SubnetBits    uint32                 `protobuf:"varint,4,opt,name=subnet_bits,json=subnetBits,proto3" json:"subnet_bits,omitempty"`
	TotalIps      uint64                 `protobuf:"varint,5,opt,name=total_ips,json=totalIps,proto3" json:"total_ips,omitempty"`
	TotalBits     uint32                 `protobuf:"varint,6,opt,name=total_bits,json=totalBits,proto3" json:"total_bits,omitempty"`
	ReservedIps   []string               `protobuf:"bytes,7,rep,name=reserved_ips,json=reservedIps,proto3" json:"reserved_ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CIDR) Reset() {
	*x = CIDR{}
	mi := &file_platform_type_v2_cidr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CIDR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIDR) ProtoMessage() {}

func (x *CIDR) ProtoReflect() protoreflect.Message {
	mi := &file_platform_type_v2_cidr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIDR.ProtoReflect.Descriptor instead.
func (*CIDR) Descriptor() ([]byte, []int) {
	return file_platform_type_v2_cidr_proto_rawDescGZIP(), []int{0}
}

func (x *CIDR) GetCidrNotation() string {
	if x != nil {
		return x.CidrNotation
	}
	return ""
}

func (x *CIDR) GetFirstIp() string {
	if x != nil {
		return x.FirstIp
	}
	return ""
}

func (x *CIDR) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *CIDR) GetSubnetBits() uint32 {
	if x != nil {
		return x.SubnetBits
	}
	return 0
}

func (x *CIDR) GetTotalIps() uint64 {
	if x != nil {
		return x.TotalIps
	}
	return 0
}

func (x *CIDR) GetTotalBits() uint32 {
	if x != nil {
		return x.TotalBits
	}
	return 0
}

func (x *CIDR) GetReservedIps() []string {
	if x != nil {
		return x.ReservedIps
	}
	return nil
}

var File_platform_type_v2_cidr_proto protoreflect.FileDescriptor

const file_platform_type_v2_cidr_proto_rawDesc = "" +
	"\n" +
	"\x1bplatform/type/v2/cidr.proto\x12\x10platform.type.v2\"\xe7\x01\n" +
	"\x04CIDR\x12#\n" +
	"\rcidr_notation\x18\x01 \x01(\tR\fcidrNotation\x12\x19\n" +
	"\bfirst_ip\x18\x02 \x01(\tR\afirstIp\x12\x1f\n" +
	"\vsubnet_mask\x18\x03 \x01(\tR\n" +
	"subnetMask\x12\x1f\n" +
	"\vsubnet_bits\x18\x04 \x01(\rR\n" +
	"subnetBits\x12\x1b\n" +
	"\ttotal_ips\x18\x05 \x01(\x04R\btotalIps\x12\x1d\n" +
	"\n" +
	"total_bits\x18\x06 \x01(\rR\ttotalBits\x12!\n" +
	"\freserved_ips\x18\a \x03(\tR\vreservedIpsBVZTgithub.com/openecosystems/ecosystem/go/oeco-sdk/v2beta/gen/platform/type/v2;typev2pbb\x06proto3"

var (
	file_platform_type_v2_cidr_proto_rawDescOnce sync.Once
	file_platform_type_v2_cidr_proto_rawDescData []byte
)

func file_platform_type_v2_cidr_proto_rawDescGZIP() []byte {
	file_platform_type_v2_cidr_proto_rawDescOnce.Do(func() {
		file_platform_type_v2_cidr_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_platform_type_v2_cidr_proto_rawDesc), len(file_platform_type_v2_cidr_proto_rawDesc)))
	})
	return file_platform_type_v2_cidr_proto_rawDescData
}

var file_platform_type_v2_cidr_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_platform_type_v2_cidr_proto_goTypes = []any{
	(*CIDR)(nil), // 0: platform.type.v2.CIDR
}
var file_platform_type_v2_cidr_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_platform_type_v2_cidr_proto_init() }
func file_platform_type_v2_cidr_proto_init() {
	if File_platform_type_v2_cidr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_platform_type_v2_cidr_proto_rawDesc), len(file_platform_type_v2_cidr_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_platform_type_v2_cidr_proto_goTypes,
		DependencyIndexes: file_platform_type_v2_cidr_proto_depIdxs,
		MessageInfos:      file_platform_type_v2_cidr_proto_msgTypes,
	}.Build()
	File_platform_type_v2_cidr_proto = out.File
	file_platform_type_v2_cidr_proto_goTypes = nil
	file_platform_type_v2_cidr_proto_depIdxs = nil
}
