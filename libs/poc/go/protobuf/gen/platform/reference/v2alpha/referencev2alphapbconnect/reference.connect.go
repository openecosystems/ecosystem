// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/reference/v2alpha/reference.proto

package referencev2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/poc/go/protobuf/gen/platform/reference/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReferenceServiceName is the fully-qualified name of the ReferenceService service.
	ReferenceServiceName = "platform.reference.v2alpha.ReferenceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReferenceServiceUnaryProcedure is the fully-qualified name of the ReferenceService's Unary RPC.
	ReferenceServiceUnaryProcedure = "/platform.reference.v2alpha.ReferenceService/Unary"
	// ReferenceServiceServerStreamingProcedure is the fully-qualified name of the ReferenceService's
	// ServerStreaming RPC.
	ReferenceServiceServerStreamingProcedure = "/platform.reference.v2alpha.ReferenceService/ServerStreaming"
)

// ReferenceServiceClient is a client for the platform.reference.v2alpha.ReferenceService service.
type ReferenceServiceClient interface {
	Unary(context.Context, *connect.Request[v2alpha.UnaryRequest]) (*connect.Response[v2alpha.UnaryResponse], error)
	ServerStreaming(context.Context, *connect.Request[v2alpha.ServerStreamingRequest]) (*connect.ServerStreamForClient[v2alpha.ServerStreamingResponse], error)
}

// NewReferenceServiceClient constructs a client for the platform.reference.v2alpha.ReferenceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReferenceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReferenceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	referenceServiceMethods := v2alpha.File_platform_reference_v2alpha_reference_proto.Services().ByName("ReferenceService").Methods()
	return &referenceServiceClient{
		unary: connect.NewClient[v2alpha.UnaryRequest, v2alpha.UnaryResponse](
			httpClient,
			baseURL+ReferenceServiceUnaryProcedure,
			connect.WithSchema(referenceServiceMethods.ByName("Unary")),
			connect.WithClientOptions(opts...),
		),
		serverStreaming: connect.NewClient[v2alpha.ServerStreamingRequest, v2alpha.ServerStreamingResponse](
			httpClient,
			baseURL+ReferenceServiceServerStreamingProcedure,
			connect.WithSchema(referenceServiceMethods.ByName("ServerStreaming")),
			connect.WithClientOptions(opts...),
		),
	}
}

// referenceServiceClient implements ReferenceServiceClient.
type referenceServiceClient struct {
	unary           *connect.Client[v2alpha.UnaryRequest, v2alpha.UnaryResponse]
	serverStreaming *connect.Client[v2alpha.ServerStreamingRequest, v2alpha.ServerStreamingResponse]
}

// Unary calls platform.reference.v2alpha.ReferenceService.Unary.
func (c *referenceServiceClient) Unary(ctx context.Context, req *connect.Request[v2alpha.UnaryRequest]) (*connect.Response[v2alpha.UnaryResponse], error) {
	return c.unary.CallUnary(ctx, req)
}

// ServerStreaming calls platform.reference.v2alpha.ReferenceService.ServerStreaming.
func (c *referenceServiceClient) ServerStreaming(ctx context.Context, req *connect.Request[v2alpha.ServerStreamingRequest]) (*connect.ServerStreamForClient[v2alpha.ServerStreamingResponse], error) {
	return c.serverStreaming.CallServerStream(ctx, req)
}

// ReferenceServiceHandler is an implementation of the platform.reference.v2alpha.ReferenceService
// service.
type ReferenceServiceHandler interface {
	Unary(context.Context, *connect.Request[v2alpha.UnaryRequest]) (*connect.Response[v2alpha.UnaryResponse], error)
	ServerStreaming(context.Context, *connect.Request[v2alpha.ServerStreamingRequest], *connect.ServerStream[v2alpha.ServerStreamingResponse]) error
}

// NewReferenceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReferenceServiceHandler(svc ReferenceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	referenceServiceMethods := v2alpha.File_platform_reference_v2alpha_reference_proto.Services().ByName("ReferenceService").Methods()
	referenceServiceUnaryHandler := connect.NewUnaryHandler(
		ReferenceServiceUnaryProcedure,
		svc.Unary,
		connect.WithSchema(referenceServiceMethods.ByName("Unary")),
		connect.WithHandlerOptions(opts...),
	)
	referenceServiceServerStreamingHandler := connect.NewServerStreamHandler(
		ReferenceServiceServerStreamingProcedure,
		svc.ServerStreaming,
		connect.WithSchema(referenceServiceMethods.ByName("ServerStreaming")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.reference.v2alpha.ReferenceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReferenceServiceUnaryProcedure:
			referenceServiceUnaryHandler.ServeHTTP(w, r)
		case ReferenceServiceServerStreamingProcedure:
			referenceServiceServerStreamingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReferenceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReferenceServiceHandler struct{}

func (UnimplementedReferenceServiceHandler) Unary(context.Context, *connect.Request[v2alpha.UnaryRequest]) (*connect.Response[v2alpha.UnaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.reference.v2alpha.ReferenceService.Unary is not implemented"))
}

func (UnimplementedReferenceServiceHandler) ServerStreaming(context.Context, *connect.Request[v2alpha.ServerStreamingRequest], *connect.ServerStream[v2alpha.ServerStreamingResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("platform.reference.v2alpha.ReferenceService.ServerStreaming is not implemented"))
}
