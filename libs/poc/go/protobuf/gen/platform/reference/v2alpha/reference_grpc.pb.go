// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: platform/reference/v2alpha/reference.proto

package referencev2alphapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReferenceService_Unary_FullMethodName           = "/platform.reference.v2alpha.ReferenceService/Unary"
	ReferenceService_ServerStreaming_FullMethodName = "/platform.reference.v2alpha.ReferenceService/ServerStreaming"
)

// ReferenceServiceClient is the client API for ReferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferenceServiceClient interface {
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerStreamingResponse], error)
}

type referenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceServiceClient(cc grpc.ClientConnInterface) ReferenceServiceClient {
	return &referenceServiceClient{cc}
}

func (c *referenceServiceClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, ReferenceService_Unary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerStreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReferenceService_ServiceDesc.Streams[0], ReferenceService_ServerStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServerStreamingRequest, ServerStreamingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReferenceService_ServerStreamingClient = grpc.ServerStreamingClient[ServerStreamingResponse]

// ReferenceServiceServer is the server API for ReferenceService service.
// All implementations must embed UnimplementedReferenceServiceServer
// for forward compatibility.
type ReferenceServiceServer interface {
	Unary(context.Context, *UnaryRequest) (*UnaryResponse, error)
	ServerStreaming(*ServerStreamingRequest, grpc.ServerStreamingServer[ServerStreamingResponse]) error
	mustEmbedUnimplementedReferenceServiceServer()
}

// UnimplementedReferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferenceServiceServer struct{}

func (UnimplementedReferenceServiceServer) Unary(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedReferenceServiceServer) ServerStreaming(*ServerStreamingRequest, grpc.ServerStreamingServer[ServerStreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedReferenceServiceServer) mustEmbedUnimplementedReferenceServiceServer() {}
func (UnimplementedReferenceServiceServer) testEmbeddedByValue()                          {}

// UnsafeReferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceServiceServer will
// result in compilation errors.
type UnsafeReferenceServiceServer interface {
	mustEmbedUnimplementedReferenceServiceServer()
}

func RegisterReferenceServiceServer(s grpc.ServiceRegistrar, srv ReferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedReferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferenceService_ServiceDesc, srv)
}

func _ReferenceService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReferenceServiceServer).ServerStreaming(m, &grpc.GenericServerStream[ServerStreamingRequest, ServerStreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReferenceService_ServerStreamingServer = grpc.ServerStreamingServer[ServerStreamingResponse]

// ReferenceService_ServiceDesc is the grpc.ServiceDesc for ReferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.reference.v2alpha.ReferenceService",
	HandlerType: (*ReferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _ReferenceService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _ReferenceService_ServerStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "platform/reference/v2alpha/reference.proto",
}
