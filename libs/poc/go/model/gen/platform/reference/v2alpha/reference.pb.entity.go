// Code generated by protoc-gen-platform go/entity-unspecified. DO NOT EDIT.
// source: platform/reference/v2alpha/reference.proto

package referencev2alphapbmodel

import (
	"context"
	"encoding/json"

	"errors"
	"github.com/openecosystems/ecosystem/libs/poc/go/protobuf/gen/platform/reference/v2alpha"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2alpha"
	"google.golang.org/protobuf/types/known/anypb"

	specv2pb "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type ReferenceSpecEntity struct {
	Reference *referencev2alphapb.Reference
}

func NewReferenceSpecEntity(specContext *specv2pb.SpecContext) (*ReferenceSpecEntity, error) {

	return &ReferenceSpecEntity{
		Reference: &referencev2alphapb.Reference{},
	}, nil

}

func NewReferenceSpecEntityFromSpec(ctx context.Context, s *specv2pb.Spec) (*ReferenceSpecEntity, error) {
	data := &referencev2alphapb.Reference{}
	err := sdkv2alphalib.GetDataFromSpec[*referencev2alphapb.Reference](ctx, s, data)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(err)
	}

	return &ReferenceSpecEntity{
		Reference: data,
	}, nil
}

func (entity *ReferenceSpecEntity) ToProto() (*referencev2alphapb.Reference, error) {

	return entity.Reference, nil

}

func (entity *ReferenceSpecEntity) ToEvent() (*string, error) {

	bytes, err := json.Marshal(entity)
	if err != nil {
		return nil, err
	}

	event := string(bytes)

	return &event, nil

}

func (entity *ReferenceSpecEntity) FromEvent(event *string) (*ReferenceSpecEntity, error) {

	bytes := []byte(*event)
	err := json.Unmarshal(bytes, entity)
	if err != nil {
		return nil, err
	}

	return entity, nil

}

func (entity *ReferenceSpecEntity) MarshalEntity() (*anypb.Any, error) {

	d, err := anypb.New(entity.Reference)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall entity"), err)
	}

	return d, nil

}

func (entity *ReferenceSpecEntity) MarshalProto() (*anypb.Any, error) {

	proto, err := entity.ToProto()
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to convert entity to proto"), err)
	}

	d, err := anypb.New(proto)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall proto"), err)
	}

	return d, nil

}

func (entity *ReferenceSpecEntity) TypeName() string {
	return "reference"
}

func (entity *ReferenceSpecEntity) CommandTopic() string {
	return CommandDataReferenceTopic
}

func (entity *ReferenceSpecEntity) EventTopic() string {
	return EventDataReferenceTopic
}

func (entity *ReferenceSpecEntity) RoutineTopic() string {
	return RoutineDataReferenceTopic
}

func (entity *ReferenceSpecEntity) TopicWildcard() string {
	return ReferenceTypeNameEventPrefix + ">"
}

func (entity *ReferenceSpecEntity) SystemName() string {
	return "reference"
}

func (entity *ReferenceSpecEntity) internal() {

	var _ timestamppb.Timestamp
	//created_at

	var _ timestamppb.Timestamp
	//updated_at

}
