// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: platform/spec/v2/spec.proto

package specv2pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/type/v2"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpecEventType int32

const (
	SpecEventType_SPEC_EVENT_TYPE_UNSPECIFIED SpecEventType = 0
	SpecEventType_SPEC_EVENT_TYPE_COMMAND     SpecEventType = 1
	SpecEventType_SPEC_EVENT_TYPE_EVENT       SpecEventType = 2
	SpecEventType_SPEC_EVENT_TYPE_ROUTINE     SpecEventType = 3
	SpecEventType_SPEC_EVENT_TYPE_ML          SpecEventType = 4
	SpecEventType_SPEC_EVENT_TYPE_STREAM      SpecEventType = 5
	SpecEventType_SPEC_EVENT_TYPE_DB          SpecEventType = 6
	SpecEventType_SPEC_EVENT_TYPE_PROFILE     SpecEventType = 7
	SpecEventType_SPEC_EVENT_TYPE_ETL         SpecEventType = 8
	SpecEventType_SPEC_EVENT_TYPE_LOG         SpecEventType = 9
)

// Enum value maps for SpecEventType.
var (
	SpecEventType_name = map[int32]string{
		0: "SPEC_EVENT_TYPE_UNSPECIFIED",
		1: "SPEC_EVENT_TYPE_COMMAND",
		2: "SPEC_EVENT_TYPE_EVENT",
		3: "SPEC_EVENT_TYPE_ROUTINE",
		4: "SPEC_EVENT_TYPE_ML",
		5: "SPEC_EVENT_TYPE_STREAM",
		6: "SPEC_EVENT_TYPE_DB",
		7: "SPEC_EVENT_TYPE_PROFILE",
		8: "SPEC_EVENT_TYPE_ETL",
		9: "SPEC_EVENT_TYPE_LOG",
	}
	SpecEventType_value = map[string]int32{
		"SPEC_EVENT_TYPE_UNSPECIFIED": 0,
		"SPEC_EVENT_TYPE_COMMAND":     1,
		"SPEC_EVENT_TYPE_EVENT":       2,
		"SPEC_EVENT_TYPE_ROUTINE":     3,
		"SPEC_EVENT_TYPE_ML":          4,
		"SPEC_EVENT_TYPE_STREAM":      5,
		"SPEC_EVENT_TYPE_DB":          6,
		"SPEC_EVENT_TYPE_PROFILE":     7,
		"SPEC_EVENT_TYPE_ETL":         8,
		"SPEC_EVENT_TYPE_LOG":         9,
	}
)

func (x SpecEventType) Enum() *SpecEventType {
	p := new(SpecEventType)
	*p = x
	return p
}

func (x SpecEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_spec_v2_spec_proto_enumTypes[0].Descriptor()
}

func (SpecEventType) Type() protoreflect.EnumType {
	return &file_platform_spec_v2_spec_proto_enumTypes[0]
}

func (x SpecEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecEventType.Descriptor instead.
func (SpecEventType) EnumDescriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{0}
}

// Spec principal types
type SpecPrincipalType int32

const (
	// A principal can be:
	SpecPrincipalType_SPEC_PRINCIPAL_TYPE_UNSPECIFIED SpecPrincipalType = 0
	// A Platform Account (for end users)
	SpecPrincipalType_SPEC_PRINCIPAL_TYPE_USER SpecPrincipalType = 1
	// A service account (for applications and compute workloads)
	SpecPrincipalType_SPEC_PRINCIPAL_TYPE_SERVICE_ACCOUNT SpecPrincipalType = 2
	// Group
	SpecPrincipalType_SPEC_PRINCIPAL_TYPE_GROUP SpecPrincipalType = 3
	// Domain that can access a resource
	SpecPrincipalType_SPEC_PRINCIPAL_TYPE_DOMAIN SpecPrincipalType = 4
)

// Enum value maps for SpecPrincipalType.
var (
	SpecPrincipalType_name = map[int32]string{
		0: "SPEC_PRINCIPAL_TYPE_UNSPECIFIED",
		1: "SPEC_PRINCIPAL_TYPE_USER",
		2: "SPEC_PRINCIPAL_TYPE_SERVICE_ACCOUNT",
		3: "SPEC_PRINCIPAL_TYPE_GROUP",
		4: "SPEC_PRINCIPAL_TYPE_DOMAIN",
	}
	SpecPrincipalType_value = map[string]int32{
		"SPEC_PRINCIPAL_TYPE_UNSPECIFIED":     0,
		"SPEC_PRINCIPAL_TYPE_USER":            1,
		"SPEC_PRINCIPAL_TYPE_SERVICE_ACCOUNT": 2,
		"SPEC_PRINCIPAL_TYPE_GROUP":           3,
		"SPEC_PRINCIPAL_TYPE_DOMAIN":          4,
	}
)

func (x SpecPrincipalType) Enum() *SpecPrincipalType {
	p := new(SpecPrincipalType)
	*p = x
	return p
}

func (x SpecPrincipalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecPrincipalType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_spec_v2_spec_proto_enumTypes[1].Descriptor()
}

func (SpecPrincipalType) Type() protoreflect.EnumType {
	return &file_platform_spec_v2_spec_proto_enumTypes[1]
}

func (x SpecPrincipalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecPrincipalType.Descriptor instead.
func (SpecPrincipalType) EnumDescriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{1}
}

type SpecKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The organization associated with this context
	OrganizationSlug string `protobuf:"bytes,2,opt,name=organization_slug,json=organizationSlug,proto3" json:"organization_slug,omitempty"`
	// The workspace associated with this context
	WorkspaceSlug string `protobuf:"bytes,3,opt,name=workspace_slug,json=workspaceSlug,proto3" json:"workspace_slug,omitempty"`
	// The workspace location associated with this context
	WorkspaceJan  v2.Jurisdiction `protobuf:"varint,4,opt,name=workspace_jan,json=workspaceJan,proto3,enum=platform.type.v2.Jurisdiction" json:"workspace_jan,omitempty"`
	SpecType      string          `protobuf:"bytes,5,opt,name=spec_type,json=specType,proto3" json:"spec_type,omitempty"`
	Id            string          `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecKey) Reset() {
	*x = SpecKey{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecKey) ProtoMessage() {}

func (x *SpecKey) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecKey.ProtoReflect.Descriptor instead.
func (*SpecKey) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{0}
}

func (x *SpecKey) GetOrganizationSlug() string {
	if x != nil {
		return x.OrganizationSlug
	}
	return ""
}

func (x *SpecKey) GetWorkspaceSlug() string {
	if x != nil {
		return x.WorkspaceSlug
	}
	return ""
}

func (x *SpecKey) GetWorkspaceJan() v2.Jurisdiction {
	if x != nil {
		return x.WorkspaceJan
	}
	return v2.Jurisdiction(0)
}

func (x *SpecKey) GetSpecType() string {
	if x != nil {
		return x.SpecType
	}
	return ""
}

func (x *SpecKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Spec Version is captured by:
	// - Channel (Producer)
	SpecVersion string `protobuf:"bytes,1,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// Spec message id is generated by:
	// - Channel (Producer)
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Spec sent at is generated by:
	// - Client
	SentAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
	ReceivedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	SpecType string `protobuf:"bytes,6,opt,name=spec_type,json=specType,proto3" json:"spec_type,omitempty"`
	SpecEventType SpecEventType `protobuf:"varint,7,opt,name=spec_event_type,json=specEventType,proto3,enum=platform.spec.v2.SpecEventType" json:"spec_event_type,omitempty"`
	SpecEvent string `protobuf:"bytes,8,opt,name=spec_event,json=specEvent,proto3" json:"spec_event,omitempty"`
	Principal *SpecPrincipal `protobuf:"bytes,9,opt,name=principal,proto3" json:"principal,omitempty"`
	SpanContext *SpanContext `protobuf:"bytes,10,opt,name=span_context,json=spanContext,proto3" json:"span_context,omitempty"`
	Context *SpecContext `protobuf:"bytes,11,opt,name=context,proto3" json:"context,omitempty"`
	RoutineContext *SpecRoutineContext `protobuf:"bytes,12,opt,name=routine_context,json=routineContext,proto3" json:"routine_context,omitempty"`
	Data          *anypb.Any `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`
	SpecData      *SpecData  `protobuf:"bytes,14,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spec) Reset() {
	*x = Spec{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{1}
}

func (x *Spec) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *Spec) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Spec) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *Spec) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *Spec) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *Spec) GetSpecType() string {
	if x != nil {
		return x.SpecType
	}
	return ""
}

func (x *Spec) GetSpecEventType() SpecEventType {
	if x != nil {
		return x.SpecEventType
	}
	return SpecEventType_SPEC_EVENT_TYPE_UNSPECIFIED
}

func (x *Spec) GetSpecEvent() string {
	if x != nil {
		return x.SpecEvent
	}
	return ""
}

func (x *Spec) GetPrincipal() *SpecPrincipal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *Spec) GetSpanContext() *SpanContext {
	if x != nil {
		return x.SpanContext
	}
	return nil
}

func (x *Spec) GetContext() *SpecContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Spec) GetRoutineContext() *SpecRoutineContext {
	if x != nil {
		return x.RoutineContext
	}
	return nil
}

func (x *Spec) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Spec) GetSpecData() *SpecData {
	if x != nil {
		return x.SpecData
	}
	return nil
}

type SpecPublic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	SpecVersion string `protobuf:"bytes,1,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SentAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
	ReceivedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	SpecType string `protobuf:"bytes,6,opt,name=spec_type,json=specType,proto3" json:"spec_type,omitempty"`
	SpecEventType SpecEventType `protobuf:"varint,7,opt,name=spec_event_type,json=specEventType,proto3,enum=platform.spec.v2.SpecEventType" json:"spec_event_type,omitempty"`
	SpecEvent string `protobuf:"bytes,8,opt,name=spec_event,json=specEvent,proto3" json:"spec_event,omitempty"`
	Data          *anypb.Any `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecPublic) Reset() {
	*x = SpecPublic{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecPublic) ProtoMessage() {}

func (x *SpecPublic) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecPublic.ProtoReflect.Descriptor instead.
func (*SpecPublic) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{2}
}

func (x *SpecPublic) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *SpecPublic) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SpecPublic) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *SpecPublic) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *SpecPublic) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *SpecPublic) GetSpecType() string {
	if x != nil {
		return x.SpecType
	}
	return ""
}

func (x *SpecPublic) GetSpecEventType() SpecEventType {
	if x != nil {
		return x.SpecEventType
	}
	return SpecEventType_SPEC_EVENT_TYPE_UNSPECIFIED
}

func (x *SpecPublic) GetSpecEvent() string {
	if x != nil {
		return x.SpecEvent
	}
	return ""
}

func (x *SpecPublic) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type SpecContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ecosystem associated with this context.
	EcosystemSlug string `protobuf:"bytes,1,opt,name=ecosystem_slug,json=ecosystemSlug,proto3" json:"ecosystem_slug,omitempty"`
	// The organization associated with this context.
	OrganizationSlug string `protobuf:"bytes,50,opt,name=organization_slug,json=organizationSlug,proto3" json:"organization_slug,omitempty"`
	// The workspace associated with this context.
	WorkspaceSlug string `protobuf:"bytes,51,opt,name=workspace_slug,json=workspaceSlug,proto3" json:"workspace_slug,omitempty"`
	// The workspace jan associated with this context.
	// Right now this is an enumeration with a finite number of items.
	// That is incorrect. This should be a string instead.
	// See `2023-09-14 - Docs Sync` in sf-docs-internal.
	WorkspaceJan v2.Jurisdiction `protobuf:"varint,2,opt,name=workspace_jan,json=workspaceJan,proto3,enum=platform.type.v2.Jurisdiction" json:"workspace_jan,omitempty"`
	// The ip address of the requester. MUST meet RFC 791 or
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	// The locality that applies to values in the Spec Message. MUST meet [ISO 3166](https://www.iso.org/iso-3166-country-codes.html).
	Locale string `protobuf:"bytes,6,opt,name=locale,proto3" json:"locale,omitempty"`
	// The timezone where the transaction originated. MUST meet [ISO 8601 Time zone designator](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators)
	Timezone string `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Similar to the `User-Agent` header of a HTTP request. See [User-Agent - HTTP](developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) for guidance.
	UserAgent  string          `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Validation *SpecValidation `protobuf:"bytes,9,opt,name=validation,proto3" json:"validation,omitempty"`
	Producer *SpecProducer `protobuf:"bytes,10,opt,name=producer,proto3" json:"producer,omitempty"`
	Device *SpecDevice `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`
	Location *SpecLocation `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`
	Network *SpecNetwork `protobuf:"bytes,13,opt,name=network,proto3" json:"network,omitempty"`
	// The Operating System that was used to send the transaction.
	Os            *SpecOS `protobuf:"bytes,14,opt,name=os,proto3" json:"os,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecContext) Reset() {
	*x = SpecContext{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecContext) ProtoMessage() {}

func (x *SpecContext) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecContext.ProtoReflect.Descriptor instead.
func (*SpecContext) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{3}
}

func (x *SpecContext) GetEcosystemSlug() string {
	if x != nil {
		return x.EcosystemSlug
	}
	return ""
}

func (x *SpecContext) GetOrganizationSlug() string {
	if x != nil {
		return x.OrganizationSlug
	}
	return ""
}

func (x *SpecContext) GetWorkspaceSlug() string {
	if x != nil {
		return x.WorkspaceSlug
	}
	return ""
}

func (x *SpecContext) GetWorkspaceJan() v2.Jurisdiction {
	if x != nil {
		return x.WorkspaceJan
	}
	return v2.Jurisdiction(0)
}

func (x *SpecContext) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SpecContext) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *SpecContext) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *SpecContext) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *SpecContext) GetValidation() *SpecValidation {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *SpecContext) GetProducer() *SpecProducer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *SpecContext) GetDevice() *SpecDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SpecContext) GetLocation() *SpecLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SpecContext) GetNetwork() *SpecNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SpecContext) GetOs() *SpecOS {
	if x != nil {
		return x.Os
	}
	return nil
}

type SpanContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId string `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId string `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	TraceFlags    string `protobuf:"bytes,4,opt,name=trace_flags,json=traceFlags,proto3" json:"trace_flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanContext) Reset() {
	*x = SpanContext{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanContext) ProtoMessage() {}

func (x *SpanContext) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanContext.ProtoReflect.Descriptor instead.
func (*SpanContext) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{4}
}

func (x *SpanContext) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *SpanContext) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *SpanContext) GetParentSpanId() string {
	if x != nil {
		return x.ParentSpanId
	}
	return ""
}

func (x *SpanContext) GetTraceFlags() string {
	if x != nil {
		return x.TraceFlags
	}
	return ""
}

type SpecRoutineContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The routine associated with this spec event
	RoutineId     string                `protobuf:"bytes,1,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	RoutineData   map[string]*anypb.Any `protobuf:"bytes,2,rep,name=routine_data,json=routineData,proto3" json:"routine_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecRoutineContext) Reset() {
	*x = SpecRoutineContext{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecRoutineContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecRoutineContext) ProtoMessage() {}

func (x *SpecRoutineContext) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecRoutineContext.ProtoReflect.Descriptor instead.
func (*SpecRoutineContext) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{5}
}

func (x *SpecRoutineContext) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

func (x *SpecRoutineContext) GetRoutineData() map[string]*anypb.Any {
	if x != nil {
		return x.RoutineData
	}
	return nil
}

type SpecPrincipal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type        SpecPrincipalType `protobuf:"varint,1,opt,name=type,proto3,enum=platform.spec.v2.SpecPrincipalType" json:"type,omitempty"`
	AnonymousId string            `protobuf:"bytes,2,opt,name=anonymous_id,json=anonymousId,proto3" json:"anonymous_id,omitempty"`
	PrincipalId string `protobuf:"bytes,3,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	// The identity of a principal is an email address associated with a user, service account, or group; or a domain name
	PrincipalEmail string `protobuf:"bytes,4,opt,name=principal_email,json=principalEmail,proto3" json:"principal_email,omitempty"`
	// The connection id used to authenticate
	ConnectionId  string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecPrincipal) Reset() {
	*x = SpecPrincipal{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecPrincipal) ProtoMessage() {}

func (x *SpecPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecPrincipal.ProtoReflect.Descriptor instead.
func (*SpecPrincipal) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{6}
}

func (x *SpecPrincipal) GetType() SpecPrincipalType {
	if x != nil {
		return x.Type
	}
	return SpecPrincipalType_SPEC_PRINCIPAL_TYPE_UNSPECIFIED
}

func (x *SpecPrincipal) GetAnonymousId() string {
	if x != nil {
		return x.AnonymousId
	}
	return ""
}

func (x *SpecPrincipal) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *SpecPrincipal) GetPrincipalEmail() string {
	if x != nil {
		return x.PrincipalEmail
	}
	return ""
}

func (x *SpecPrincipal) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type SpecValidation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	ValidateOnly  bool `protobuf:"varint,1,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecValidation) Reset() {
	*x = SpecValidation{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecValidation) ProtoMessage() {}

func (x *SpecValidation) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecValidation.ProtoReflect.Descriptor instead.
func (*SpecValidation) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{7}
}

func (x *SpecValidation) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

type SpecProducer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Build string `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	Namespace     string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecProducer) Reset() {
	*x = SpecProducer{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecProducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecProducer) ProtoMessage() {}

func (x *SpecProducer) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecProducer.ProtoReflect.Descriptor instead.
func (*SpecProducer) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{8}
}

func (x *SpecProducer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecProducer) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SpecProducer) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *SpecProducer) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Describes the device that was used to initiate the transaction.
type SpecDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AdvertisingId string `protobuf:"bytes,3,opt,name=advertising_id,json=advertisingId,proto3" json:"advertising_id,omitempty"`
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model string `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Token         string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecDevice) Reset() {
	*x = SpecDevice{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecDevice) ProtoMessage() {}

func (x *SpecDevice) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecDevice.ProtoReflect.Descriptor instead.
func (*SpecDevice) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{9}
}

func (x *SpecDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpecDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpecDevice) GetAdvertisingId() string {
	if x != nil {
		return x.AdvertisingId
	}
	return ""
}

func (x *SpecDevice) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *SpecDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SpecDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecDevice) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Describes the geographical location where the transaction was initiated.
type SpecLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	City  string                 `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	// The country where the transaction was initiated.
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// The latitude part of the location's GPS coordinates.
	Latitude float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The longitude part of the location's GPS coordinates.
	Longitude float64 `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Unknown. <!-- issue -->
	Speed         string `protobuf:"bytes,5,opt,name=speed,proto3" json:"speed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecLocation) Reset() {
	*x = SpecLocation{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecLocation) ProtoMessage() {}

func (x *SpecLocation) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecLocation.ProtoReflect.Descriptor instead.
func (*SpecLocation) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{10}
}

func (x *SpecLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SpecLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SpecLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SpecLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *SpecLocation) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

// Contains information about which types of network were used to transport the Spec Message.
type SpecNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `True` if bluetooth was used.
	Bluetooth bool `protobuf:"varint,1,opt,name=bluetooth,proto3" json:"bluetooth,omitempty"`
	// `True` if a cellular network was used.
	Cellular bool `protobuf:"varint,2,opt,name=cellular,proto3" json:"cellular,omitempty"`
	// `True` if WiFi was used.
	Wifi bool `protobuf:"varint,3,opt,name=wifi,proto3" json:"wifi,omitempty"`
	// The name of the carrier when a cellular network was used.
	Carrier       string `protobuf:"bytes,4,opt,name=carrier,proto3" json:"carrier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecNetwork) Reset() {
	*x = SpecNetwork{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecNetwork) ProtoMessage() {}

func (x *SpecNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecNetwork.ProtoReflect.Descriptor instead.
func (*SpecNetwork) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{11}
}

func (x *SpecNetwork) GetBluetooth() bool {
	if x != nil {
		return x.Bluetooth
	}
	return false
}

func (x *SpecNetwork) GetCellular() bool {
	if x != nil {
		return x.Cellular
	}
	return false
}

func (x *SpecNetwork) GetWifi() bool {
	if x != nil {
		return x.Wifi
	}
	return false
}

func (x *SpecNetwork) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

// Describes the OS that was used to initiate the transaction.
type SpecOS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the OS.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of the OS.
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecOS) Reset() {
	*x = SpecOS{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecOS) ProtoMessage() {}

func (x *SpecOS) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecOS.ProtoReflect.Descriptor instead.
func (*SpecOS) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{12}
}

func (x *SpecOS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecOS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Describes the Data object for this spec event
type SpecData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Configuration *anypb.Any             `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Data          *anypb.Any             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecData) Reset() {
	*x = SpecData{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecData) ProtoMessage() {}

func (x *SpecData) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecData.ProtoReflect.Descriptor instead.
func (*SpecData) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{13}
}

func (x *SpecData) GetConfiguration() *anypb.Any {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *SpecData) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SpecData) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type SpecRequestContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Should we only validate this request? There are no mutating side effects
	RequestValidation *v2.RequestValidation `protobuf:"bytes,1,opt,name=request_validation,json=requestValidation,proto3" json:"request_validation,omitempty"`
	// The organization to which you want to associate this request
	OrganizationSlug string `protobuf:"bytes,2,opt,name=organization_slug,json=organizationSlug,proto3" json:"organization_slug,omitempty"`
	// The workspace to which you want to associate this request
	WorkspaceSlug string `protobuf:"bytes,3,opt,name=workspace_slug,json=workspaceSlug,proto3" json:"workspace_slug,omitempty"`
	RoutineId     string `protobuf:"bytes,4,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecRequestContext) Reset() {
	*x = SpecRequestContext{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecRequestContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecRequestContext) ProtoMessage() {}

func (x *SpecRequestContext) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecRequestContext.ProtoReflect.Descriptor instead.
func (*SpecRequestContext) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{14}
}

func (x *SpecRequestContext) GetRequestValidation() *v2.RequestValidation {
	if x != nil {
		return x.RequestValidation
	}
	return nil
}

func (x *SpecRequestContext) GetOrganizationSlug() string {
	if x != nil {
		return x.OrganizationSlug
	}
	return ""
}

func (x *SpecRequestContext) GetWorkspaceSlug() string {
	if x != nil {
		return x.WorkspaceSlug
	}
	return ""
}

func (x *SpecRequestContext) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

type SpecResponseContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether this request is a validate only request
	ResponseValidation *v2.ResponseValidation `protobuf:"bytes,1,opt,name=response_validation,json=responseValidation,proto3" json:"response_validation,omitempty"`
	// How we have masked the response based on requested masking and policy masking
	ResponseMask  *v2.ResponseMask `protobuf:"bytes,2,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
	EcosystemSlug string           `protobuf:"bytes,3,opt,name=ecosystem_slug,json=ecosystemSlug,proto3" json:"ecosystem_slug,omitempty"`
	// The organization associated with this response
	OrganizationSlug string `protobuf:"bytes,50,opt,name=organization_slug,json=organizationSlug,proto3" json:"organization_slug,omitempty"`
	// The workspace associated with this response
	WorkspaceSlug string `protobuf:"bytes,51,opt,name=workspace_slug,json=workspaceSlug,proto3" json:"workspace_slug,omitempty"`
	// The workspace location associated with this response
	WorkspaceJan  v2.Jurisdiction `protobuf:"varint,52,opt,name=workspace_jan,json=workspaceJan,proto3,enum=platform.type.v2.Jurisdiction" json:"workspace_jan,omitempty"`
	RoutineId     string          `protobuf:"bytes,53,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecResponseContext) Reset() {
	*x = SpecResponseContext{}
	mi := &file_platform_spec_v2_spec_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecResponseContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecResponseContext) ProtoMessage() {}

func (x *SpecResponseContext) ProtoReflect() protoreflect.Message {
	mi := &file_platform_spec_v2_spec_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecResponseContext.ProtoReflect.Descriptor instead.
func (*SpecResponseContext) Descriptor() ([]byte, []int) {
	return file_platform_spec_v2_spec_proto_rawDescGZIP(), []int{15}
}

func (x *SpecResponseContext) GetResponseValidation() *v2.ResponseValidation {
	if x != nil {
		return x.ResponseValidation
	}
	return nil
}

func (x *SpecResponseContext) GetResponseMask() *v2.ResponseMask {
	if x != nil {
		return x.ResponseMask
	}
	return nil
}

func (x *SpecResponseContext) GetEcosystemSlug() string {
	if x != nil {
		return x.EcosystemSlug
	}
	return ""
}

func (x *SpecResponseContext) GetOrganizationSlug() string {
	if x != nil {
		return x.OrganizationSlug
	}
	return ""
}

func (x *SpecResponseContext) GetWorkspaceSlug() string {
	if x != nil {
		return x.WorkspaceSlug
	}
	return ""
}

func (x *SpecResponseContext) GetWorkspaceJan() v2.Jurisdiction {
	if x != nil {
		return x.WorkspaceJan
	}
	return v2.Jurisdiction(0)
}

func (x *SpecResponseContext) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

var File_platform_spec_v2_spec_proto protoreflect.FileDescriptor

var file_platform_spec_v2_spec_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x53, 0x70,
	0x65, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x43, 0x0a, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4a, 0x61, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0xfa, 0xb6, 0x18,
	0x02, 0x08, 0x01, 0x22, 0xf2, 0x05, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4d,
	0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08,
	0x01, 0x22, 0x8b, 0x05, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x43, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4a, 0x61,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22,
	0x90, 0x01, 0x0a, 0x0b, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02,
	0x08, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x54, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01,
	0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a,
	0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x3d, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x3a, 0x06,
	0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x78, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01,
	0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06,
	0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x7d, 0x0a,
	0x0b, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x69, 0x66, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x3e, 0x0a, 0x06,
	0x53, 0x70, 0x65, 0x63, 0x4f, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xb3, 0x01, 0x0a,
	0x08, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02,
	0x08, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x98, 0x03, 0x0a, 0x13, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x43, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x61, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4a, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x3a, 0x06, 0xfa, 0xb6, 0x18,
	0x02, 0x08, 0x02, 0x2a, 0xa0, 0x02, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x42, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x50, 0x45, 0x43, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x4c, 0x10, 0x08, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x09, 0x2a, 0xbe, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x50, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49,
	0x50, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x50, 0x45, 0x43,
	0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x45, 0x43, 0x5f,
	0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x42, 0x3f, 0x9a, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x5a,
	0x37, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76, 0x32, 0x3b,
	0x73, 0x70, 0x65, 0x63, 0x76, 0x32, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_platform_spec_v2_spec_proto_rawDescOnce sync.Once
	file_platform_spec_v2_spec_proto_rawDescData []byte
)

func file_platform_spec_v2_spec_proto_rawDescGZIP() []byte {
	file_platform_spec_v2_spec_proto_rawDescOnce.Do(func() {
		file_platform_spec_v2_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_platform_spec_v2_spec_proto_rawDesc), len(file_platform_spec_v2_spec_proto_rawDesc)))
	})
	return file_platform_spec_v2_spec_proto_rawDescData
}

var file_platform_spec_v2_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_platform_spec_v2_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_platform_spec_v2_spec_proto_goTypes = []any{
	(SpecEventType)(0),            // 0: platform.spec.v2.SpecEventType
	(SpecPrincipalType)(0),        // 1: platform.spec.v2.SpecPrincipalType
	(*SpecKey)(nil),               // 2: platform.spec.v2.SpecKey
	(*Spec)(nil),                  // 3: platform.spec.v2.Spec
	(*SpecPublic)(nil),            // 4: platform.spec.v2.SpecPublic
	(*SpecContext)(nil),           // 5: platform.spec.v2.SpecContext
	(*SpanContext)(nil),           // 6: platform.spec.v2.SpanContext
	(*SpecRoutineContext)(nil),    // 7: platform.spec.v2.SpecRoutineContext
	(*SpecPrincipal)(nil),         // 8: platform.spec.v2.SpecPrincipal
	(*SpecValidation)(nil),        // 9: platform.spec.v2.SpecValidation
	(*SpecProducer)(nil),          // 10: platform.spec.v2.SpecProducer
	(*SpecDevice)(nil),            // 11: platform.spec.v2.SpecDevice
	(*SpecLocation)(nil),          // 12: platform.spec.v2.SpecLocation
	(*SpecNetwork)(nil),           // 13: platform.spec.v2.SpecNetwork
	(*SpecOS)(nil),                // 14: platform.spec.v2.SpecOS
	(*SpecData)(nil),              // 15: platform.spec.v2.SpecData
	(*SpecRequestContext)(nil),    // 16: platform.spec.v2.SpecRequestContext
	(*SpecResponseContext)(nil),   // 17: platform.spec.v2.SpecResponseContext
	nil,                           // 18: platform.spec.v2.SpecRoutineContext.RoutineDataEntry
	(v2.Jurisdiction)(0),          // 19: platform.type.v2.Jurisdiction
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 21: google.protobuf.Any
	(*fieldmaskpb.FieldMask)(nil), // 22: google.protobuf.FieldMask
	(*v2.RequestValidation)(nil),  // 23: platform.type.v2.RequestValidation
	(*v2.ResponseValidation)(nil), // 24: platform.type.v2.ResponseValidation
	(*v2.ResponseMask)(nil),       // 25: platform.type.v2.ResponseMask
}
var file_platform_spec_v2_spec_proto_depIdxs = []int32{
	19, // 0: platform.spec.v2.SpecKey.workspace_jan:type_name -> platform.type.v2.Jurisdiction
	20, // 1: platform.spec.v2.Spec.sent_at:type_name -> google.protobuf.Timestamp
	20, // 2: platform.spec.v2.Spec.received_at:type_name -> google.protobuf.Timestamp
	20, // 3: platform.spec.v2.Spec.completed_at:type_name -> google.protobuf.Timestamp
	0,  // 4: platform.spec.v2.Spec.spec_event_type:type_name -> platform.spec.v2.SpecEventType
	8,  // 5: platform.spec.v2.Spec.principal:type_name -> platform.spec.v2.SpecPrincipal
	6,  // 6: platform.spec.v2.Spec.span_context:type_name -> platform.spec.v2.SpanContext
	5,  // 7: platform.spec.v2.Spec.context:type_name -> platform.spec.v2.SpecContext
	7,  // 8: platform.spec.v2.Spec.routine_context:type_name -> platform.spec.v2.SpecRoutineContext
	21, // 9: platform.spec.v2.Spec.data:type_name -> google.protobuf.Any
	15, // 10: platform.spec.v2.Spec.spec_data:type_name -> platform.spec.v2.SpecData
	20, // 11: platform.spec.v2.SpecPublic.sent_at:type_name -> google.protobuf.Timestamp
	20, // 12: platform.spec.v2.SpecPublic.received_at:type_name -> google.protobuf.Timestamp
	20, // 13: platform.spec.v2.SpecPublic.completed_at:type_name -> google.protobuf.Timestamp
	0,  // 14: platform.spec.v2.SpecPublic.spec_event_type:type_name -> platform.spec.v2.SpecEventType
	21, // 15: platform.spec.v2.SpecPublic.data:type_name -> google.protobuf.Any
	19, // 16: platform.spec.v2.SpecContext.workspace_jan:type_name -> platform.type.v2.Jurisdiction
	9,  // 17: platform.spec.v2.SpecContext.validation:type_name -> platform.spec.v2.SpecValidation
	10, // 18: platform.spec.v2.SpecContext.producer:type_name -> platform.spec.v2.SpecProducer
	11, // 19: platform.spec.v2.SpecContext.device:type_name -> platform.spec.v2.SpecDevice
	12, // 20: platform.spec.v2.SpecContext.location:type_name -> platform.spec.v2.SpecLocation
	13, // 21: platform.spec.v2.SpecContext.network:type_name -> platform.spec.v2.SpecNetwork
	14, // 22: platform.spec.v2.SpecContext.os:type_name -> platform.spec.v2.SpecOS
	18, // 23: platform.spec.v2.SpecRoutineContext.routine_data:type_name -> platform.spec.v2.SpecRoutineContext.RoutineDataEntry
	1,  // 24: platform.spec.v2.SpecPrincipal.type:type_name -> platform.spec.v2.SpecPrincipalType
	21, // 25: platform.spec.v2.SpecData.configuration:type_name -> google.protobuf.Any
	21, // 26: platform.spec.v2.SpecData.data:type_name -> google.protobuf.Any
	22, // 27: platform.spec.v2.SpecData.field_mask:type_name -> google.protobuf.FieldMask
	23, // 28: platform.spec.v2.SpecRequestContext.request_validation:type_name -> platform.type.v2.RequestValidation
	24, // 29: platform.spec.v2.SpecResponseContext.response_validation:type_name -> platform.type.v2.ResponseValidation
	25, // 30: platform.spec.v2.SpecResponseContext.response_mask:type_name -> platform.type.v2.ResponseMask
	19, // 31: platform.spec.v2.SpecResponseContext.workspace_jan:type_name -> platform.type.v2.Jurisdiction
	21, // 32: platform.spec.v2.SpecRoutineContext.RoutineDataEntry.value:type_name -> google.protobuf.Any
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_platform_spec_v2_spec_proto_init() }
func file_platform_spec_v2_spec_proto_init() {
	if File_platform_spec_v2_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_platform_spec_v2_spec_proto_rawDesc), len(file_platform_spec_v2_spec_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_platform_spec_v2_spec_proto_goTypes,
		DependencyIndexes: file_platform_spec_v2_spec_proto_depIdxs,
		EnumInfos:         file_platform_spec_v2_spec_proto_enumTypes,
		MessageInfos:      file_platform_spec_v2_spec_proto_msgTypes,
	}.Build()
	File_platform_spec_v2_spec_proto = out.File
	file_platform_spec_v2_spec_proto_goTypes = nil
	file_platform_spec_v2_spec_proto_depIdxs = nil
}
