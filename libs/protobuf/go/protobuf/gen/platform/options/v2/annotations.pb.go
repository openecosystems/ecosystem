// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: platform/options/v2/annotations.proto

package optionv2pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkType int32

const (
	NetworkType_NETWORK_TYPE_UNSPECIFIED NetworkType = 0
	NetworkType_NETWORK_TYPE_UNDERLAY    NetworkType = 1 // Loopbacks, UNIX Sockets, direct-point-to-point fabric
	NetworkType_NETWORK_TYPE_INTERNET    NetworkType = 2 // HTTPS public internet, externally managed proxies or VPNs
	NetworkType_NETWORK_TYPE_OVERLAY     NetworkType = 3 // Mesh Overlay network, internally managed proxy and/or VPN
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_UNSPECIFIED",
		1: "NETWORK_TYPE_UNDERLAY",
		2: "NETWORK_TYPE_INTERNET",
		3: "NETWORK_TYPE_OVERLAY",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_UNSPECIFIED": 0,
		"NETWORK_TYPE_UNDERLAY":    1,
		"NETWORK_TYPE_INTERNET":    2,
		"NETWORK_TYPE_OVERLAY":     3,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[0].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[0]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{0}
}

type ApiType int32

const (
	ApiType_API_TYPE_UNSPECIFIED ApiType = 0
	ApiType_API_TYPE_PRIVATE     ApiType = 1
	ApiType_API_TYPE_PARTNER     ApiType = 2
	ApiType_API_TYPE_PUBLIC      ApiType = 3
	ApiType_API_TYPE_POC         ApiType = 4
)

// Enum value maps for ApiType.
var (
	ApiType_name = map[int32]string{
		0: "API_TYPE_UNSPECIFIED",
		1: "API_TYPE_PRIVATE",
		2: "API_TYPE_PARTNER",
		3: "API_TYPE_PUBLIC",
		4: "API_TYPE_POC",
	}
	ApiType_value = map[string]int32{
		"API_TYPE_UNSPECIFIED": 0,
		"API_TYPE_PRIVATE":     1,
		"API_TYPE_PARTNER":     2,
		"API_TYPE_PUBLIC":      3,
		"API_TYPE_POC":         4,
	}
)

func (x ApiType) Enum() *ApiType {
	p := new(ApiType)
	*p = x
	return p
}

func (x ApiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[1].Descriptor()
}

func (ApiType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[1]
}

func (x ApiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiType.Descriptor instead.
func (ApiType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{1}
}

type ApiInterfaceType int32

const (
	ApiInterfaceType_API_INTERFACE_TYPE_UNSPECIFIED  ApiInterfaceType = 0
	ApiInterfaceType_API_INTERFACE_TYPE_META         ApiInterfaceType = 1
	ApiInterfaceType_API_INTERFACE_TYPE_OPERATIONAL  ApiInterfaceType = 2
	ApiInterfaceType_API_INTERFACE_TYPE_CONTRIBUTION ApiInterfaceType = 3
	ApiInterfaceType_API_INTERFACE_TYPE_ANALYTICAL   ApiInterfaceType = 4
	ApiInterfaceType_API_INTERFACE_TYPE_OBSERVABLE   ApiInterfaceType = 5
	ApiInterfaceType_API_INTERFACE_TYPE_DISCOVERABLE ApiInterfaceType = 6
)

// Enum value maps for ApiInterfaceType.
var (
	ApiInterfaceType_name = map[int32]string{
		0: "API_INTERFACE_TYPE_UNSPECIFIED",
		1: "API_INTERFACE_TYPE_META",
		2: "API_INTERFACE_TYPE_OPERATIONAL",
		3: "API_INTERFACE_TYPE_CONTRIBUTION",
		4: "API_INTERFACE_TYPE_ANALYTICAL",
		5: "API_INTERFACE_TYPE_OBSERVABLE",
		6: "API_INTERFACE_TYPE_DISCOVERABLE",
	}
	ApiInterfaceType_value = map[string]int32{
		"API_INTERFACE_TYPE_UNSPECIFIED":  0,
		"API_INTERFACE_TYPE_META":         1,
		"API_INTERFACE_TYPE_OPERATIONAL":  2,
		"API_INTERFACE_TYPE_CONTRIBUTION": 3,
		"API_INTERFACE_TYPE_ANALYTICAL":   4,
		"API_INTERFACE_TYPE_OBSERVABLE":   5,
		"API_INTERFACE_TYPE_DISCOVERABLE": 6,
	}
)

func (x ApiInterfaceType) Enum() *ApiInterfaceType {
	p := new(ApiInterfaceType)
	*p = x
	return p
}

func (x ApiInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[2].Descriptor()
}

func (ApiInterfaceType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[2]
}

func (x ApiInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiInterfaceType.Descriptor instead.
func (ApiInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{2}
}

type ApiLifecycle int32

const (
	ApiLifecycle_API_LIFECYCLE_UNSPECIFIED          ApiLifecycle = 0
	ApiLifecycle_API_LIFECYCLE_ALPHA                ApiLifecycle = 1
	ApiLifecycle_API_LIFECYCLE_BETA                 ApiLifecycle = 2
	ApiLifecycle_API_LIFECYCLE_LIMITED_AVAILABILITY ApiLifecycle = 3
	ApiLifecycle_API_LIFECYCLE_GENERAL_AVAILABILITY ApiLifecycle = 4
	ApiLifecycle_API_LIFECYCLE_DEPRECATED           ApiLifecycle = 5
	ApiLifecycle_API_LIFECYCLE_RETIRED              ApiLifecycle = 6
)

// Enum value maps for ApiLifecycle.
var (
	ApiLifecycle_name = map[int32]string{
		0: "API_LIFECYCLE_UNSPECIFIED",
		1: "API_LIFECYCLE_ALPHA",
		2: "API_LIFECYCLE_BETA",
		3: "API_LIFECYCLE_LIMITED_AVAILABILITY",
		4: "API_LIFECYCLE_GENERAL_AVAILABILITY",
		5: "API_LIFECYCLE_DEPRECATED",
		6: "API_LIFECYCLE_RETIRED",
	}
	ApiLifecycle_value = map[string]int32{
		"API_LIFECYCLE_UNSPECIFIED":          0,
		"API_LIFECYCLE_ALPHA":                1,
		"API_LIFECYCLE_BETA":                 2,
		"API_LIFECYCLE_LIMITED_AVAILABILITY": 3,
		"API_LIFECYCLE_GENERAL_AVAILABILITY": 4,
		"API_LIFECYCLE_DEPRECATED":           5,
		"API_LIFECYCLE_RETIRED":              6,
	}
)

func (x ApiLifecycle) Enum() *ApiLifecycle {
	p := new(ApiLifecycle)
	*p = x
	return p
}

func (x ApiLifecycle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiLifecycle) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[3].Descriptor()
}

func (ApiLifecycle) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[3]
}

func (x ApiLifecycle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiLifecycle.Descriptor instead.
func (ApiLifecycle) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{3}
}

type EntityType int32

const (
	EntityType_ENTITY_TYPE_UNSPECIFIED EntityType = 0
	EntityType_ENTITY_TYPE_AEROSPIKE   EntityType = 1
	EntityType_ENTITY_TYPE_DGRAPH      EntityType = 2
	EntityType_ENTITY_TYPE_MONGODB     EntityType = 3
	EntityType_ENTITY_TYPE_BIGQUERY    EntityType = 4
	EntityType_ENTITY_TYPE_REDIS       EntityType = 5
	EntityType_ENTITY_TYPE_ROCKSDB     EntityType = 6
	EntityType_ENTITY_TYPE_COUCHBASE   EntityType = 7
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "ENTITY_TYPE_AEROSPIKE",
		2: "ENTITY_TYPE_DGRAPH",
		3: "ENTITY_TYPE_MONGODB",
		4: "ENTITY_TYPE_BIGQUERY",
		5: "ENTITY_TYPE_REDIS",
		6: "ENTITY_TYPE_ROCKSDB",
		7: "ENTITY_TYPE_COUCHBASE",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED": 0,
		"ENTITY_TYPE_AEROSPIKE":   1,
		"ENTITY_TYPE_DGRAPH":      2,
		"ENTITY_TYPE_MONGODB":     3,
		"ENTITY_TYPE_BIGQUERY":    4,
		"ENTITY_TYPE_REDIS":       5,
		"ENTITY_TYPE_ROCKSDB":     6,
		"ENTITY_TYPE_COUCHBASE":   7,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[4].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[4]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{4}
}

type EntityConsistency int32

const (
	EntityConsistency_ENTITY_CONSISTENCY_UNSPECIFIED EntityConsistency = 0
	EntityConsistency_ENTITY_CONSISTENCY_STRONG      EntityConsistency = 1
	EntityConsistency_ENTITY_CONSISTENCY_EVENTUAL    EntityConsistency = 2
)

// Enum value maps for EntityConsistency.
var (
	EntityConsistency_name = map[int32]string{
		0: "ENTITY_CONSISTENCY_UNSPECIFIED",
		1: "ENTITY_CONSISTENCY_STRONG",
		2: "ENTITY_CONSISTENCY_EVENTUAL",
	}
	EntityConsistency_value = map[string]int32{
		"ENTITY_CONSISTENCY_UNSPECIFIED": 0,
		"ENTITY_CONSISTENCY_STRONG":      1,
		"ENTITY_CONSISTENCY_EVENTUAL":    2,
	}
)

func (x EntityConsistency) Enum() *EntityConsistency {
	p := new(EntityConsistency)
	*p = x
	return p
}

func (x EntityConsistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityConsistency) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[5].Descriptor()
}

func (EntityConsistency) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[5]
}

func (x EntityConsistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityConsistency.Descriptor instead.
func (EntityConsistency) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{5}
}

type EntityHierarchy int32

const (
	EntityHierarchy_ENTITY_HIERARCHY_UNSPECIFIED  EntityHierarchy = 0
	EntityHierarchy_ENTITY_HIERARCHY_PLATFORM     EntityHierarchy = 1
	EntityHierarchy_ENTITY_HIERARCHY_ORGANIZATION EntityHierarchy = 2
	EntityHierarchy_ENTITY_HIERARCHY_WORKSPACE    EntityHierarchy = 3
)

// Enum value maps for EntityHierarchy.
var (
	EntityHierarchy_name = map[int32]string{
		0: "ENTITY_HIERARCHY_UNSPECIFIED",
		1: "ENTITY_HIERARCHY_PLATFORM",
		2: "ENTITY_HIERARCHY_ORGANIZATION",
		3: "ENTITY_HIERARCHY_WORKSPACE",
	}
	EntityHierarchy_value = map[string]int32{
		"ENTITY_HIERARCHY_UNSPECIFIED":  0,
		"ENTITY_HIERARCHY_PLATFORM":     1,
		"ENTITY_HIERARCHY_ORGANIZATION": 2,
		"ENTITY_HIERARCHY_WORKSPACE":    3,
	}
)

func (x EntityHierarchy) Enum() *EntityHierarchy {
	p := new(EntityHierarchy)
	*p = x
	return p
}

func (x EntityHierarchy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityHierarchy) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[6].Descriptor()
}

func (EntityHierarchy) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[6]
}

func (x EntityHierarchy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityHierarchy.Descriptor instead.
func (EntityHierarchy) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{6}
}

type LanguageType int32

const (
	LanguageType_LANGUAGE_TYPE_UNSPECIFIED LanguageType = 0
	LanguageType_LANGUAGE_TYPE_CPLUSPLUS   LanguageType = 1
	LanguageType_LANGUAGE_TYPE_RUST        LanguageType = 2
	LanguageType_LANGUAGE_TYPE_GOLANG      LanguageType = 3
	LanguageType_LANGUAGE_TYPE_JAVA        LanguageType = 4
	LanguageType_LANGUAGE_TYPE_PYTHON      LanguageType = 5
	LanguageType_LANGUAGE_TYPE_TYPESCRIPT  LanguageType = 6
	LanguageType_LANGUAGE_TYPE_CSHARP      LanguageType = 7
	LanguageType_LANGUAGE_TYPE_SWIFT       LanguageType = 8
	LanguageType_LANGUAGE_TYPE_ANDROID     LanguageType = 9
	LanguageType_LANGUAGE_TYPE_GRAPHQL     LanguageType = 10
	LanguageType_LANGUAGE_TYPE_LUA         LanguageType = 11
)

// Enum value maps for LanguageType.
var (
	LanguageType_name = map[int32]string{
		0:  "LANGUAGE_TYPE_UNSPECIFIED",
		1:  "LANGUAGE_TYPE_CPLUSPLUS",
		2:  "LANGUAGE_TYPE_RUST",
		3:  "LANGUAGE_TYPE_GOLANG",
		4:  "LANGUAGE_TYPE_JAVA",
		5:  "LANGUAGE_TYPE_PYTHON",
		6:  "LANGUAGE_TYPE_TYPESCRIPT",
		7:  "LANGUAGE_TYPE_CSHARP",
		8:  "LANGUAGE_TYPE_SWIFT",
		9:  "LANGUAGE_TYPE_ANDROID",
		10: "LANGUAGE_TYPE_GRAPHQL",
		11: "LANGUAGE_TYPE_LUA",
	}
	LanguageType_value = map[string]int32{
		"LANGUAGE_TYPE_UNSPECIFIED": 0,
		"LANGUAGE_TYPE_CPLUSPLUS":   1,
		"LANGUAGE_TYPE_RUST":        2,
		"LANGUAGE_TYPE_GOLANG":      3,
		"LANGUAGE_TYPE_JAVA":        4,
		"LANGUAGE_TYPE_PYTHON":      5,
		"LANGUAGE_TYPE_TYPESCRIPT":  6,
		"LANGUAGE_TYPE_CSHARP":      7,
		"LANGUAGE_TYPE_SWIFT":       8,
		"LANGUAGE_TYPE_ANDROID":     9,
		"LANGUAGE_TYPE_GRAPHQL":     10,
		"LANGUAGE_TYPE_LUA":         11,
	}
)

func (x LanguageType) Enum() *LanguageType {
	p := new(LanguageType)
	*p = x
	return p
}

func (x LanguageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[7].Descriptor()
}

func (LanguageType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[7]
}

func (x LanguageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageType.Descriptor instead.
func (LanguageType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{7}
}

type ConnectorType int32

const (
	ConnectorType_CONNECTOR_TYPE_UNSPECIFIED ConnectorType = 0
	ConnectorType_CONNECTOR_TYPE_REFERENCE   ConnectorType = 1
)

// Enum value maps for ConnectorType.
var (
	ConnectorType_name = map[int32]string{
		0: "CONNECTOR_TYPE_UNSPECIFIED",
		1: "CONNECTOR_TYPE_REFERENCE",
	}
	ConnectorType_value = map[string]int32{
		"CONNECTOR_TYPE_UNSPECIFIED": 0,
		"CONNECTOR_TYPE_REFERENCE":   1,
	}
)

func (x ConnectorType) Enum() *ConnectorType {
	p := new(ConnectorType)
	*p = x
	return p
}

func (x ConnectorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectorType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[8].Descriptor()
}

func (ConnectorType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[8]
}

func (x ConnectorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectorType.Descriptor instead.
func (ConnectorType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{8}
}

type AuthRoleType int32

const (
	AuthRoleType_AUTH_ROLE_TYPE_UNSPECIFIED    AuthRoleType = 0
	AuthRoleType_AUTH_ROLE_TYPE_PLATFORM       AuthRoleType = 1
	AuthRoleType_AUTH_ROLE_TYPE_ORGANIZATION   AuthRoleType = 2
	AuthRoleType_AUTH_ROLE_TYPE_WORKSPACE      AuthRoleType = 3
	AuthRoleType_AUTH_ROLE_TYPE_CONNECTED_TEST AuthRoleType = 4
)

// Enum value maps for AuthRoleType.
var (
	AuthRoleType_name = map[int32]string{
		0: "AUTH_ROLE_TYPE_UNSPECIFIED",
		1: "AUTH_ROLE_TYPE_PLATFORM",
		2: "AUTH_ROLE_TYPE_ORGANIZATION",
		3: "AUTH_ROLE_TYPE_WORKSPACE",
		4: "AUTH_ROLE_TYPE_CONNECTED_TEST",
	}
	AuthRoleType_value = map[string]int32{
		"AUTH_ROLE_TYPE_UNSPECIFIED":    0,
		"AUTH_ROLE_TYPE_PLATFORM":       1,
		"AUTH_ROLE_TYPE_ORGANIZATION":   2,
		"AUTH_ROLE_TYPE_WORKSPACE":      3,
		"AUTH_ROLE_TYPE_CONNECTED_TEST": 4,
	}
)

func (x AuthRoleType) Enum() *AuthRoleType {
	p := new(AuthRoleType)
	*p = x
	return p
}

func (x AuthRoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthRoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[9].Descriptor()
}

func (AuthRoleType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[9]
}

func (x AuthRoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthRoleType.Descriptor instead.
func (AuthRoleType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{9}
}

type CQRSType int32

const (
	CQRSType_CQRS_TYPE_UNSPECIFIED            CQRSType = 0
	CQRSType_CQRS_TYPE_NONE                   CQRSType = 1
	CQRSType_CQRS_TYPE_MUTATION_CREATE        CQRSType = 2
	CQRSType_CQRS_TYPE_MUTATION_UPDATE        CQRSType = 3
	CQRSType_CQRS_TYPE_MUTATION_DELETE        CQRSType = 4
	CQRSType_CQRS_TYPE_MUTATION_CLIENT_STREAM CQRSType = 5
	CQRSType_CQRS_TYPE_MUTATION_SERVER_STREAM CQRSType = 6
	CQRSType_CQRS_TYPE_MUTATION_BIDI_STREAM   CQRSType = 7
	CQRSType_CQRS_TYPE_QUERY_LIST             CQRSType = 8
	CQRSType_CQRS_TYPE_QUERY_STREAM           CQRSType = 9
	CQRSType_CQRS_TYPE_QUERY_GET              CQRSType = 10
	CQRSType_CQRS_TYPE_QUERY_EVENT_STREAM     CQRSType = 11
	CQRSType_CQRS_TYPE_QUERY_CLIENT_STREAM    CQRSType = 12
	CQRSType_CQRS_TYPE_QUERY_SERVER_STREAM    CQRSType = 13
	CQRSType_CQRS_TYPE_QUERY_BIDI_STREAM      CQRSType = 14
	CQRSType_CQRS_TYPE_QUERY_EXISTS           CQRSType = 15
)

// Enum value maps for CQRSType.
var (
	CQRSType_name = map[int32]string{
		0:  "CQRS_TYPE_UNSPECIFIED",
		1:  "CQRS_TYPE_NONE",
		2:  "CQRS_TYPE_MUTATION_CREATE",
		3:  "CQRS_TYPE_MUTATION_UPDATE",
		4:  "CQRS_TYPE_MUTATION_DELETE",
		5:  "CQRS_TYPE_MUTATION_CLIENT_STREAM",
		6:  "CQRS_TYPE_MUTATION_SERVER_STREAM",
		7:  "CQRS_TYPE_MUTATION_BIDI_STREAM",
		8:  "CQRS_TYPE_QUERY_LIST",
		9:  "CQRS_TYPE_QUERY_STREAM",
		10: "CQRS_TYPE_QUERY_GET",
		11: "CQRS_TYPE_QUERY_EVENT_STREAM",
		12: "CQRS_TYPE_QUERY_CLIENT_STREAM",
		13: "CQRS_TYPE_QUERY_SERVER_STREAM",
		14: "CQRS_TYPE_QUERY_BIDI_STREAM",
		15: "CQRS_TYPE_QUERY_EXISTS",
	}
	CQRSType_value = map[string]int32{
		"CQRS_TYPE_UNSPECIFIED":            0,
		"CQRS_TYPE_NONE":                   1,
		"CQRS_TYPE_MUTATION_CREATE":        2,
		"CQRS_TYPE_MUTATION_UPDATE":        3,
		"CQRS_TYPE_MUTATION_DELETE":        4,
		"CQRS_TYPE_MUTATION_CLIENT_STREAM": 5,
		"CQRS_TYPE_MUTATION_SERVER_STREAM": 6,
		"CQRS_TYPE_MUTATION_BIDI_STREAM":   7,
		"CQRS_TYPE_QUERY_LIST":             8,
		"CQRS_TYPE_QUERY_STREAM":           9,
		"CQRS_TYPE_QUERY_GET":              10,
		"CQRS_TYPE_QUERY_EVENT_STREAM":     11,
		"CQRS_TYPE_QUERY_CLIENT_STREAM":    12,
		"CQRS_TYPE_QUERY_SERVER_STREAM":    13,
		"CQRS_TYPE_QUERY_BIDI_STREAM":      14,
		"CQRS_TYPE_QUERY_EXISTS":           15,
	}
)

func (x CQRSType) Enum() *CQRSType {
	p := new(CQRSType)
	*p = x
	return p
}

func (x CQRSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CQRSType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[10].Descriptor()
}

func (CQRSType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[10]
}

func (x CQRSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CQRSType.Descriptor instead.
func (CQRSType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{10}
}

type AuthRole int32

const (
	AuthRole_AUTH_ROLE_UNSPECIFIED                 AuthRole = 0
	AuthRole_AUTH_ROLE_PLATFORM_SUPER_ADMIN        AuthRole = 100
	AuthRole_AUTH_ROLE_PLATFORM_CLINICAL_ADMIN     AuthRole = 101
	AuthRole_AUTH_ROLE_PLATFORM_BILLING_ADMIN      AuthRole = 102
	AuthRole_AUTH_ROLE_PLATFORM_ADMIN              AuthRole = 103
	AuthRole_AUTH_ROLE_PLATFORM_MANAGER            AuthRole = 104
	AuthRole_AUTH_ROLE_PLATFORM_USER               AuthRole = 105
	AuthRole_AUTH_ROLE_PLATFORM_VIEWER             AuthRole = 106
	AuthRole_AUTH_ROLE_ORGANIZATION_SUPER_ADMIN    AuthRole = 200
	AuthRole_AUTH_ROLE_ORGANIZATION_CLINICAL_ADMIN AuthRole = 201
	AuthRole_AUTH_ROLE_ORGANIZATION_BILLING_ADMIN  AuthRole = 202
	AuthRole_AUTH_ROLE_ORGANIZATION_ADMIN          AuthRole = 203
	AuthRole_AUTH_ROLE_ORGANIZATION_MANAGER        AuthRole = 204
	AuthRole_AUTH_ROLE_ORGANIZATION_USER           AuthRole = 205
	AuthRole_AUTH_ROLE_ORGANIZATION_VIEWER         AuthRole = 206
	AuthRole_AUTH_ROLE_WORKSPACE_SUPER_ADMIN       AuthRole = 300
	AuthRole_AUTH_ROLE_WORKSPACE_CLINICAL_ADMIN    AuthRole = 301
	AuthRole_AUTH_ROLE_WORKSPACE_BILLING_ADMIN     AuthRole = 302
	AuthRole_AUTH_ROLE_WORKSPACE_ADMIN             AuthRole = 303
	AuthRole_AUTH_ROLE_WORKSPACE_MANAGER           AuthRole = 304
	AuthRole_AUTH_ROLE_WORKSPACE_USER              AuthRole = 305
	AuthRole_AUTH_ROLE_WORKSPACE_VIEWER            AuthRole = 306
	AuthRole_AUTH_ROLE_CONNECTED_TEST_PATIENT      AuthRole = 15
	AuthRole_AUTH_ROLE_CONNECTED_TEST_PROVIDER     AuthRole = 16
	// Such as power of attorney
	AuthRole_AUTH_ROLE_CONNECTED_TEST_PROXY  AuthRole = 17
	AuthRole_AUTH_ROLE_CONNECTED_TEST_VIEWER AuthRole = 18
)

// Enum value maps for AuthRole.
var (
	AuthRole_name = map[int32]string{
		0:   "AUTH_ROLE_UNSPECIFIED",
		100: "AUTH_ROLE_PLATFORM_SUPER_ADMIN",
		101: "AUTH_ROLE_PLATFORM_CLINICAL_ADMIN",
		102: "AUTH_ROLE_PLATFORM_BILLING_ADMIN",
		103: "AUTH_ROLE_PLATFORM_ADMIN",
		104: "AUTH_ROLE_PLATFORM_MANAGER",
		105: "AUTH_ROLE_PLATFORM_USER",
		106: "AUTH_ROLE_PLATFORM_VIEWER",
		200: "AUTH_ROLE_ORGANIZATION_SUPER_ADMIN",
		201: "AUTH_ROLE_ORGANIZATION_CLINICAL_ADMIN",
		202: "AUTH_ROLE_ORGANIZATION_BILLING_ADMIN",
		203: "AUTH_ROLE_ORGANIZATION_ADMIN",
		204: "AUTH_ROLE_ORGANIZATION_MANAGER",
		205: "AUTH_ROLE_ORGANIZATION_USER",
		206: "AUTH_ROLE_ORGANIZATION_VIEWER",
		300: "AUTH_ROLE_WORKSPACE_SUPER_ADMIN",
		301: "AUTH_ROLE_WORKSPACE_CLINICAL_ADMIN",
		302: "AUTH_ROLE_WORKSPACE_BILLING_ADMIN",
		303: "AUTH_ROLE_WORKSPACE_ADMIN",
		304: "AUTH_ROLE_WORKSPACE_MANAGER",
		305: "AUTH_ROLE_WORKSPACE_USER",
		306: "AUTH_ROLE_WORKSPACE_VIEWER",
		15:  "AUTH_ROLE_CONNECTED_TEST_PATIENT",
		16:  "AUTH_ROLE_CONNECTED_TEST_PROVIDER",
		17:  "AUTH_ROLE_CONNECTED_TEST_PROXY",
		18:  "AUTH_ROLE_CONNECTED_TEST_VIEWER",
	}
	AuthRole_value = map[string]int32{
		"AUTH_ROLE_UNSPECIFIED":                 0,
		"AUTH_ROLE_PLATFORM_SUPER_ADMIN":        100,
		"AUTH_ROLE_PLATFORM_CLINICAL_ADMIN":     101,
		"AUTH_ROLE_PLATFORM_BILLING_ADMIN":      102,
		"AUTH_ROLE_PLATFORM_ADMIN":              103,
		"AUTH_ROLE_PLATFORM_MANAGER":            104,
		"AUTH_ROLE_PLATFORM_USER":               105,
		"AUTH_ROLE_PLATFORM_VIEWER":             106,
		"AUTH_ROLE_ORGANIZATION_SUPER_ADMIN":    200,
		"AUTH_ROLE_ORGANIZATION_CLINICAL_ADMIN": 201,
		"AUTH_ROLE_ORGANIZATION_BILLING_ADMIN":  202,
		"AUTH_ROLE_ORGANIZATION_ADMIN":          203,
		"AUTH_ROLE_ORGANIZATION_MANAGER":        204,
		"AUTH_ROLE_ORGANIZATION_USER":           205,
		"AUTH_ROLE_ORGANIZATION_VIEWER":         206,
		"AUTH_ROLE_WORKSPACE_SUPER_ADMIN":       300,
		"AUTH_ROLE_WORKSPACE_CLINICAL_ADMIN":    301,
		"AUTH_ROLE_WORKSPACE_BILLING_ADMIN":     302,
		"AUTH_ROLE_WORKSPACE_ADMIN":             303,
		"AUTH_ROLE_WORKSPACE_MANAGER":           304,
		"AUTH_ROLE_WORKSPACE_USER":              305,
		"AUTH_ROLE_WORKSPACE_VIEWER":            306,
		"AUTH_ROLE_CONNECTED_TEST_PATIENT":      15,
		"AUTH_ROLE_CONNECTED_TEST_PROVIDER":     16,
		"AUTH_ROLE_CONNECTED_TEST_PROXY":        17,
		"AUTH_ROLE_CONNECTED_TEST_VIEWER":       18,
	}
)

func (x AuthRole) Enum() *AuthRole {
	p := new(AuthRole)
	*p = x
	return p
}

func (x AuthRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthRole) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[11].Descriptor()
}

func (AuthRole) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[11]
}

func (x AuthRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthRole.Descriptor instead.
func (AuthRole) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{11}
}

type GraphType int32

const (
	GraphType_GRAPH_TYPE_UNSPECIFIED GraphType = 0
	GraphType_GRAPH_TYPE_INPUT       GraphType = 1
	GraphType_GRAPH_TYPE_OUTPUT      GraphType = 2
)

// Enum value maps for GraphType.
var (
	GraphType_name = map[int32]string{
		0: "GRAPH_TYPE_UNSPECIFIED",
		1: "GRAPH_TYPE_INPUT",
		2: "GRAPH_TYPE_OUTPUT",
	}
	GraphType_value = map[string]int32{
		"GRAPH_TYPE_UNSPECIFIED": 0,
		"GRAPH_TYPE_INPUT":       1,
		"GRAPH_TYPE_OUTPUT":      2,
	}
)

func (x GraphType) Enum() *GraphType {
	p := new(GraphType)
	*p = x
	return p
}

func (x GraphType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[12].Descriptor()
}

func (GraphType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[12]
}

func (x GraphType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphType.Descriptor instead.
func (GraphType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{12}
}

// An indicator of the behavior of a given field (for example, that a field
// is required in requests, or given as output but ignored as input).
// This **does not** change the behavior in protocol buffers itself; it only
// denotes the behavior and may affect how API tooling handles the field.
type FieldBehavior int32

const (
	// Conventional default for enums. Do not use this.
	FieldBehavior_FIELD_BEHAVIOR_UNSPECIFIED FieldBehavior = 0
	// Specifically denotes a field as optional.
	// While all fields in protocol buffers are optional, this may be specified
	// for emphasis if appropriate.
	FieldBehavior_FIELD_BEHAVIOR_OPTIONAL FieldBehavior = 1
	// Denotes a field as required.
	// This indicates that the field **must** be provided as part of the request,
	// and failure to do so will cause an error (usually `INVALID_ARGUMENT`).
	FieldBehavior_FIELD_BEHAVIOR_REQUIRED FieldBehavior = 2
	// Denotes a field as output only.
	// This indicates that the field is provided in responses, but including the
	// field in a request does nothing (the server *must* ignore it and
	// *must not* throw an error as a result of the field's presence).
	FieldBehavior_FIELD_BEHAVIOR_OUTPUT_ONLY FieldBehavior = 3
	// Denotes a field as input only.
	// This indicates that the field is provided in requests, and the
	// corresponding field is not included in output.
	FieldBehavior_FIELD_BEHAVIOR_INPUT_ONLY FieldBehavior = 4
	// Denotes a field as immutable.
	// This indicates that the field may be set once in a request to create a
	// resource, but may not be changed thereafter.
	FieldBehavior_FIELD_BEHAVIOR_IMMUTABLE FieldBehavior = 5
	// Denotes that a (repeated) field is an unordered list.
	// This indicates that the service may provide the elements of the list
	// in any arbitrary  order, rather than the order the user originally
	// provided. Additionally, the list's order may or may not be stable.
	FieldBehavior_FIELD_BEHAVIOR_UNORDERED_LIST FieldBehavior = 6
	// Denotes that this field returns a non-empty default value if not set.
	// This indicates that if the user provides the empty value in a request,
	// a non-empty value will be returned. The user will not be aware of what
	// non-empty value to expect.
	FieldBehavior_FIELD_BEHAVIOR_NON_EMPTY_DEFAULT FieldBehavior = 7
)

// Enum value maps for FieldBehavior.
var (
	FieldBehavior_name = map[int32]string{
		0: "FIELD_BEHAVIOR_UNSPECIFIED",
		1: "FIELD_BEHAVIOR_OPTIONAL",
		2: "FIELD_BEHAVIOR_REQUIRED",
		3: "FIELD_BEHAVIOR_OUTPUT_ONLY",
		4: "FIELD_BEHAVIOR_INPUT_ONLY",
		5: "FIELD_BEHAVIOR_IMMUTABLE",
		6: "FIELD_BEHAVIOR_UNORDERED_LIST",
		7: "FIELD_BEHAVIOR_NON_EMPTY_DEFAULT",
	}
	FieldBehavior_value = map[string]int32{
		"FIELD_BEHAVIOR_UNSPECIFIED":       0,
		"FIELD_BEHAVIOR_OPTIONAL":          1,
		"FIELD_BEHAVIOR_REQUIRED":          2,
		"FIELD_BEHAVIOR_OUTPUT_ONLY":       3,
		"FIELD_BEHAVIOR_INPUT_ONLY":        4,
		"FIELD_BEHAVIOR_IMMUTABLE":         5,
		"FIELD_BEHAVIOR_UNORDERED_LIST":    6,
		"FIELD_BEHAVIOR_NON_EMPTY_DEFAULT": 7,
	}
)

func (x FieldBehavior) Enum() *FieldBehavior {
	p := new(FieldBehavior)
	*p = x
	return p
}

func (x FieldBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[13].Descriptor()
}

func (FieldBehavior) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[13]
}

func (x FieldBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldBehavior.Descriptor instead.
func (FieldBehavior) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{13}
}

type SyntheticType int32

const (
	SyntheticType_SYNTHETIC_TYPE_UNSPECIFIED SyntheticType = 0
	// faker.fakeValuesService().resolve("company.name", this, faker);
	SyntheticType_SYNTHETIC_TYPE_DIRECT_FROM_DICTIONARY SyntheticType = 1
	// List<List<String>> buzzwordLists = (List<List<String>>) faker.fakeValuesService().fetchObject("company.buzzwords");
	// List<String> buzzwords = new ArrayList<String>();
	//
	//	for (List<String> buzzwordList : buzzwordLists) {
	//	   buzzwords.addAll(buzzwordList);
	//	}
	//
	// return buzzwords.get(faker.random().nextInt(buzzwords.size()));
	SyntheticType_SYNTHETIC_TYPE_SELECT_RANDOM_FROM_LIST SyntheticType = 2
	// List<List<String>> catchPhraseLists = (List<List<String>>) faker.fakeValuesService().fetchObject("company.buzzwords");
	// return joinSampleOfEachList(catchPhraseLists, " ");
	SyntheticType_SYNTHETIC_TYPE_LIST_FROM_LIST SyntheticType = 3
	// int number = faker.random().nextInt(13) + 1;
	// return "https://pigment.github.io/fake-logos/logos/medium/color/" + number + ".png";
	SyntheticType_SYNTHETIC_TYPE_GENERATED_LOGO SyntheticType = 6
)

// Enum value maps for SyntheticType.
var (
	SyntheticType_name = map[int32]string{
		0: "SYNTHETIC_TYPE_UNSPECIFIED",
		1: "SYNTHETIC_TYPE_DIRECT_FROM_DICTIONARY",
		2: "SYNTHETIC_TYPE_SELECT_RANDOM_FROM_LIST",
		3: "SYNTHETIC_TYPE_LIST_FROM_LIST",
		6: "SYNTHETIC_TYPE_GENERATED_LOGO",
	}
	SyntheticType_value = map[string]int32{
		"SYNTHETIC_TYPE_UNSPECIFIED":             0,
		"SYNTHETIC_TYPE_DIRECT_FROM_DICTIONARY":  1,
		"SYNTHETIC_TYPE_SELECT_RANDOM_FROM_LIST": 2,
		"SYNTHETIC_TYPE_LIST_FROM_LIST":          3,
		"SYNTHETIC_TYPE_GENERATED_LOGO":          6,
	}
)

func (x SyntheticType) Enum() *SyntheticType {
	p := new(SyntheticType)
	*p = x
	return p
}

func (x SyntheticType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyntheticType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[14].Descriptor()
}

func (SyntheticType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[14]
}

func (x SyntheticType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyntheticType.Descriptor instead.
func (SyntheticType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{14}
}

// Supported workspace type
type ClassificationType int32

const (
	ClassificationType_CLASSIFICATION_TYPE_UNSPECIFIED       ClassificationType = 0
	ClassificationType_CLASSIFICATION_TYPE_DERIVATIVE_DATA   ClassificationType = 1
	ClassificationType_CLASSIFICATION_TYPE_DE_IDENTIFIED     ClassificationType = 2
	ClassificationType_CLASSIFICATION_TYPE_PUBLIC            ClassificationType = 3
	ClassificationType_CLASSIFICATION_TYPE_INTERNAL_USE      ClassificationType = 4
	ClassificationType_CLASSIFICATION_TYPE_CONFIDENTIAL      ClassificationType = 5
	ClassificationType_CLASSIFICATION_TYPE_RESTRICTED        ClassificationType = 6
	ClassificationType_CLASSIFICATION_TYPE_HIGHLY_RESTRICTED ClassificationType = 7
)

// Enum value maps for ClassificationType.
var (
	ClassificationType_name = map[int32]string{
		0: "CLASSIFICATION_TYPE_UNSPECIFIED",
		1: "CLASSIFICATION_TYPE_DERIVATIVE_DATA",
		2: "CLASSIFICATION_TYPE_DE_IDENTIFIED",
		3: "CLASSIFICATION_TYPE_PUBLIC",
		4: "CLASSIFICATION_TYPE_INTERNAL_USE",
		5: "CLASSIFICATION_TYPE_CONFIDENTIAL",
		6: "CLASSIFICATION_TYPE_RESTRICTED",
		7: "CLASSIFICATION_TYPE_HIGHLY_RESTRICTED",
	}
	ClassificationType_value = map[string]int32{
		"CLASSIFICATION_TYPE_UNSPECIFIED":       0,
		"CLASSIFICATION_TYPE_DERIVATIVE_DATA":   1,
		"CLASSIFICATION_TYPE_DE_IDENTIFIED":     2,
		"CLASSIFICATION_TYPE_PUBLIC":            3,
		"CLASSIFICATION_TYPE_INTERNAL_USE":      4,
		"CLASSIFICATION_TYPE_CONFIDENTIAL":      5,
		"CLASSIFICATION_TYPE_RESTRICTED":        6,
		"CLASSIFICATION_TYPE_HIGHLY_RESTRICTED": 7,
	}
)

func (x ClassificationType) Enum() *ClassificationType {
	p := new(ClassificationType)
	*p = x
	return p
}

func (x ClassificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[15].Descriptor()
}

func (ClassificationType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[15]
}

func (x ClassificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassificationType.Descriptor instead.
func (ClassificationType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{15}
}

type SpecEnumType int32

const (
	SpecEnumType_SPEC_ENUM_TYPE_UNSPECIFIED       SpecEnumType = 0
	SpecEnumType_SPEC_ENUM_TYPE_NONE              SpecEnumType = 1
	SpecEnumType_SPEC_ENUM_TYPE_TOPICS            SpecEnumType = 2
	SpecEnumType_SPEC_ENUM_TYPE_COMMANDS          SpecEnumType = 3
	SpecEnumType_SPEC_ENUM_TYPE_EVENTS            SpecEnumType = 4
	SpecEnumType_SPEC_ENUM_TYPE_ROUTINE_LISTENERS SpecEnumType = 5
)

// Enum value maps for SpecEnumType.
var (
	SpecEnumType_name = map[int32]string{
		0: "SPEC_ENUM_TYPE_UNSPECIFIED",
		1: "SPEC_ENUM_TYPE_NONE",
		2: "SPEC_ENUM_TYPE_TOPICS",
		3: "SPEC_ENUM_TYPE_COMMANDS",
		4: "SPEC_ENUM_TYPE_EVENTS",
		5: "SPEC_ENUM_TYPE_ROUTINE_LISTENERS",
	}
	SpecEnumType_value = map[string]int32{
		"SPEC_ENUM_TYPE_UNSPECIFIED":       0,
		"SPEC_ENUM_TYPE_NONE":              1,
		"SPEC_ENUM_TYPE_TOPICS":            2,
		"SPEC_ENUM_TYPE_COMMANDS":          3,
		"SPEC_ENUM_TYPE_EVENTS":            4,
		"SPEC_ENUM_TYPE_ROUTINE_LISTENERS": 5,
	}
)

func (x SpecEnumType) Enum() *SpecEnumType {
	p := new(SpecEnumType)
	*p = x
	return p
}

func (x SpecEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[16].Descriptor()
}

func (SpecEnumType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[16]
}

func (x SpecEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecEnumType.Descriptor instead.
func (SpecEnumType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{16}
}

type EventScope int32

const (
	EventScope_EVENT_SCOPE_UNSPECIFIED  EventScope = 0
	EventScope_EVENT_SCOPE_USER         EventScope = 1
	EventScope_EVENT_SCOPE_WORKSPACE    EventScope = 2
	EventScope_EVENT_SCOPE_ORGANIZATION EventScope = 3
)

// Enum value maps for EventScope.
var (
	EventScope_name = map[int32]string{
		0: "EVENT_SCOPE_UNSPECIFIED",
		1: "EVENT_SCOPE_USER",
		2: "EVENT_SCOPE_WORKSPACE",
		3: "EVENT_SCOPE_ORGANIZATION",
	}
	EventScope_value = map[string]int32{
		"EVENT_SCOPE_UNSPECIFIED":  0,
		"EVENT_SCOPE_USER":         1,
		"EVENT_SCOPE_WORKSPACE":    2,
		"EVENT_SCOPE_ORGANIZATION": 3,
	}
)

func (x EventScope) Enum() *EventScope {
	p := new(EventScope)
	*p = x
	return p
}

func (x EventScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventScope) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[17].Descriptor()
}

func (EventScope) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[17]
}

func (x EventScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventScope.Descriptor instead.
func (EventScope) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{17}
}

// Value types that can be used as label values.
type SpecConfiguration_SpecConfigurationType int32

const (
	SpecConfiguration_SPEC_CONFIGURATION_TYPE_UNSPECIFIED SpecConfiguration_SpecConfigurationType = 0
	// A variable-length string. This is the default.
	SpecConfiguration_SPEC_CONFIGURATION_TYPE_STRING SpecConfiguration_SpecConfigurationType = 1
	// Boolean; true or false.
	SpecConfiguration_SPEC_CONFIGURATION_TYPE_BOOL SpecConfiguration_SpecConfigurationType = 2
	SpecConfiguration_SPEC_CONFIGURATION_TYPE_INT  SpecConfiguration_SpecConfigurationType = 3
	SpecConfiguration_SPEC_CONFIGURATION_TYPE_LIST SpecConfiguration_SpecConfigurationType = 4
	SpecConfiguration_SPEC_CONFIGURATION_TYPE_MAP  SpecConfiguration_SpecConfigurationType = 5
)

// Enum value maps for SpecConfiguration_SpecConfigurationType.
var (
	SpecConfiguration_SpecConfigurationType_name = map[int32]string{
		0: "SPEC_CONFIGURATION_TYPE_UNSPECIFIED",
		1: "SPEC_CONFIGURATION_TYPE_STRING",
		2: "SPEC_CONFIGURATION_TYPE_BOOL",
		3: "SPEC_CONFIGURATION_TYPE_INT",
		4: "SPEC_CONFIGURATION_TYPE_LIST",
		5: "SPEC_CONFIGURATION_TYPE_MAP",
	}
	SpecConfiguration_SpecConfigurationType_value = map[string]int32{
		"SPEC_CONFIGURATION_TYPE_UNSPECIFIED": 0,
		"SPEC_CONFIGURATION_TYPE_STRING":      1,
		"SPEC_CONFIGURATION_TYPE_BOOL":        2,
		"SPEC_CONFIGURATION_TYPE_INT":         3,
		"SPEC_CONFIGURATION_TYPE_LIST":        4,
		"SPEC_CONFIGURATION_TYPE_MAP":         5,
	}
)

func (x SpecConfiguration_SpecConfigurationType) Enum() *SpecConfiguration_SpecConfigurationType {
	p := new(SpecConfiguration_SpecConfigurationType)
	*p = x
	return p
}

func (x SpecConfiguration_SpecConfigurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecConfiguration_SpecConfigurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_options_v2_annotations_proto_enumTypes[18].Descriptor()
}

func (SpecConfiguration_SpecConfigurationType) Type() protoreflect.EnumType {
	return &file_platform_options_v2_annotations_proto_enumTypes[18]
}

func (x SpecConfiguration_SpecConfigurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecConfiguration_SpecConfigurationType.Descriptor instead.
func (SpecConfiguration_SpecConfigurationType) EnumDescriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{16, 0}
}

// ===========================================
// google.protobuf.FileOptions
// ===========================================
type NetworkOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          NetworkType            `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.NetworkType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkOptions) Reset() {
	*x = NetworkOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkOptions) ProtoMessage() {}

func (x *NetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkOptions.ProtoReflect.Descriptor instead.
func (*NetworkOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkOptions) GetType() NetworkType {
	if x != nil {
		return x.Type
	}
	return NetworkType_NETWORK_TYPE_UNSPECIFIED
}

type ApiOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          ApiType                `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.ApiType" json:"type,omitempty"`
	Cycle         ApiLifecycle           `protobuf:"varint,2,opt,name=cycle,proto3,enum=platform.options.v2.ApiLifecycle" json:"cycle,omitempty"`
	Interface     ApiInterfaceType       `protobuf:"varint,3,opt,name=interface,proto3,enum=platform.options.v2.ApiInterfaceType" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiOptions) Reset() {
	*x = ApiOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiOptions) ProtoMessage() {}

func (x *ApiOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiOptions.ProtoReflect.Descriptor instead.
func (*ApiOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{1}
}

func (x *ApiOptions) GetType() ApiType {
	if x != nil {
		return x.Type
	}
	return ApiType_API_TYPE_UNSPECIFIED
}

func (x *ApiOptions) GetCycle() ApiLifecycle {
	if x != nil {
		return x.Cycle
	}
	return ApiLifecycle_API_LIFECYCLE_UNSPECIFIED
}

func (x *ApiOptions) GetInterface() ApiInterfaceType {
	if x != nil {
		return x.Interface
	}
	return ApiInterfaceType_API_INTERFACE_TYPE_UNSPECIFIED
}

type EntityOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        string                 `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	EntityPlural  string                 `protobuf:"bytes,2,opt,name=entity_plural,json=entityPlural,proto3" json:"entity_plural,omitempty"`
	Type          EntityType             `protobuf:"varint,3,opt,name=type,proto3,enum=platform.options.v2.EntityType" json:"type,omitempty"`
	Namespace     string                 `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Consistency   EntityConsistency      `protobuf:"varint,5,opt,name=consistency,proto3,enum=platform.options.v2.EntityConsistency" json:"consistency,omitempty"`
	Hierarchy     EntityHierarchy        `protobuf:"varint,6,opt,name=hierarchy,proto3,enum=platform.options.v2.EntityHierarchy" json:"hierarchy,omitempty"`
	Versionable   bool                   `protobuf:"varint,7,opt,name=versionable,proto3" json:"versionable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityOptions) Reset() {
	*x = EntityOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityOptions) ProtoMessage() {}

func (x *EntityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityOptions.ProtoReflect.Descriptor instead.
func (*EntityOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{2}
}

func (x *EntityOptions) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *EntityOptions) GetEntityPlural() string {
	if x != nil {
		return x.EntityPlural
	}
	return ""
}

func (x *EntityOptions) GetType() EntityType {
	if x != nil {
		return x.Type
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *EntityOptions) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EntityOptions) GetConsistency() EntityConsistency {
	if x != nil {
		return x.Consistency
	}
	return EntityConsistency_ENTITY_CONSISTENCY_UNSPECIFIED
}

func (x *EntityOptions) GetHierarchy() EntityHierarchy {
	if x != nil {
		return x.Hierarchy
	}
	return EntityHierarchy_ENTITY_HIERARCHY_UNSPECIFIED
}

func (x *EntityOptions) GetVersionable() bool {
	if x != nil {
		return x.Versionable
	}
	return false
}

type LanguageOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Languages     []LanguageType         `protobuf:"varint,1,rep,packed,name=languages,proto3,enum=platform.options.v2.LanguageType" json:"languages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LanguageOptions) Reset() {
	*x = LanguageOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanguageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageOptions) ProtoMessage() {}

func (x *LanguageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageOptions.ProtoReflect.Descriptor instead.
func (*LanguageOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{3}
}

func (x *LanguageOptions) GetLanguages() []LanguageType {
	if x != nil {
		return x.Languages
	}
	return nil
}

type GraphqlOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlOptions) Reset() {
	*x = GraphqlOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlOptions) ProtoMessage() {}

func (x *GraphqlOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlOptions.ProtoReflect.Descriptor instead.
func (*GraphqlOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{4}
}

func (x *GraphqlOptions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SpecServiceOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GrpcPort      int32                  `protobuf:"varint,1,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	HttpPort      int32                  `protobuf:"varint,2,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecServiceOptions) Reset() {
	*x = SpecServiceOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecServiceOptions) ProtoMessage() {}

func (x *SpecServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecServiceOptions.ProtoReflect.Descriptor instead.
func (*SpecServiceOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{5}
}

func (x *SpecServiceOptions) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *SpecServiceOptions) GetHttpPort() int32 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

type RateLimitFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Metric        string                 `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitFilter) Reset() {
	*x = RateLimitFilter{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitFilter) ProtoMessage() {}

func (x *RateLimitFilter) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitFilter.ProtoReflect.Descriptor instead.
func (*RateLimitFilter) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{6}
}

func (x *RateLimitFilter) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RateLimitFilter) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

type AuthorizationFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationFilter) Reset() {
	*x = AuthorizationFilter{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationFilter) ProtoMessage() {}

func (x *AuthorizationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationFilter.ProtoReflect.Descriptor instead.
func (*AuthorizationFilter) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{7}
}

func (x *AuthorizationFilter) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConsentFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentFilter) Reset() {
	*x = ConsentFilter{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentFilter) ProtoMessage() {}

func (x *ConsentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentFilter.ProtoReflect.Descriptor instead.
func (*ConsentFilter) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{8}
}

func (x *ConsentFilter) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ProxyOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Authorization *AuthorizationFilter   `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Consent       *ConsentFilter         `protobuf:"bytes,2,opt,name=consent,proto3" json:"consent,omitempty"`
	RateLimit     *RateLimitFilter       `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxyOptions) Reset() {
	*x = ProxyOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOptions) ProtoMessage() {}

func (x *ProxyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOptions.ProtoReflect.Descriptor instead.
func (*ProxyOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{9}
}

func (x *ProxyOptions) GetAuthorization() *AuthorizationFilter {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ProxyOptions) GetConsent() *ConsentFilter {
	if x != nil {
		return x.Consent
	}
	return nil
}

func (x *ProxyOptions) GetRateLimit() *RateLimitFilter {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

type ConnectorOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          ConnectorType          `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.ConnectorType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectorOptions) Reset() {
	*x = ConnectorOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorOptions) ProtoMessage() {}

func (x *ConnectorOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorOptions.ProtoReflect.Descriptor instead.
func (*ConnectorOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectorOptions) GetType() ConnectorType {
	if x != nil {
		return x.Type
	}
	return ConnectorType_CONNECTOR_TYPE_UNSPECIFIED
}

type CQRSOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          CQRSType               `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.CQRSType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CQRSOptions) Reset() {
	*x = CQRSOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQRSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQRSOptions) ProtoMessage() {}

func (x *CQRSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQRSOptions.ProtoReflect.Descriptor instead.
func (*CQRSOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{11}
}

func (x *CQRSOptions) GetType() CQRSType {
	if x != nil {
		return x.Type
	}
	return CQRSType_CQRS_TYPE_UNSPECIFIED
}

type RateLimitOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         bool                   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitOptions) Reset() {
	*x = RateLimitOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitOptions) ProtoMessage() {}

func (x *RateLimitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitOptions.ProtoReflect.Descriptor instead.
func (*RateLimitOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{12}
}

func (x *RateLimitOptions) GetLimit() bool {
	if x != nil {
		return x.Limit
	}
	return false
}

type PermissionOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permission    string                 `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	Roles         []AuthRole             `protobuf:"varint,2,rep,packed,name=roles,proto3,enum=platform.options.v2.AuthRole" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionOptions) Reset() {
	*x = PermissionOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionOptions) ProtoMessage() {}

func (x *PermissionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionOptions.ProtoReflect.Descriptor instead.
func (*PermissionOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{13}
}

func (x *PermissionOptions) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *PermissionOptions) GetRoles() []AuthRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

type GraphOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          GraphType              `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.GraphType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphOptions) Reset() {
	*x = GraphOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphOptions) ProtoMessage() {}

func (x *GraphOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphOptions.ProtoReflect.Descriptor instead.
func (*GraphOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{14}
}

func (x *GraphOptions) GetType() GraphType {
	if x != nil {
		return x.Type
	}
	return GraphType_GRAPH_TYPE_UNSPECIFIED
}

type EntityFieldOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           bool                   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Behavior      []FieldBehavior        `protobuf:"varint,2,rep,packed,name=behavior,proto3,enum=platform.options.v2.FieldBehavior" json:"behavior,omitempty"`
	VersionKey    bool                   `protobuf:"varint,3,opt,name=version_key,json=versionKey,proto3" json:"version_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityFieldOptions) Reset() {
	*x = EntityFieldOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityFieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityFieldOptions) ProtoMessage() {}

func (x *EntityFieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityFieldOptions.ProtoReflect.Descriptor instead.
func (*EntityFieldOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{15}
}

func (x *EntityFieldOptions) GetKey() bool {
	if x != nil {
		return x.Key
	}
	return false
}

func (x *EntityFieldOptions) GetBehavior() []FieldBehavior {
	if x != nil {
		return x.Behavior
	}
	return nil
}

func (x *EntityFieldOptions) GetVersionKey() bool {
	if x != nil {
		return x.VersionKey
	}
	return false
}

type SpecConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The label key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The type of data that can be assigned to the label.
	Type SpecConfiguration_SpecConfigurationType `protobuf:"varint,2,opt,name=type,proto3,enum=platform.options.v2.SpecConfiguration_SpecConfigurationType" json:"type,omitempty"`
	// A human-readable description for the label.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Is this configuration overridable?
	Overrideable bool `protobuf:"varint,4,opt,name=overrideable,proto3" json:"overrideable,omitempty"`
	// Allow for safe deprecation of configurations
	Enabled       bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecConfiguration) Reset() {
	*x = SpecConfiguration{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecConfiguration) ProtoMessage() {}

func (x *SpecConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecConfiguration.ProtoReflect.Descriptor instead.
func (*SpecConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{16}
}

func (x *SpecConfiguration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SpecConfiguration) GetType() SpecConfiguration_SpecConfigurationType {
	if x != nil {
		return x.Type
	}
	return SpecConfiguration_SPEC_CONFIGURATION_TYPE_UNSPECIFIED
}

func (x *SpecConfiguration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpecConfiguration) GetOverrideable() bool {
	if x != nil {
		return x.Overrideable
	}
	return false
}

func (x *SpecConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	FieldNumber   int32                  `protobuf:"varint,2,opt,name=field_number,json=fieldNumber,proto3" json:"field_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationOptions) Reset() {
	*x = ConfigurationOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationOptions) ProtoMessage() {}

func (x *ConfigurationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationOptions.ProtoReflect.Descriptor instead.
func (*ConfigurationOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigurationOptions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationOptions) GetFieldNumber() int32 {
	if x != nil {
		return x.FieldNumber
	}
	return 0
}

type ConfigurationFieldOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Configuration *SpecConfiguration     `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationFieldOptions) Reset() {
	*x = ConfigurationFieldOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationFieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationFieldOptions) ProtoMessage() {}

func (x *ConfigurationFieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationFieldOptions.ProtoReflect.Descriptor instead.
func (*ConfigurationFieldOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{18}
}

func (x *ConfigurationFieldOptions) GetConfiguration() *SpecConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type SyntheticOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DictionaryKey string                 `protobuf:"bytes,1,opt,name=dictionary_key,json=dictionaryKey,proto3" json:"dictionary_key,omitempty"`
	Type          SyntheticType          `protobuf:"varint,2,opt,name=type,proto3,enum=platform.options.v2.SyntheticType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyntheticOptions) Reset() {
	*x = SyntheticOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntheticOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticOptions) ProtoMessage() {}

func (x *SyntheticOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticOptions.ProtoReflect.Descriptor instead.
func (*SyntheticOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{19}
}

func (x *SyntheticOptions) GetDictionaryKey() string {
	if x != nil {
		return x.DictionaryKey
	}
	return ""
}

func (x *SyntheticOptions) GetType() SyntheticType {
	if x != nil {
		return x.Type
	}
	return SyntheticType_SYNTHETIC_TYPE_UNSPECIFIED
}

// Data Classification
type Classification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Classification Type
	Type          ClassificationType `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.ClassificationType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Classification) Reset() {
	*x = Classification{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classification) ProtoMessage() {}

func (x *Classification) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classification.ProtoReflect.Descriptor instead.
func (*Classification) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{20}
}

func (x *Classification) GetType() ClassificationType {
	if x != nil {
		return x.Type
	}
	return ClassificationType_CLASSIFICATION_TYPE_UNSPECIFIED
}

type SpecOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          SpecEnumType           `protobuf:"varint,1,opt,name=type,proto3,enum=platform.options.v2.SpecEnumType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecOptions) Reset() {
	*x = SpecOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecOptions) ProtoMessage() {}

func (x *SpecOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecOptions.ProtoReflect.Descriptor instead.
func (*SpecOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{21}
}

func (x *SpecOptions) GetType() SpecEnumType {
	if x != nil {
		return x.Type
	}
	return SpecEnumType_SPEC_ENUM_TYPE_UNSPECIFIED
}

type BillingOptions struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Billable        bool                   `protobuf:"varint,1,opt,name=billable,proto3" json:"billable,omitempty"`
	PartnerBillable bool                   `protobuf:"varint,2,opt,name=partner_billable,json=partnerBillable,proto3" json:"partner_billable,omitempty"`
	Metered         bool                   `protobuf:"varint,3,opt,name=metered,proto3" json:"metered,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BillingOptions) Reset() {
	*x = BillingOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingOptions) ProtoMessage() {}

func (x *BillingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingOptions.ProtoReflect.Descriptor instead.
func (*BillingOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{22}
}

func (x *BillingOptions) GetBillable() bool {
	if x != nil {
		return x.Billable
	}
	return false
}

func (x *BillingOptions) GetPartnerBillable() bool {
	if x != nil {
		return x.PartnerBillable
	}
	return false
}

func (x *BillingOptions) GetMetered() bool {
	if x != nil {
		return x.Metered
	}
	return false
}

type EventScopeOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scopes        []EventScope           `protobuf:"varint,1,rep,packed,name=scopes,proto3,enum=platform.options.v2.EventScope" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventScopeOptions) Reset() {
	*x = EventScopeOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventScopeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScopeOptions) ProtoMessage() {}

func (x *EventScopeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScopeOptions.ProtoReflect.Descriptor instead.
func (*EventScopeOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{23}
}

func (x *EventScopeOptions) GetScopes() []EventScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type EventOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Versionable   bool                   `protobuf:"varint,1,opt,name=versionable,proto3" json:"versionable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventOptions) Reset() {
	*x = EventOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOptions) ProtoMessage() {}

func (x *EventOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOptions.ProtoReflect.Descriptor instead.
func (*EventOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{24}
}

func (x *EventOptions) GetVersionable() bool {
	if x != nil {
		return x.Versionable
	}
	return false
}

type AuthRoleOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleType      AuthRoleType           `protobuf:"varint,1,opt,name=role_type,json=roleType,proto3,enum=platform.options.v2.AuthRoleType" json:"role_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthRoleOptions) Reset() {
	*x = AuthRoleOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthRoleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleOptions) ProtoMessage() {}

func (x *AuthRoleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleOptions.ProtoReflect.Descriptor instead.
func (*AuthRoleOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{25}
}

func (x *AuthRoleOptions) GetRoleType() AuthRoleType {
	if x != nil {
		return x.RoleType
	}
	return AuthRoleType_AUTH_ROLE_TYPE_UNSPECIFIED
}

type RoutineOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Listener      string                 `protobuf:"bytes,1,opt,name=listener,proto3" json:"listener,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutineOptions) Reset() {
	*x = RoutineOptions{}
	mi := &file_platform_options_v2_annotations_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutineOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutineOptions) ProtoMessage() {}

func (x *RoutineOptions) ProtoReflect() protoreflect.Message {
	mi := &file_platform_options_v2_annotations_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutineOptions.ProtoReflect.Descriptor instead.
func (*RoutineOptions) Descriptor() ([]byte, []int) {
	return file_platform_options_v2_annotations_proto_rawDescGZIP(), []int{26}
}

func (x *RoutineOptions) GetListener() string {
	if x != nil {
		return x.Listener
	}
	return ""
}

var file_platform_options_v2_annotations_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*NetworkOptions)(nil),
		Field:         40000,
		Name:          "platform.options.v2.network_file",
		Tag:           "bytes,40000,opt,name=network_file",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*ApiOptions)(nil),
		Field:         50000,
		Name:          "platform.options.v2.api_file",
		Tag:           "bytes,50000,opt,name=api_file",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*EntityOptions)(nil),
		Field:         50001,
		Name:          "platform.options.v2.entity",
		Tag:           "bytes,50001,opt,name=entity",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*LanguageOptions)(nil),
		Field:         50002,
		Name:          "platform.options.v2.language",
		Tag:           "bytes,50002,opt,name=language",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*GraphqlOptions)(nil),
		Field:         50003,
		Name:          "platform.options.v2.graphql",
		Tag:           "bytes,50003,opt,name=graphql",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*ConfigurationOptions)(nil),
		Field:         50004,
		Name:          "platform.options.v2.configuration",
		Tag:           "bytes,50004,opt,name=configuration",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50005,
		Name:          "platform.options.v2.has_multiple_implementations",
		Tag:           "varint,50005,opt,name=has_multiple_implementations",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ApiOptions)(nil),
		Field:         50010,
		Name:          "platform.options.v2.api_service",
		Tag:           "bytes,50010,opt,name=api_service",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*SpecServiceOptions)(nil),
		Field:         50011,
		Name:          "platform.options.v2.service",
		Tag:           "bytes,50011,opt,name=service",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ProxyOptions)(nil),
		Field:         50012,
		Name:          "platform.options.v2.proxy",
		Tag:           "bytes,50012,opt,name=proxy",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ConnectorOptions)(nil),
		Field:         50013,
		Name:          "platform.options.v2.connector",
		Tag:           "bytes,50013,opt,name=connector",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*ApiOptions)(nil),
		Field:         50020,
		Name:          "platform.options.v2.api_method",
		Tag:           "bytes,50020,opt,name=api_method",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*CQRSOptions)(nil),
		Field:         50021,
		Name:          "platform.options.v2.cqrs",
		Tag:           "bytes,50021,opt,name=cqrs",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*PermissionOptions)(nil),
		Field:         50022,
		Name:          "platform.options.v2.permission",
		Tag:           "bytes,50022,opt,name=permission",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*RateLimitOptions)(nil),
		Field:         50023,
		Name:          "platform.options.v2.rate",
		Tag:           "bytes,50023,opt,name=rate",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*ApiOptions)(nil),
		Field:         50030,
		Name:          "platform.options.v2.api_message",
		Tag:           "bytes,50030,opt,name=api_message",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*GraphOptions)(nil),
		Field:         50031,
		Name:          "platform.options.v2.graph",
		Tag:           "bytes,50031,opt,name=graph",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*RoutineOptions)(nil),
		Field:         50032,
		Name:          "platform.options.v2.routine",
		Tag:           "bytes,50032,opt,name=routine",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ApiOptions)(nil),
		Field:         50040,
		Name:          "platform.options.v2.api_field",
		Tag:           "bytes,50040,opt,name=api_field",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*EntityFieldOptions)(nil),
		Field:         50041,
		Name:          "platform.options.v2.entity_field",
		Tag:           "bytes,50041,opt,name=entity_field",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ConfigurationFieldOptions)(nil),
		Field:         50042,
		Name:          "platform.options.v2.configuration_field",
		Tag:           "bytes,50042,opt,name=configuration_field",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*SyntheticOptions)(nil),
		Field:         50043,
		Name:          "platform.options.v2.synthetic",
		Tag:           "bytes,50043,opt,name=synthetic",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*SpecOptions)(nil),
		Field:         50050,
		Name:          "platform.options.v2.spec",
		Tag:           "bytes,50050,opt,name=spec",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*BillingOptions)(nil),
		Field:         50060,
		Name:          "platform.options.v2.billing",
		Tag:           "bytes,50060,opt,name=billing",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*EventScopeOptions)(nil),
		Field:         50061,
		Name:          "platform.options.v2.event_scope",
		Tag:           "bytes,50061,opt,name=event_scope",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*AuthRoleOptions)(nil),
		Field:         50062,
		Name:          "platform.options.v2.auth_role",
		Tag:           "bytes,50062,opt,name=auth_role",
		Filename:      "platform/options/v2/annotations.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*EventOptions)(nil),
		Field:         50063,
		Name:          "platform.options.v2.event",
		Tag:           "bytes,50063,opt,name=event",
		Filename:      "platform/options/v2/annotations.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional platform.options.v2.NetworkOptions network_file = 40000;
	E_NetworkFile = &file_platform_options_v2_annotations_proto_extTypes[0]
	// optional platform.options.v2.ApiOptions api_file = 50000;
	E_ApiFile = &file_platform_options_v2_annotations_proto_extTypes[1]
	// optional platform.options.v2.EntityOptions entity = 50001;
	E_Entity = &file_platform_options_v2_annotations_proto_extTypes[2]
	// optional platform.options.v2.LanguageOptions language = 50002;
	E_Language = &file_platform_options_v2_annotations_proto_extTypes[3]
	// optional platform.options.v2.GraphqlOptions graphql = 50003;
	E_Graphql = &file_platform_options_v2_annotations_proto_extTypes[4]
	// optional platform.options.v2.ConfigurationOptions configuration = 50004;
	E_Configuration = &file_platform_options_v2_annotations_proto_extTypes[5]
	// optional bool has_multiple_implementations = 50005;
	E_HasMultipleImplementations = &file_platform_options_v2_annotations_proto_extTypes[6]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional platform.options.v2.ApiOptions api_service = 50010;
	E_ApiService = &file_platform_options_v2_annotations_proto_extTypes[7]
	// optional platform.options.v2.SpecServiceOptions service = 50011;
	E_Service = &file_platform_options_v2_annotations_proto_extTypes[8]
	// optional platform.options.v2.ProxyOptions proxy = 50012;
	E_Proxy = &file_platform_options_v2_annotations_proto_extTypes[9]
	// optional platform.options.v2.ConnectorOptions connector = 50013;
	E_Connector = &file_platform_options_v2_annotations_proto_extTypes[10]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional platform.options.v2.ApiOptions api_method = 50020;
	E_ApiMethod = &file_platform_options_v2_annotations_proto_extTypes[11]
	// optional platform.options.v2.CQRSOptions cqrs = 50021;
	E_Cqrs = &file_platform_options_v2_annotations_proto_extTypes[12]
	// optional platform.options.v2.PermissionOptions permission = 50022;
	E_Permission = &file_platform_options_v2_annotations_proto_extTypes[13]
	// optional platform.options.v2.RateLimitOptions rate = 50023;
	E_Rate = &file_platform_options_v2_annotations_proto_extTypes[14]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional platform.options.v2.ApiOptions api_message = 50030;
	E_ApiMessage = &file_platform_options_v2_annotations_proto_extTypes[15]
	// optional platform.options.v2.GraphOptions graph = 50031;
	E_Graph = &file_platform_options_v2_annotations_proto_extTypes[16]
	// optional platform.options.v2.RoutineOptions routine = 50032;
	E_Routine = &file_platform_options_v2_annotations_proto_extTypes[17]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional platform.options.v2.ApiOptions api_field = 50040;
	E_ApiField = &file_platform_options_v2_annotations_proto_extTypes[18]
	// optional platform.options.v2.EntityFieldOptions entity_field = 50041;
	E_EntityField = &file_platform_options_v2_annotations_proto_extTypes[19]
	// optional platform.options.v2.ConfigurationFieldOptions configuration_field = 50042;
	E_ConfigurationField = &file_platform_options_v2_annotations_proto_extTypes[20]
	// optional platform.options.v2.SyntheticOptions synthetic = 50043;
	E_Synthetic = &file_platform_options_v2_annotations_proto_extTypes[21]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional platform.options.v2.SpecOptions spec = 50050;
	E_Spec = &file_platform_options_v2_annotations_proto_extTypes[22]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional platform.options.v2.BillingOptions billing = 50060;
	E_Billing = &file_platform_options_v2_annotations_proto_extTypes[23]
	// optional platform.options.v2.EventScopeOptions event_scope = 50061;
	E_EventScope = &file_platform_options_v2_annotations_proto_extTypes[24]
	// optional platform.options.v2.AuthRoleOptions auth_role = 50062;
	E_AuthRole = &file_platform_options_v2_annotations_proto_extTypes[25]
	// optional platform.options.v2.EventOptions event = 50063;
	E_Event = &file_platform_options_v2_annotations_proto_extTypes[26]
)

var File_platform_options_v2_annotations_proto protoreflect.FileDescriptor

var file_platform_options_v2_annotations_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46,
	0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6c,
	0x75, 0x72, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x42, 0x0a, 0x09, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x09, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68,
	0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x2f, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x29, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4a, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x43, 0x51, 0x52, 0x53,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x51, 0x52, 0x53,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x42,
	0x0a, 0x0c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xc4, 0x03, 0x0a,
	0x11, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x50, 0x45,
	0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0x05, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x4c,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x51,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x2c, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2a,
	0x7b, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x07,
	0x41, 0x70, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x50, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x43, 0x10, 0x04, 0x2a, 0x87, 0x02, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50,
	0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x49,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x2a, 0xe7,
	0x01, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xda, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x45, 0x52, 0x4f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x42, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x53, 0x44, 0x42, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x43, 0x48, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x07, 0x2a, 0x77, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x95,
	0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x45,
	0x52, 0x41, 0x52, 0x43, 0x48, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x48,
	0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49,
	0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x59, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0x03, 0x2a, 0xcc, 0x02, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x4c, 0x55, 0x53, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x53, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c,
	0x41, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x53, 0x48, 0x41, 0x52, 0x50, 0x10, 0x07, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x57, 0x49, 0x46, 0x54, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49,
	0x44, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x51, 0x4c, 0x10, 0x0a, 0x12, 0x15,
	0x0a, 0x11, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x55, 0x41, 0x10, 0x0b, 0x2a, 0x4d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x2a, 0xad, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x04, 0x2a, 0xfa, 0x03, 0x0a, 0x08, 0x43, 0x51, 0x52, 0x53, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x51, 0x52,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x49, 0x44, 0x49, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x51, 0x52, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0b, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10,
	0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x51, 0x52, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x0f, 0x2a, 0xd5, 0x08, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x1e, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x64, 0x1a, 0x06, 0xf2,
	0xb8, 0x18, 0x02, 0x08, 0x01, 0x12, 0x2d, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x4e,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x65, 0x1a, 0x06, 0xf2, 0xb8,
	0x18, 0x02, 0x08, 0x01, 0x12, 0x2c, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x66, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02,
	0x08, 0x01, 0x12, 0x24, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x67,
	0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x68, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x01,
	0x12, 0x23, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x69, 0x1a, 0x06, 0xf2,
	0xb8, 0x18, 0x02, 0x08, 0x01, 0x12, 0x25, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x45, 0x52, 0x10, 0x6a, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x01, 0x12, 0x2f, 0x0a, 0x22,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0xc8, 0x01, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x02, 0x12, 0x32, 0x0a,
	0x25, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xc9, 0x01, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08,
	0x02, 0x12, 0x31, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xca, 0x01, 0x1a, 0x06, 0xf2, 0xb8,
	0x18, 0x02, 0x08, 0x02, 0x12, 0x29, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0xcb, 0x01, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x02, 0x12,
	0x2b, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x10, 0xcc, 0x01, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x02, 0x12, 0x28, 0x0a, 0x1b,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xcd, 0x01, 0x1a, 0x06,
	0xf2, 0xb8, 0x18, 0x02, 0x08, 0x02, 0x12, 0x2a, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0xce, 0x01, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02,
	0x08, 0x02, 0x12, 0x2c, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xac, 0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x03,
	0x12, 0x2f, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xad, 0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08,
	0x03, 0x12, 0x2e, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xae, 0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08,
	0x03, 0x12, 0x26, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xaf,
	0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x03, 0x12, 0x28, 0x0a, 0x1b, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0xb0, 0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18,
	0x02, 0x08, 0x03, 0x12, 0x25, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0xb1, 0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18, 0x02, 0x08, 0x03, 0x12, 0x27, 0x0a, 0x1a, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0xb2, 0x02, 0x1a, 0x06, 0xf2, 0xb8, 0x18,
	0x02, 0x08, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x10,
	0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x58, 0x59, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x12, 0x2a, 0x54, 0x0a, 0x09, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a,
	0x8f, 0x02, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x49, 0x4d, 0x4d,
	0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x07, 0x2a, 0xcc, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59,
	0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x06,
	0x2a, 0xc4, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x5f,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xc0, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x45, 0x43,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x50, 0x45, 0x43,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x45,
	0x43, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x53, 0x10, 0x05, 0x2a, 0x78, 0x0a, 0x0a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x3a, 0x66, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xc0, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x3a, 0x5a, 0x0a, 0x08,
	0x61, 0x70, 0x69, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x61, 0x70, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x3a, 0x5a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x60, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x5d, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd3, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x6f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd4, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x60, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd5, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x63, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xda, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x64, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdb, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3a, 0x5a, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdc, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x3a,
	0x66, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdd, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x60, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe4, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09,
	0x61, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x56, 0x0a, 0x04, 0x63, 0x71, 0x72,
	0x73, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe5, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x51, 0x52, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x63, 0x71, 0x72,
	0x73, 0x3a, 0x68, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xe6, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x5b, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe7, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x63, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xee, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x5a, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xef, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x60, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x3a, 0x5d, 0x0a, 0x09, 0x61,
	0x70, 0x69, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf8, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x08, 0x61, 0x70, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x6b, 0x0a, 0x0c, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf9, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x80, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfa,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x64, 0x0a, 0x09, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfb, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x3a, 0x54, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x82, 0x87, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x3a, 0x62, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8c, 0x87, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x6c, 0x0a, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8d, 0x87, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x66, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8e, 0x87, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x3a, 0x5c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8f, 0x87, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x3e,
	0x5a, 0x3c, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x32, 0x3b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x32, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platform_options_v2_annotations_proto_rawDescOnce sync.Once
	file_platform_options_v2_annotations_proto_rawDescData = file_platform_options_v2_annotations_proto_rawDesc
)

func file_platform_options_v2_annotations_proto_rawDescGZIP() []byte {
	file_platform_options_v2_annotations_proto_rawDescOnce.Do(func() {
		file_platform_options_v2_annotations_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_options_v2_annotations_proto_rawDescData)
	})
	return file_platform_options_v2_annotations_proto_rawDescData
}

var file_platform_options_v2_annotations_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_platform_options_v2_annotations_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_platform_options_v2_annotations_proto_goTypes = []any{
	(NetworkType)(0),        // 0: platform.options.v2.NetworkType
	(ApiType)(0),            // 1: platform.options.v2.ApiType
	(ApiInterfaceType)(0),   // 2: platform.options.v2.ApiInterfaceType
	(ApiLifecycle)(0),       // 3: platform.options.v2.ApiLifecycle
	(EntityType)(0),         // 4: platform.options.v2.EntityType
	(EntityConsistency)(0),  // 5: platform.options.v2.EntityConsistency
	(EntityHierarchy)(0),    // 6: platform.options.v2.EntityHierarchy
	(LanguageType)(0),       // 7: platform.options.v2.LanguageType
	(ConnectorType)(0),      // 8: platform.options.v2.ConnectorType
	(AuthRoleType)(0),       // 9: platform.options.v2.AuthRoleType
	(CQRSType)(0),           // 10: platform.options.v2.CQRSType
	(AuthRole)(0),           // 11: platform.options.v2.AuthRole
	(GraphType)(0),          // 12: platform.options.v2.GraphType
	(FieldBehavior)(0),      // 13: platform.options.v2.FieldBehavior
	(SyntheticType)(0),      // 14: platform.options.v2.SyntheticType
	(ClassificationType)(0), // 15: platform.options.v2.ClassificationType
	(SpecEnumType)(0),       // 16: platform.options.v2.SpecEnumType
	(EventScope)(0),         // 17: platform.options.v2.EventScope
	(SpecConfiguration_SpecConfigurationType)(0), // 18: platform.options.v2.SpecConfiguration.SpecConfigurationType
	(*NetworkOptions)(nil),                       // 19: platform.options.v2.NetworkOptions
	(*ApiOptions)(nil),                           // 20: platform.options.v2.ApiOptions
	(*EntityOptions)(nil),                        // 21: platform.options.v2.EntityOptions
	(*LanguageOptions)(nil),                      // 22: platform.options.v2.LanguageOptions
	(*GraphqlOptions)(nil),                       // 23: platform.options.v2.GraphqlOptions
	(*SpecServiceOptions)(nil),                   // 24: platform.options.v2.SpecServiceOptions
	(*RateLimitFilter)(nil),                      // 25: platform.options.v2.RateLimitFilter
	(*AuthorizationFilter)(nil),                  // 26: platform.options.v2.AuthorizationFilter
	(*ConsentFilter)(nil),                        // 27: platform.options.v2.ConsentFilter
	(*ProxyOptions)(nil),                         // 28: platform.options.v2.ProxyOptions
	(*ConnectorOptions)(nil),                     // 29: platform.options.v2.ConnectorOptions
	(*CQRSOptions)(nil),                          // 30: platform.options.v2.CQRSOptions
	(*RateLimitOptions)(nil),                     // 31: platform.options.v2.RateLimitOptions
	(*PermissionOptions)(nil),                    // 32: platform.options.v2.PermissionOptions
	(*GraphOptions)(nil),                         // 33: platform.options.v2.GraphOptions
	(*EntityFieldOptions)(nil),                   // 34: platform.options.v2.EntityFieldOptions
	(*SpecConfiguration)(nil),                    // 35: platform.options.v2.SpecConfiguration
	(*ConfigurationOptions)(nil),                 // 36: platform.options.v2.ConfigurationOptions
	(*ConfigurationFieldOptions)(nil),            // 37: platform.options.v2.ConfigurationFieldOptions
	(*SyntheticOptions)(nil),                     // 38: platform.options.v2.SyntheticOptions
	(*Classification)(nil),                       // 39: platform.options.v2.Classification
	(*SpecOptions)(nil),                          // 40: platform.options.v2.SpecOptions
	(*BillingOptions)(nil),                       // 41: platform.options.v2.BillingOptions
	(*EventScopeOptions)(nil),                    // 42: platform.options.v2.EventScopeOptions
	(*EventOptions)(nil),                         // 43: platform.options.v2.EventOptions
	(*AuthRoleOptions)(nil),                      // 44: platform.options.v2.AuthRoleOptions
	(*RoutineOptions)(nil),                       // 45: platform.options.v2.RoutineOptions
	(*descriptorpb.FileOptions)(nil),             // 46: google.protobuf.FileOptions
	(*descriptorpb.ServiceOptions)(nil),          // 47: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),           // 48: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),          // 49: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),            // 50: google.protobuf.FieldOptions
	(*descriptorpb.EnumOptions)(nil),             // 51: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil),        // 52: google.protobuf.EnumValueOptions
}
var file_platform_options_v2_annotations_proto_depIdxs = []int32{
	0,  // 0: platform.options.v2.NetworkOptions.type:type_name -> platform.options.v2.NetworkType
	1,  // 1: platform.options.v2.ApiOptions.type:type_name -> platform.options.v2.ApiType
	3,  // 2: platform.options.v2.ApiOptions.cycle:type_name -> platform.options.v2.ApiLifecycle
	2,  // 3: platform.options.v2.ApiOptions.interface:type_name -> platform.options.v2.ApiInterfaceType
	4,  // 4: platform.options.v2.EntityOptions.type:type_name -> platform.options.v2.EntityType
	5,  // 5: platform.options.v2.EntityOptions.consistency:type_name -> platform.options.v2.EntityConsistency
	6,  // 6: platform.options.v2.EntityOptions.hierarchy:type_name -> platform.options.v2.EntityHierarchy
	7,  // 7: platform.options.v2.LanguageOptions.languages:type_name -> platform.options.v2.LanguageType
	26, // 8: platform.options.v2.ProxyOptions.authorization:type_name -> platform.options.v2.AuthorizationFilter
	27, // 9: platform.options.v2.ProxyOptions.consent:type_name -> platform.options.v2.ConsentFilter
	25, // 10: platform.options.v2.ProxyOptions.rate_limit:type_name -> platform.options.v2.RateLimitFilter
	8,  // 11: platform.options.v2.ConnectorOptions.type:type_name -> platform.options.v2.ConnectorType
	10, // 12: platform.options.v2.CQRSOptions.type:type_name -> platform.options.v2.CQRSType
	11, // 13: platform.options.v2.PermissionOptions.roles:type_name -> platform.options.v2.AuthRole
	12, // 14: platform.options.v2.GraphOptions.type:type_name -> platform.options.v2.GraphType
	13, // 15: platform.options.v2.EntityFieldOptions.behavior:type_name -> platform.options.v2.FieldBehavior
	18, // 16: platform.options.v2.SpecConfiguration.type:type_name -> platform.options.v2.SpecConfiguration.SpecConfigurationType
	35, // 17: platform.options.v2.ConfigurationFieldOptions.configuration:type_name -> platform.options.v2.SpecConfiguration
	14, // 18: platform.options.v2.SyntheticOptions.type:type_name -> platform.options.v2.SyntheticType
	15, // 19: platform.options.v2.Classification.type:type_name -> platform.options.v2.ClassificationType
	16, // 20: platform.options.v2.SpecOptions.type:type_name -> platform.options.v2.SpecEnumType
	17, // 21: platform.options.v2.EventScopeOptions.scopes:type_name -> platform.options.v2.EventScope
	9,  // 22: platform.options.v2.AuthRoleOptions.role_type:type_name -> platform.options.v2.AuthRoleType
	46, // 23: platform.options.v2.network_file:extendee -> google.protobuf.FileOptions
	46, // 24: platform.options.v2.api_file:extendee -> google.protobuf.FileOptions
	46, // 25: platform.options.v2.entity:extendee -> google.protobuf.FileOptions
	46, // 26: platform.options.v2.language:extendee -> google.protobuf.FileOptions
	46, // 27: platform.options.v2.graphql:extendee -> google.protobuf.FileOptions
	46, // 28: platform.options.v2.configuration:extendee -> google.protobuf.FileOptions
	46, // 29: platform.options.v2.has_multiple_implementations:extendee -> google.protobuf.FileOptions
	47, // 30: platform.options.v2.api_service:extendee -> google.protobuf.ServiceOptions
	47, // 31: platform.options.v2.service:extendee -> google.protobuf.ServiceOptions
	47, // 32: platform.options.v2.proxy:extendee -> google.protobuf.ServiceOptions
	47, // 33: platform.options.v2.connector:extendee -> google.protobuf.ServiceOptions
	48, // 34: platform.options.v2.api_method:extendee -> google.protobuf.MethodOptions
	48, // 35: platform.options.v2.cqrs:extendee -> google.protobuf.MethodOptions
	48, // 36: platform.options.v2.permission:extendee -> google.protobuf.MethodOptions
	48, // 37: platform.options.v2.rate:extendee -> google.protobuf.MethodOptions
	49, // 38: platform.options.v2.api_message:extendee -> google.protobuf.MessageOptions
	49, // 39: platform.options.v2.graph:extendee -> google.protobuf.MessageOptions
	49, // 40: platform.options.v2.routine:extendee -> google.protobuf.MessageOptions
	50, // 41: platform.options.v2.api_field:extendee -> google.protobuf.FieldOptions
	50, // 42: platform.options.v2.entity_field:extendee -> google.protobuf.FieldOptions
	50, // 43: platform.options.v2.configuration_field:extendee -> google.protobuf.FieldOptions
	50, // 44: platform.options.v2.synthetic:extendee -> google.protobuf.FieldOptions
	51, // 45: platform.options.v2.spec:extendee -> google.protobuf.EnumOptions
	52, // 46: platform.options.v2.billing:extendee -> google.protobuf.EnumValueOptions
	52, // 47: platform.options.v2.event_scope:extendee -> google.protobuf.EnumValueOptions
	52, // 48: platform.options.v2.auth_role:extendee -> google.protobuf.EnumValueOptions
	52, // 49: platform.options.v2.event:extendee -> google.protobuf.EnumValueOptions
	19, // 50: platform.options.v2.network_file:type_name -> platform.options.v2.NetworkOptions
	20, // 51: platform.options.v2.api_file:type_name -> platform.options.v2.ApiOptions
	21, // 52: platform.options.v2.entity:type_name -> platform.options.v2.EntityOptions
	22, // 53: platform.options.v2.language:type_name -> platform.options.v2.LanguageOptions
	23, // 54: platform.options.v2.graphql:type_name -> platform.options.v2.GraphqlOptions
	36, // 55: platform.options.v2.configuration:type_name -> platform.options.v2.ConfigurationOptions
	20, // 56: platform.options.v2.api_service:type_name -> platform.options.v2.ApiOptions
	24, // 57: platform.options.v2.service:type_name -> platform.options.v2.SpecServiceOptions
	28, // 58: platform.options.v2.proxy:type_name -> platform.options.v2.ProxyOptions
	29, // 59: platform.options.v2.connector:type_name -> platform.options.v2.ConnectorOptions
	20, // 60: platform.options.v2.api_method:type_name -> platform.options.v2.ApiOptions
	30, // 61: platform.options.v2.cqrs:type_name -> platform.options.v2.CQRSOptions
	32, // 62: platform.options.v2.permission:type_name -> platform.options.v2.PermissionOptions
	31, // 63: platform.options.v2.rate:type_name -> platform.options.v2.RateLimitOptions
	20, // 64: platform.options.v2.api_message:type_name -> platform.options.v2.ApiOptions
	33, // 65: platform.options.v2.graph:type_name -> platform.options.v2.GraphOptions
	45, // 66: platform.options.v2.routine:type_name -> platform.options.v2.RoutineOptions
	20, // 67: platform.options.v2.api_field:type_name -> platform.options.v2.ApiOptions
	34, // 68: platform.options.v2.entity_field:type_name -> platform.options.v2.EntityFieldOptions
	37, // 69: platform.options.v2.configuration_field:type_name -> platform.options.v2.ConfigurationFieldOptions
	38, // 70: platform.options.v2.synthetic:type_name -> platform.options.v2.SyntheticOptions
	40, // 71: platform.options.v2.spec:type_name -> platform.options.v2.SpecOptions
	41, // 72: platform.options.v2.billing:type_name -> platform.options.v2.BillingOptions
	42, // 73: platform.options.v2.event_scope:type_name -> platform.options.v2.EventScopeOptions
	44, // 74: platform.options.v2.auth_role:type_name -> platform.options.v2.AuthRoleOptions
	43, // 75: platform.options.v2.event:type_name -> platform.options.v2.EventOptions
	76, // [76:76] is the sub-list for method output_type
	76, // [76:76] is the sub-list for method input_type
	50, // [50:76] is the sub-list for extension type_name
	23, // [23:50] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_platform_options_v2_annotations_proto_init() }
func file_platform_options_v2_annotations_proto_init() {
	if File_platform_options_v2_annotations_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_options_v2_annotations_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   27,
			NumExtensions: 27,
			NumServices:   0,
		},
		GoTypes:           file_platform_options_v2_annotations_proto_goTypes,
		DependencyIndexes: file_platform_options_v2_annotations_proto_depIdxs,
		EnumInfos:         file_platform_options_v2_annotations_proto_enumTypes,
		MessageInfos:      file_platform_options_v2_annotations_proto_msgTypes,
		ExtensionInfos:    file_platform_options_v2_annotations_proto_extTypes,
	}.Build()
	File_platform_options_v2_annotations_proto = out.File
	file_platform_options_v2_annotations_proto_rawDesc = nil
	file_platform_options_v2_annotations_proto_goTypes = nil
	file_platform_options_v2_annotations_proto_depIdxs = nil
}
