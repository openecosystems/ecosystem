{{ $entityName := entityName . }}{{ $entityKeyName := entityKeyName . }}{{ $systemName := domainSystemName2 .File }}


type {{ $entityName.UpperCamelCase }}SpecEntity struct {
	{{ $entityName.UpperCamelCase }} *{{ $entityName.UpperCamelCase }}
}

func New{{ $entityName.UpperCamelCase }}SpecEntity(specContext *specv2pb.SpecContext) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {

	return &{{ $entityName.UpperCamelCase }}SpecEntity{
		{{ $entityName.UpperCamelCase }}: &{{ $entityName.UpperCamelCase }}{

		},
	}, nil

}

func New{{ $entityName.UpperCamelCase }}SpecEntityFromSpec(ctx context.Context, s *specv2pb.Spec) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {
	data := &{{ $entityName.UpperCamelCase }}{}
	err := sdkv2alphalib.GetDataFromSpec[*{{ $entityName.UpperCamelCase }}](ctx, s, data)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(err)
	}

	return &{{ $entityName.UpperCamelCase }}SpecEntity{
		{{ $entityName.UpperCamelCase }}: data,
	}, nil
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToProto() (*{{ name . }}, error) {

	return entity.{{ $entityName.UpperCamelCase }}, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToEvent() (*string, error) {

	bytes, err := json.Marshal(entity)
	if err != nil {
		return nil, err
	}

	event := string(bytes)

	return &event, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) FromEvent(event *string) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {

	bytes := []byte(*event)
	err := json.Unmarshal(bytes, entity)
	if err != nil {
		return nil, err
	}

	return entity, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) MarshalEntity() (*anypb.Any, error) {

  d, err := anypb.New(entity.{{ .Name }})
	if err != nil {
    return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall entity"), err)
	}

	return d, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) MarshalProto() (*anypb.Any, error) {

	proto, err := entity.ToProto()
	if err != nil {
    return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to convert entity to proto"), err)
	}

  d, err := anypb.New(proto)
	if err != nil {
    return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall proto"), err)
	}

	return d, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) TypeName() string {
	return "{{ .Name.LowerCamelCase }}"
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) CommandTopic() string {
	return CommandData{{ .Name }}Topic
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) EventTopic() string {
	return EventData{{ .Name }}Topic
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) RoutineTopic() string {
	return RoutineData{{ .Name }}Topic
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) TopicWildcard() string {
  return {{ $entityName.UpperCamelCase }}TypeNameEventPrefix + ">"
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) SystemName() string {
  return "{{ $systemName.LowerCamelCase }}"
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) internal() {
{{ range .Fields }}
  {{- if .Type.IsEnum }}
	// Enum
    //var _ *{{ enumTypePackage . }}{{ .Type.Enum.Name.UpperCamelCase }}
  {{- else if isMap . }}
	  //{{ .Name }}
  {{- else if .Type.IsRepeated }}
    //Repeated {{ .Name }}
	//var _ {{ sliceValueTypePackage . }}{{ sliceValueType . }}
  {{- else if isStructPB . -}}
    //{{ .Name }}
  {{- else if isStruct . -}}
	// Struct
    //var _ *{{ structTypePackage . }}{{ structType . }}
  {{- else if .Type.IsEmbed -}}
    //{{ if IsDuration . }}var _ durationpb.Duration{{ end }}
    //{{ if IsTimestamp . }}var _ timestamppb.Timestamp{{ end }}
    //{{ .Name }}
  {{ end }}
{{ end -}}
}


