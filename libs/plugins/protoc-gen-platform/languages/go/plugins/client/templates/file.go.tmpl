// Code generated by protoc-gen-platform {{ pluginName }}. DO NOT EDIT.
// source: {{ .InputPath }}
{{ $s := service . }}{{ $q := queries . }}{{ $m := mutations . }}{{ $e := entity . }}{{ $goPath := goPath . }}

package {{ package . }}
import (
        "context"
	"errors"
	"fmt"
	"runtime"
	"sync"
	"time"

	"github.com/lightstep/otel-launcher-go/launcher"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	. "{{ goPackageOverwrite .File "grpc-core" }}"
	{{ range getImportPackages .File }}
		"{{ . }}"
	{{ end }}
	"github.com/jeannotcompany/cdx-client/binding"
	"github.com/jeannotcompany/cdx-client/config"
)

type {{ $s.Name }}ClientBinding struct{
    Connection *grpc.ClientConn
    Client {{ $s.Name }}Client
}

var (
	{{ $s.Name.LowerCamelCase }}ClientInstance *{{ $s.Name }}ClientBinding
)

{{ range $m }}
{{ if eq (getCqrsType . ) "stream-server" }}{{ template "stream.go.tmpl" . }}{{ else }}{{ template "request.go.tmpl" . }}{{ end }}
{{ end }}

{{ range $q }}
{{ if eq (getCqrsType . ) "stream-server" }}{{ template "stream.go.tmpl" . }}{{ else }}{{ template "request.go.tmpl" . }}{{ end }}
{{ end }}

func	 (b *{{ $s.Name }}ClientBinding) Validate(_ context.Context, _ *config.ClientConfiguration, _ *binding.ClientBindings) error {

	return nil
}

func (b *{{ $s.Name }}ClientBinding) Bind(ctx context.Context, cfg *config.ClientConfiguration, bindings *binding.ClientBindings) *binding.ClientBindings {

	var once sync.Once
	if {{ $s.Name.LowerCamelCase }}ClientInstance == nil {

		once.Do(
			func() {
				var client *config.Client
				for _, cl := range cfg.Clients {
					if cl.Entity == "{{ $e.Name.LowerCamelCase }}" {
						client = &cl
					}
				}
				if client == nil {
				   msg := "Grpc Client not configured for entity: {{ $e.Name.LowerCamelCase }}"
				   panic(msg)
				}
				// Set up a connection to the server.
				address := fmt.Sprintf("%s:%d", client.Host, client.Port)

				conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())
				if err != nil {
					panic(fmt.Sprintf("did not connect: %v", err))
				}
				c := New{{ $s.Name }}Client(conn)
				{{ $s.Name.LowerCamelCase }}ClientInstance = &{{ $s.Name }}ClientBinding{Client: c, Connection: conn}
			})
	} else {
		fmt.Println("Identity already bound")
	}

	return bindings
}

func (b *{{ $s.Name }}ClientBinding) Close() error {
        err := {{ $s.Name.LowerCamelCase }}ClientInstance.Connection.Close()
        {{ $s.Name.LowerCamelCase }}ClientInstance = nil
        return err
}
