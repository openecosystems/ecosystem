{{ $s := parentService . }}{{ $goPath := goPath .File }}{{ $e := parentEntity . }}{{ $entityName := entityName $e }}{{ $system := domainSystemName2 .File }}
func (s *{{ $s.Name }}Handler) Get{{ .Name }}Configuration() *natsnodev1.ListenerConfiguration {

	return &natsnodev1.ListenerConfiguration{
		Entity:     &{{ $entityName.UpperCamelCase }}SpecEntity{},
		Procedure:  "{{ .Name }}",
		CQRS: optionv2pb.CQRSType_{{ getCQRSTypeEnumName .}},
        Topic:   EventData{{ $entityName.UpperCamelCase }}Topic,
		StreamType: natsnodev1.NewInboundStream(),
		JetstreamConfiguration: &jetstream.ConsumerConfig{
			Durable:       "{{ $system.LowerCamelCase }}-{{ $entityName.LowerCamelCase }}-{{ .Name.LowerCamelCase }}",
			AckPolicy:     jetstream.AckExplicitPolicy,
			MemoryStorage: false,
		},
	}
}

func (s *{{ $s.Name }}Handler) {{ .Name }}(ctx context.Context, req *connect.Request[{{ .Input.Name }}], stream *connect.ServerStream[{{ .Output.Name }}]) error {

    tracer := *opentelemetryv1.Bound.Tracer
    log := *zaploggerv1.Bound.Logger
    n := natsnodev1.Bound.Nats

    // Executes top level validation, no business domain validation
    validationCtx, validationSpan := tracer.Start(ctx, "request-validation", trace.WithSpanKind(trace.SpanKindInternal))
    v := *protovalidatev0.Bound.Validator
    if err := v.Validate(req.Msg); err != nil {
        return sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(err)
    }
    validationSpan.End()

    // Spec Propagation
    specCtx, specSpan := tracer.Start(validationCtx, "spec-propagation", trace.WithSpanKind(trace.SpanKindInternal))
    spec, ok := ctx.Value(sdkv2betalib.SpecContextKey).(*specv2pb.Spec)
    if !ok {
        return sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(errors.New("Cannot propagate spec to context"))
    }
    specSpan.End()

    // Validate field mask
    if spec.SpecData.FieldMask != nil && len(spec.SpecData.FieldMask.Paths) > 0 {
      spec.SpecData.FieldMask.Normalize()
      if !spec.SpecData.FieldMask.IsValid(&{{ .Output.Name }}{}) {
      log.Error("Invalid field mask")
      return sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(errors.New("Invalid field mask"))
      }
    }

    // Distributed Domain Handler
    handlerCtx, handlerSpan := tracer.Start(specCtx, "event-generation", trace.WithSpanKind(trace.SpanKindInternal))
    defer handlerSpan.End()

    config := s.Get{{ .Name }}Configuration()
    return natsnodev1.MultiplexEventStreamSync[{{ .Output.Name }}](handlerCtx, spec, &natsnodev1.SpecStreamEvent{
		Request:        req.Msg,
		Stream:         config.StreamType,
		Procedure:      config.Procedure,
		EventName:      "",
		EventTopic:     config.Topic,
		EntityTypeName: config.Entity.TypeName(),
	}, n, stream, func(m *nats.Msg) (*{{ .Output.Name }}, error) {

		var resp {{ .Output.Name }}
		if err := proto.Unmarshal(m.Data, &resp); err != nil {
            return nil, sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(errors.New("failed to unmarshal event to {{ .Output.Name }}:")).WithInternalErrorDetail(err)
		}

		return &resp, nil
	})
}