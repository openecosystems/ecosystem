// Code generated by protoc-gen-platform {{ pluginName }}. DO NOT EDIT.
// source: {{ .File.InputPath }}
{{ $s := service .File }}{{ $version := getPackageVersionName .File }}{{ $versionLower := getPackageVersion .File }}{{ $apiType := getApiOptionsTypeName .File }}{{ $system := domainSystemName2 .File }}{{ $e := parentEntity . }}{{ $entityName := entityName $e }}{{ $entityNamePlural := entityNamePlural $e}}{{ $leadingComment := methodLeadingComment . }}{{ $trailingComments := methodTrailingComment . }}{{ $leadingDetachedComments := methodLeadingDetachedComments . }}{{ $methodShortName := getMethodShortName . }}
{{ $systemlower := toLower $system }}

package {{ goPath .File }}cli

import (
    "encoding/json"
    "os"
    "connectrpc.com/connect"
    "google.golang.org/protobuf/encoding/protojson"
    "github.com/spf13/cobra"
    clog "github.com/charmbracelet/log"
    sdkv2betalib "github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta"

    adinosdkv2beta "github.com/adino/platform/go/adino-sdk/v2beta"

{{ range getImportPackages .File }}
    "{{ . }}"
{{ end }}
)

var (
  {{ .Name.LowerCamelCase }}Request string
  {{ .Name.LowerCamelCase }}FieldMask   string
  {{ .Name.LowerCamelCase }}ValidateOnly bool
)

var {{ .Name }}{{ $version.UpperCamelCase }}Cmd = &cobra.Command{
    Use:   "{{ $methodShortName.LowerCamelCase }}",
    Short: `{{- $leadingComment -}}`,
    Long:  `{{- $leadingDetachedComments -}}`,
    Run: func(cmd *cobra.Command, args []string) {
        log := cmd.Context().Value(sdkv2betalib.LoggerContextKey).(*clog.Logger)
        log.Debug("Calling {{ .Name.LowerCamelCase }} {{ $entityName.LowerCamelCase }}")
        //settings := cmd.Root().Context().Value(sdkv2betalib.SettingsContextKey).(*sdkv2betalib.CLIConfiguration)

		_, err := cmd.Flags().GetString("field-mask")
		if err != nil {
			log.Error(err)
			os.Exit(1)
		}

		_, err = cmd.Flags().GetBool("validate-only")
		if err != nil {
			log.Error(err)
			os.Exit(1)
		}

		_request, err := cmd.Flags().GetString("request")
		if err != nil {
			log.Error(err)
			os.Exit(1)
		}

		if _request == "" {
			_request = "{}"
		}

        _r := {{ goPath .File }}.{{ .Input.Name.UpperCamelCase }}{}
        err = protojson.Unmarshal([]byte(_request), &_r)
        if err != nil {
          log.Error(err)
          os.Exit(1)
        }

        request := connect.NewRequest[{{ goPath .File }}.{{ .Input.Name.UpperCamelCase }}](&_r)
        adino, err := adinosdkv2beta.NewAdinoClient()
		if err != nil {
          log.Error(err)
          os.Exit(1)
		}

        response, err := adino.{{ $system }}.{{ $s.Name.UpperCamelCase }}.{{ .Name.UpperCamelCase }}(cmd.Context(), request)
        if err != nil {
          log.Error(err)
          os.Exit(1)
        }

        val, _ := json.MarshalIndent(&response, "", "    ")
        log.Info(string(val))
    },
}

func init() {
  {{ .Name }}{{ $version.UpperCamelCase }}Cmd.PersistentFlags().StringVarP(&{{ .Name.LowerCamelCase }}Request, "request", "r", "{}", "Request for api call")
  {{ .Name }}{{ $version.UpperCamelCase }}Cmd.PersistentFlags().BoolVar(&{{ .Name.LowerCamelCase }}ValidateOnly,"validate-only", false, "Only validate this request without modifying the resource")
  {{ .Name }}{{ $version.UpperCamelCase }}Cmd.PersistentFlags().StringVarP(&{{ .Name.LowerCamelCase }}FieldMask, "field-mask", "m", "", "Limit the returned response fields")
}
