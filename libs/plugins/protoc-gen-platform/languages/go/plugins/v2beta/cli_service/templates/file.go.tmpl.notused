// Code generated by protoc-gen-platform {{ pluginName }}. DO NOT EDIT.
// source: {{ .File.InputPath }}{{ $e := entity .File }}
{{ $goPath := goPath .File }}{{ $entityName := entityName $e }}{{ $entityNamePlural := entityNamePlural $e}}{{ $allMethods := allMethods .File }}{{ $s := service . }}
{{ $leadingComment := serviceLeadingComment . }}{{ $trailingComments := serviceTrailingComment . }}{{ $allLeadingComments := serviceLeadingDetachedComments .}}
package {{ $goPath }}

import (
	"context"
	"crypto/tls"
	"time"

	{{ $entityName.LowerCamelCase }} "{{ goPackage .File }}"
	"github.com/apex/log"

	"github.com/spf13/cobra"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

type Client{{ $entityName.UpperCamelCase }} struct {
	Conn            *grpc.ClientConn
	{{ $entityName.UpperCamelCase }}Client {{ $entityName.LowerCamelCase }}.{{ $s.Name }}Client
}

func NewClient{{ $entityName.UpperCamelCase }}() *Client{{ $entityName.UpperCamelCase }} {
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)

	config := &tls.Config{
		InsecureSkipVerify: false,
	}

	conn, err := grpc.DialContext(ctx,"sf-api-synthetic-mg0m90edhwgw8.cpln.app:443", grpc.WithBlock(), grpc.WithTransportCredentials(credentials.NewTLS(config)))
	if err != nil {
		log.Fatal(err.SpecError())
		return nil
	}

	client := {{ $entityName.LowerCamelCase }}.New{{ $s.Name }}Client(conn)
	return &Client{{ $entityName.UpperCamelCase }}{Conn: conn, {{ $entityName.UpperCamelCase }}Client: client}
}

func (client *Client{{ $entityName.UpperCamelCase }}) Close() {
	client.Conn.Close()
}

var {{ $entityName.UpperCamelCase }}Cmd = &cobra.Command{
	Use:   "{{ $entityName.LowerCamelCase }}",
	Short: `{{ $trailingComments }}`,
	Long:  `{{ $leadingComment }}`,
	Run: func(cmd *cobra.Command, args []string) {

	},
}

func init() {
	{{ $entityName.UpperCamelCase }}Cmd.PersistentFlags().StringP("request", "r", "{}", "Request for api call")
	{{ range $allMethods }}
	{{ $entityName.UpperCamelCase }}Cmd.AddCommand({{ .Name }}Cmd)
	{{ end }}

}
