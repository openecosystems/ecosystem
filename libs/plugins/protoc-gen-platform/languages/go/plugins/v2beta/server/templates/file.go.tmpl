// Code generated by protoc-gen-platform {{ pluginName }}. DO NOT EDIT.
// source: {{ .InputPath }}
{{ $s := service . }}{{ $q := queries . }}{{ $m := mutations . }}{{ $goPath := goPath . }}{{ $e := entity . }}{{ $imports := getAllGoFieldLevelImportPaths .File }}{{ $system := domainSystemName2 .File }}{{ $apiType := getApiOptionsTypeName .File }}{{ $version := getPackageVersion .File }}

package {{ package . }}
import (
  "connectrpc.com/connect"
  "github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/bindings/opentelemetry"
  "github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/bindings/protovalidate"
  {{- if $s }}
  "github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta"
  {{ end -}}
  "go.opentelemetry.io/otel/trace"
  "net/http"
  "errors"

  "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/type/v2"
  "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"
  {{ range $key, $value := $imports }}
  _ "{{ $key }}"
  {{- end }}

	{{ if $m }}"context"
	{{ else if $q}} "context"
	{{end}}
)

// {{ $s.Name }}MutationHandler is the domain level implementation of the server API for mutations of the {{ $s.Name }} service
type {{ $s.Name }}MutationHandler interface {
	{{ range $m }}{{ if eq (getCqrsType . ) "stream-server" }}{{ template "mutation_server_stream.go.tmpl" . }}{{ else if eq (getCqrsType . ) "stream-bidi" }}{{ template "mutation_bidi_stream.go.tmpl" . }}{{ else }}{{ template "mutation.go.tmpl" . }}{{ end }}
	{{ end }}
}

// {{ $s.Name }}QueryHandler is the domain level implementation of the server API for queries of the {{ $s.Name }} service
type {{ $s.Name }}QueryHandler interface {
	{{ range $q }}{{ if eq (getCqrsType . ) "stream-server" }}{{ template "query_server_stream.go.tmpl" . }}{{ else if eq (getCqrsType . ) "stream-bidi" }}{{ template "query_bidi_stream.go.tmpl" . }}{{ else }}{{ template "query.go.tmpl" . }}{{ end }}
	{{ end }}
}

type {{ $s.Name }} struct {
	QueryHandler    {{ $s.Name }}QueryHandler
	MutationHandler {{ $s.Name }}MutationHandler
}

{{ range $m }}
{{ if eq (getCqrsType . ) "stream-server" }}{{ template "mutation_server_stream_implemented.go.tmpl" . }}{{ else if eq (getCqrsType . ) "stream-bidi" }}{{ template "mutation_bidi_stream_implemented.go.tmpl" . }}{{ else }}{{ template "mutation_implemented.go.tmpl" . }}{{ end }}
{{ end }}

{{ range $q }}
{{ if eq (getCqrsType . ) "stream-server" }}{{ template "query_server_stream_implemented.go.tmpl" . }}{{ else if eq (getCqrsType . ) "stream-bidi" }}{{ template "query_bidi_stream_implemented.go.tmpl" . }}{{ else }}{{ template "query_implemented.go.tmpl" . }}{{ end }}
{{ end }}

func Register{{ $s.Name }}SpecServer(b []sdkv2betalib.Binding, path string, handler *http.Handler) *sdkv2betalib.Server {

  _b := []sdkv2betalib.Binding{
    &protovalidatev0.Binding{},
    &opentelemetryv1.Binding{},
  }

  bounds := _b

  if b != nil {
    bounds = append(_b, b...)
  }

	return sdkv2betalib.NewServer(bounds, path, handler)
}
