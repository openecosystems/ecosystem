{{ $entityName := entityName . }}{{ $entityKeyName := entityKeyName . }}{{ $systemName := domainSystemName2 .File }}
const (
{{ $entityName.UpperCamelCase }}Namespace string = "{{ entityNamespace . }}"
{{ range .Fields }}{{ $entityNameFromField := entityNameFromField . }}{{ $entityNameFromField.UpperCamelCase }}{{ .Name.UpperCamelCase }}Bin string = "{{ binName . }}"
{{ end }}
)

type {{ $entityName.UpperCamelCase }}SpecEntity struct {
	Namespace    string
	{{ $entityName.UpperCamelCase }} *{{ $entityName.UpperCamelCase }}
	SpecContext  *specv2pb.SpecContext
}

func New{{ $entityName.UpperCamelCase }}SpecEntity(specContext *specv2pb.SpecContext) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {

	id := ksuid.New()
	createdAt := timestamppb.Now()

	return &{{ $entityName.UpperCamelCase }}SpecEntity{
		Namespace: {{ $entityName.UpperCamelCase }}Namespace,
		{{ $entityName.UpperCamelCase }}: &{{ $entityName.UpperCamelCase }}{
			Id:        id.String(),
			CreatedAt: createdAt,
			UpdatedAt: createdAt,
		},
		SpecContext: specContext,
	}, nil

}

func New{{ $entityName.UpperCamelCase }}SpecEntityFromSpec(ctx context.Context, s *specv2pb.Spec) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {
	data := &{{ $entityName.UpperCamelCase }}{}
	err := sdkv2alphalib.GetDataFromSpec[*{{ $entityName.UpperCamelCase }}](ctx, s, data)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(err)
	}

	return &{{ $entityName.UpperCamelCase }}SpecEntity{
		Namespace: {{ $entityName.UpperCamelCase }}Namespace,
		{{ $entityName.UpperCamelCase }}: data,
		SpecContext: s.Context,
	}, nil
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToProto() (*{{ name . }}, error) {

	return entity.{{ $entityName.UpperCamelCase }}, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToKeyString(ctx context.Context) (string, error) {

	if entity.SpecContext == nil {
		return "", errors.NewSpecError(ctx, errors.SpecInternalError(), "Cannot create entity key with a nil SpecContext")
	}

	if entity.SpecContext.OrganizationSlug == "" {
		return "", errors.NewSpecError(ctx, errors.SpecPreconditionFailedError(), "An Organization slug is required within the entity.SpecContext")
	}

	if entity.{{ .Name }}.{{ $entityKeyName.UpperCamelCase }} == "" {
		return "", errors.NewSpecError(ctx, errors.SpecPreconditionFailedError(), "A {{ name . }} {{ $entityKeyName }} is required")
	}

	return entity.SpecContext.OrganizationSlug + ":" + entity.SpecContext.WorkspaceSlug + ":" + entity.{{ .Name }}.{{ $entityKeyName.UpperCamelCase }}, nil
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToKey(ctx context.Context) (*aerospike.Key, error) {

	k, err := entity.ToKeyString(ctx)
	if err != nil {
		return nil, err
        }

	return aerospike.NewKey(
		{{ $entityName.UpperCamelCase }}Namespace,
		entity.TypeName(),
		aerospike.NewStringValue(k),
	)
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToBins(ctx context.Context) (aerospike.BinMap, error) {

	bins := make(aerospike.BinMap)

	if entity.SpecContext == nil {
		return nil, errors.NewSpecError(ctx, errors.SpecInternalError(), "Cannot serialize to bins with a nil entity.SpecContext")
	}

	if entity.SpecContext.OrganizationSlug != "" && entity.SpecContext.WorkspaceSlug != "" {
		bins[spec.SpecContextBin] = entity.SpecContext.OrganizationSlug + ":" + entity.SpecContext.WorkspaceSlug
	} else if entity.SpecContext.OrganizationSlug != "" {
		bins[spec.SpecContextBin] = entity.SpecContext.OrganizationSlug
	}

	{{ range .Fields }}
	{{ template "entity_to_binary.go.tmpl" . }}
	{{ end }}

	return bins, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) FromBins(b *aerospike.BinMap) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {

	bins := *b

	ok := false
	_ = ok

	if _id, ok := bins[{{ $entityName.UpperCamelCase }}IdBin]; ok {
		entity.{{ .Name }}.Id = _id.(string)
	}

	{{ range .Fields }}
	{{ template "entity_from_binary.go.tmpl" . }}
	{{ end }}

	return entity, nil
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) ToEvent() (*string, error) {

	bytes, err := json.Marshal(entity)
	if err != nil {
		return nil, err
	}

	event := string(bytes)

	return &event, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) FromEvent(event *string) (*{{ $entityName.UpperCamelCase }}SpecEntity, error) {

	bytes := []byte(*event)
	err := json.Unmarshal(bytes, entity)
	if err != nil {
		return nil, err
	}

	return entity, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) MarshalEntity() (*anypb.Any, error) {

  d, err := anypb.New(entity.{{ .Name }})
	if err != nil {
		return nil, errors.NewSpecError(context.Background(), errors.SpecInternalError(), "failed to marshall entity" + err.Error())
	}

	return d, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) MarshalProto() (*anypb.Any, error) {

	proto, err := entity.ToProto()
	if err != nil {
		return nil, errors.NewSpecError(context.Background(), errors.SpecInternalError(), "failed to convert entity to proto" + err.Error())
	}

  d, err := anypb.New(proto)
	if err != nil {
		return nil, errors.NewSpecError(context.Background(), errors.SpecInternalError(), "failed to marshall proto" + err.Error())
	}

	return d, nil

}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) TypeName() string {
	return "{{ .Name.LowerCamelCase }}"
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) CommandTopic() string {
	return CommandData{{ .Name }}Topic
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) EventTopic() string {
	return EventData{{ .Name }}Topic
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) RoutineTopic() string {
	return RoutineData{{ .Name }}Topic
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) TopicWildcard() string {
  return {{ $entityName.UpperCamelCase }}TypeNameEventPrefix + ">"
}

func (entity *{{ $entityName.UpperCamelCase }}SpecEntity) SystemName() string {
   return "{{ $systemName.LowerCamelCase }}"
}
