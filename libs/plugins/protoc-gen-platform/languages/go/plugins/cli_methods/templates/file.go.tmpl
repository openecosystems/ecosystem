// Code generated by protoc-gen-platform {{ pluginName }}. DO NOT EDIT.
// source: {{ .File.InputPath }}
{{ $s := service .File }}{{ $version := getPackageVersionName .File }}{{ $versionLower := getPackageVersion .File }}{{ $apiType := getApiOptionsTypeName .File }}{{ $system := domainSystemName2 .File }}{{ $e := parentEntity . }}{{ $entityName := entityName $e }}{{ $entityNamePlural := entityNamePlural $e}}{{ $leadingComment := methodLeadingComment . }}{{ $trailingComments := methodTrailingComment . }}{{ $leadingDetachedComments := methodLeadingDetachedComments . }}{{ $methodShortName := getMethodShortName . }}

package {{ goPath .File }}cmd

import (
    "connectrpc.com/connect"
    "context"
    "encoding/json"
    "fmt"
    "libs/public/go/sdk/v2alpha"
    "libs/{{ $apiType }}/go/sdk/gen/{{ $system.LowerCamelCase }}/{{ $versionLower }}"
    "os"
    "github.com/apex/log"
    "google.golang.org/protobuf/encoding/protojson"
    "github.com/spf13/cobra"

{{ range getImportPackages .File }}
    "{{ . }}"
{{ end }}
)

var (
  {{ .Name.LowerCamelCase }}Request string
  {{ .Name.LowerCamelCase }}FieldMask   string
  {{ .Name.LowerCamelCase }}ValidateOnly bool
)

var {{ .Name }}{{ $version.UpperCamelCase }}Cmd = &cobra.Command{
    Use:   "{{ $methodShortName.LowerCamelCase }}",
    Short: `{{- $leadingComment -}}`,
    Long:  `{{- $leadingDetachedComments -}}`,
    Run: func(cmd *cobra.Command, args []string) {

        log.Debug("Calling {{ .Name.LowerCamelCase }} {{ $entityName.LowerCamelCase }}")

        _request, err := cmd.Flags().GetString("request")
        if err != nil {
          fmt.Println(err)
          os.Exit(1)
        }
        if _request == "" {
          _request = "{}"
        }

        _r := {{ getImportName .Input }}.{{ .Input.Name.UpperCamelCase }}{}
        err = protojson.Unmarshal([]byte(_request), &_r)
        if err != nil {
          fmt.Println(err)
          os.Exit(1)
        }

        sdkv2alphalib.Overrides.FieldMask = {{ .Name.LowerCamelCase }}FieldMask
        sdkv2alphalib.Overrides.ValidateOnly = {{ .Name.LowerCamelCase }}ValidateOnly

        request := connect.NewRequest[{{ getImportName .Input }}.{{ .Input.Name.UpperCamelCase }}](&_r)
        // Add GZIP Support: connect.WithSendGzip(),
        client := *{{ getImportName .Input }}sdk.New{{ $entityName.UpperCamelCase }}ServiceSpecClient(sdkv2alphalib.Config, sdkv2alphalib.Config.Platform.Endpoint, connect.WithInterceptors(sdkv2alphalib.NewCLIInterceptor(sdkv2alphalib.Config, sdkv2alphalib.Overrides)))
        response, err := client.{{ .Name }}(context.Background(), request)
        if err != nil {
          fmt.Println(err)
          os.Exit(1)
        }

        val, _ := json.MarshalIndent(&response, "", "    ")
        fmt.Println(string(val))
    },
}

func init() {
  {{ .Name }}{{ $version.UpperCamelCase }}Cmd.PersistentFlags().StringVarP(&{{ .Name.LowerCamelCase }}Request, "request", "r", "{}", "Request for api call")
  {{ .Name }}{{ $version.UpperCamelCase }}Cmd.PersistentFlags().BoolVar(&{{ .Name.LowerCamelCase }}ValidateOnly,"validate-only", false, "Only validate this request without modifying the resource")
  {{ .Name }}{{ $version.UpperCamelCase }}Cmd.PersistentFlags().StringVarP(&{{ .Name.LowerCamelCase }}FieldMask, "field-mask", "m", "", "Limit the returned response fields")
}
