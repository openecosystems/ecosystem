// Code generated by protoc-gen-platform {{ pluginName }}. DO NOT EDIT.
// source: {{ .InputPath }}
{{ $s := service . }}{{ $routines := getRoutines .File }}{{ $e := entity .File }}{{ $entityName := entityName $e }}
package {{ package . }}
{{ if $routines }}
import (
       "context"

       "google.golang.org/protobuf/types/known/anypb"

       binding "libs/private/go/server/v2alpha"
       "errors"
       //specpb "libs/protobuf/go/protobuf/gen/platform/spec/v2"
       . "{{ goPackageRemote .File }}"
)

{{ if not $routines }}{{ else }}{{ range $i, $r := $routines.Values }}{{if gt $i 0}}
{{ $request := getRoutineMessageFieldName $r "request"}}
{{ $response := getRoutineMessageFieldName $r "response"}}
type {{ .Name.LowerDotNotation.UpperCamelCase }}Handler func(context.Context, *specpb.Spec, {{ $request }}) (*{{ $response }}, error)

type {{ .Name.LowerDotNotation.UpperCamelCase }} struct {
     Handler {{ .Name.LowerDotNotation.UpperCamelCase }}Handler
}

func (*{{ .Name.LowerDotNotation.UpperCamelCase }}) GetConfiguration() *binding.RoutineListenerConfiguration {
     return &binding.RoutineListenerConfiguration{
     	    ListenerType: "{{ .Name }}",
	    ListenerName: "{{ .Name }}",
	    }
}
{{ $routine := getRoutineMessage $r }}
func (r *{{ .Name.LowerDotNotation.UpperCamelCase }}) Process(ctx context.Context, request *binding.RoutineListenerMessage) (*anypb.Any, error) {
	var log = binding.Bounds.Frontsight.Logger

	log.Info("Processing {{ .Name.LowerDotNotation.UpperCamelCase }}")
	ctx, span := binding.Bounds.Frontsight.Tracer.Start(ctx, "{{ .Name.LowerDotNotation.UpperCamelCase }}")
	defer span.End()

	routineState := new({{ $routine.Name.String }})
	err := binding.GetRoutineContextData(ctx, request.Spec, routineState)
	if err != nil {
		return nil, errors.NewSpecError(ctx, errors.SpecInternalError(), "{{ .Name.LowerDotNotation.UpperCamelCase }} not in spec routine context")
	}

        response, err := r.Handler(ctx, request.Spec, *routineState.Request)
	if err != nil {
	   return nil, err
	}
	routineState.Response = response
	any, err := anypb.New(routineState)
	if err != nil {
		panic(err)
	}
	return any, nil
}
{{ end }}{{ end }}{{ end }}{{ end }}
