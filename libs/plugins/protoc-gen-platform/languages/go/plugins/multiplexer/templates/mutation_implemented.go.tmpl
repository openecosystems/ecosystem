{{ $s := parentService . }}{{ $goPath := goPath .File }}{{ $e := parentEntity . }}{{ $entityName := entityName $e }}{{ $system := domainSystemName2 .File }}
func (s *{{ $s.Name }}Handler) Get{{ .Name }}Configuration() *natsnodev1.ListenerConfiguration {

	return &natsnodev1.ListenerConfiguration{
		Entity:     &{{ $entityName.UpperCamelCase }}SpecEntity{},
		Procedure:  "{{ .Name }}",
		CQRS: optionv2pb.CQRSType_{{ getCQRSTypeEnumName .}},
        Topic:   CommandData{{ $entityName.UpperCamelCase }}Topic,
		StreamType: natsnodev1.NewInboundStream(),
		JetstreamConfiguration: &jetstream.ConsumerConfig{
			Durable:       "{{ $system.LowerCamelCase }}-{{ $entityName.LowerCamelCase }}-{{ .Name.LowerCamelCase }}",
			AckPolicy:     jetstream.AckExplicitPolicy,
			MemoryStorage: false,
		},
	}
}

func (s *{{ $s.Name }}Handler) {{ .Name }}(ctx context.Context, req *connect.Request[{{ .Input.Name }}]) (*connect.Response[{{ .Output.Name }}], error) {

tracer := *opentelemetryv1.Bound.Tracer
log := *zaploggerv1.Bound.Logger

// Executes top level validation, no business domain validation
validationCtx, validationSpan := tracer.Start(ctx, "request-validation", trace.WithSpanKind(trace.SpanKindInternal))
v := *protovalidatev0.Bound.Validator
if err := v.Validate(req.Msg); err != nil {
return nil, sdkv2alphalib.ErrServerPreconditionFailed.WithInternalErrorDetail(err)
}
validationSpan.End()

// Spec Propagation
specCtx, specSpan := tracer.Start(validationCtx, "spec-propagation", trace.WithSpanKind(trace.SpanKindInternal))
spec, ok := ctx.Value(sdkv2alphalib.SpecContextKey).(*specv2pb.Spec)
if !ok {
return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("Cannot propagate spec to context"))
}
specSpan.End()

// Validate field mask
if spec.SpecData.FieldMask != nil && len(spec.SpecData.FieldMask.Paths) > 0 {
  spec.SpecData.FieldMask.Normalize()
  if !spec.SpecData.FieldMask.IsValid(&{{ .Output.Name }}{}) {
  log.Error("Invalid field mask")
  return nil, sdkv2alphalib.ErrServerPreconditionFailed.WithInternalErrorDetail(errors.New("Invalid field mask"))
  }
}

// Distributed Domain Handler
handlerCtx, handlerSpan := tracer.Start(specCtx, "event-generation", trace.WithSpanKind(trace.SpanKindInternal))

config := s.Get{{ .Name }}Configuration()
reply, err2 := natsnodev1.Bound.MultiplexCommandSync(handlerCtx, spec, &natsnodev1.SpecCommand{
Request:        req.Msg,
Stream:         config.StreamType,
Procedure:     config.Procedure,
CommandName:   "",
CommandTopic:   config.Topic,
EntityTypeName: config.Entity.TypeName(),
})
if err2 != nil {
log.Error(err2.Error())
return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
}

var dd {{ .Output.Name }}
err3 := proto.Unmarshal(reply.Data, &dd)
if err3 != nil {
log.Error(err3.Error())
return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
}

handlerSpan.End()

return connect.NewResponse(&dd), nil

}
