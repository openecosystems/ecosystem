package v2

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"strconv"
	"sync"
	"unicode"

	"libs/private/go/server/v2alpha"
	"github.com/smallstep/certificates/ca"
)

type PkiBinding struct {
	Provisioner *ca.Provisioner
}

var (
	pkiInstance    *PkiBinding
	PkiBindingName = "PKI_BINDING"
)

func (b *PkiBinding) Name() string {
	return PkiBindingName
}

func (b *PkiBinding) Validate(_ context.Context, _ *sdkv2alphalib.Configuration, _ *Bindings) error {

	return nil
}

func (b *PkiBinding) Bind(_ context.Context, config *sdkv2alphalib.Configuration, bindings *Bindings) *Bindings {

	if pkiInstance == nil {
		var once sync.Once
		once.Do(
			func() {
				var password []byte
				passwordFilePath := config.Pki.Provisioner.ProvisionerPasswordFilePath
				if passwordFilePath == "" {
					panic("error reading provisioner password file " + passwordFilePath)
				}

				password, err := ioutil.ReadFile(passwordFilePath)
				if err != nil {
					panic("error reading provisioner password file " + passwordFilePath)
				}

				password = bytes.TrimRightFunc(password, unicode.IsSpace)

				provisioner, err := ca.NewProvisioner(
					config.Pki.Provisioner.Name,
					config.Pki.Provisioner.Kid,
					"https://"+config.Pki.Hostname+":"+strconv.Itoa(config.Pki.Port),
					password,
					ca.WithRootSHA256(config.Pki.Fingerprint),
				)
				if err != nil {
					fmt.Println("Could not connect to PKI...", err)
					panic(err)
				}

				pkiInstance = &PkiBinding{
					Provisioner: provisioner,
				}
				bindings.Pki = pkiInstance
			})
	} else {
		bindings.Pki = pkiInstance
		fmt.Println("Pki already bound")
	}

	return bindings
}

func (b *PkiBinding) GetBinding() interface{} {
	return pkiInstance
}

func (b *PkiBinding) Close() error {

	fmt.Println("Shutting down pki")
	//go b.Client.Close()
	return nil

}
