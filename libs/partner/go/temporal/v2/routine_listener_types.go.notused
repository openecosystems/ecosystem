package v2

import (
	"context"
	"fmt"
	optionsv2pb "libs/protobuf/go/protobuf/gen/platform/options/v2"
	"strings"

	"libs/protobuf/go/protobuf/gen/platform/spec/v2"
	specproto "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	"errors"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/anypb"
)

type SpecRoutineListenerType struct {
	EnumValueName string
	EnumValue     protoreflect.EnumValueDescriptor
	Message       protoreflect.MessageDescriptor
}
type SpecRoutineListenerTypeMap = map[string]*SpecRoutineListenerType

type SpecRoutineListenerTypes struct {
	EnumValueMap SpecRoutineListenerTypeMap
	MessageMap   SpecRoutineListenerTypeMap
}

func SnakeToLowerCamel(str string) string {
	parts := strings.Split(str, "_")
	if len(parts) == 0 {
		return ""
	}
	output := strings.ToLower(parts[0])
	for i := 1; i < len(parts); i++ {
		output += strings.Title(strings.ToLower(parts[i]))
	}
	return output
}

func createRoutineListenerTypes() SpecRoutineListenerTypes {
	routineListenerTypes := SpecRoutineListenerTypes{}
	routineListenerTypes.EnumValueMap = make(SpecRoutineListenerTypeMap)
	routineListenerTypes.MessageMap = make(SpecRoutineListenerTypeMap)
	protoregistry.GlobalFiles.RangeFiles(func(fileDescriptor protoreflect.FileDescriptor) bool {
		enums := fileDescriptor.Enums()
		nEnums := enums.Len()
		for enumIdx := 0; enumIdx < nEnums; enumIdx++ {
			enum := enums.Get(enumIdx)
			enumOptions := enum.Options()
			// Only consider SPEC_ENUM_TYPE_EVENTS Enums
			if !proto.HasExtension(enumOptions, optionsv2pb.E_Spec) {
				continue
			}
			specOptions := proto.GetExtension(enumOptions, optionsv2pb.E_Spec).(*optionsv2pb.SpecOptions)
			if specOptions.Type != optionsv2pb.SpecEnumType_SPEC_ENUM_TYPE_ROUTINE_LISTENERS {
				continue
			}
			values := enum.Values()
			nValues := values.Len()
			// Find billable Enum values
			for idx := 0; idx < nValues; idx++ {
				valueRef := values.Get(idx)
				valueName := string(valueRef.Name())
				_, ok := routineListenerTypes.EnumValueMap[valueName]
				if ok {
					panic(fmt.Sprintf("Duplicate enum value name: %s", valueName))
				}
				routineListenerTypes.EnumValueMap[valueName] = &SpecRoutineListenerType{
					EnumValueName: valueName,
					EnumValue:     valueRef,
				}
			}
		}

		messages := fileDescriptor.Messages()
		nMessages := messages.Len()
		for msgIdx := 0; msgIdx < nMessages; msgIdx++ {
			message := messages.Get(msgIdx)
			messageOptions := message.Options()
			// Only consider RoutineListener messages
			if proto.HasExtension(messageOptions, optionsv2pb.E_Routine) {
				routineOptions := proto.GetExtension(
					messageOptions,
					optionsv2pb.E_Routine,
				).(*optionsv2pb.RoutineOptions)
				listener, ok := routineListenerTypes.EnumValueMap[routineOptions.Listener]
				// If the key exists
				if !ok {
					panic(fmt.Sprintf("%s has unknown listener type %s", message.Name(), routineOptions.Listener))
				}
				listener.Message = message
				routineListenerTypes.EnumValueMap[routineOptions.Listener] = listener
				messageName := string(message.Name())
				_, ok = routineListenerTypes.MessageMap[messageName]
				if ok {
					panic(fmt.Sprintf("Duplicate message name: %s", messageName))
				}
				routineListenerTypes.MessageMap[messageName] = listener
			}
		}
		return true
	})

	return routineListenerTypes
}

func SetRoutineContextData(ctx context.Context, s *specproto.Spec, data proto.Message) error {
	var routineBinding = Bounds.Routine

	messageName := string(data.ProtoReflect().Descriptor().Name())

	routineListener, ok := routineBinding.RoutineListenerTypes.MessageMap[messageName]
	if !ok {
		return errors.NewSpecError(ctx, errors.SpecInternalError(), fmt.Sprintf("%s not a routine listener message", messageName))
	}

	key := string(routineListener.EnumValue.Name())
	any, err := anypb.New(data)
	if err != nil {
		msg := fmt.Sprintf("Error creating Any from data: %s", key)
		return errors.NewSpecError(ctx, errors.SpecInternalError(), msg)
	}
	if s.RoutineContext == nil {
		s.RoutineContext = &specv2pb.SpecRoutineContext{}
	}
	if s.RoutineContext.RoutineData == nil {
		s.RoutineContext.RoutineData = make(map[string]*anypb.Any)
	}
	s.RoutineContext.RoutineData[key] = any
	return nil
}

func GetRoutineContextData(ctx context.Context, s *specproto.Spec, data proto.Message) error {
	var routineBinding = Bounds.Routine

	messageName := string(data.ProtoReflect().Descriptor().Name())

	routineListener, ok := routineBinding.RoutineListenerTypes.MessageMap[messageName]
	if !ok {
		return errors.NewSpecError(ctx, errors.SpecInternalError(), fmt.Sprintf("%s not a routine listener message", messageName))
	}

	key := string(routineListener.EnumValue.Name())
	if s.RoutineContext == nil || s.RoutineContext.RoutineData == nil {
		msg := fmt.Sprintf("%s not in SpecRoutineContext", key)
		return errors.NewSpecError(ctx, errors.SpecInternalError(), msg)
	}
	any, ok := s.RoutineContext.RoutineData[key]
	if !ok {
		msg := fmt.Sprintf("%s not in SpecRoutineContext", key)
		return errors.NewSpecError(ctx, errors.SpecInternalError(), msg)
	}

	if any.MessageIs(data) {
		err := any.UnmarshalTo(data)
		if err != nil {
			err = errors.NewSpecError(ctx, errors.SpecInternalError(), err.Error())
		}
		return err
	}
	msg := fmt.Sprintf("Wrong type in RoutineContext")
	return errors.NewSpecError(ctx, errors.SpecInternalError(), msg)
}
