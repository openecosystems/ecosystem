package v2

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"
	"time"

	"github.com/camunda/zeebe/clients/go/v8/pkg/pb"
	"github.com/camunda/zeebe/clients/go/v8/pkg/zbc"
	specproto "libs/protobuf/go/protobuf/gen/platform/spec/v2"

	"libs/private/go/server/v2alpha"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/reflect/protoregistry"
)

type RoutineBinding struct {
	Client               zbc.Client
	SpecRoutineListeners []SpecRoutineListener
	RoutineListeners     map[string]*RoutineListener
	RoutineListenerErr   chan RoutineListenerErr
	RoutineListenerTypes SpecRoutineListenerTypes
}

var (
	routineInstance    *RoutineBinding
	RoutineBindingName = "ROUTINE_BINDING"
)

func (b *RoutineBinding) Name() string {
	return RoutineBindingName
}

func (b *RoutineBinding) Validate(_ context.Context, _ *sdkv2alphalib.Configuration, _ *Bindings) error {

	return nil
}

func (b *RoutineBinding) Bind(ctx context.Context, config *sdkv2alphalib.Configuration, bindings *Bindings) *Bindings {

	if routineInstance == nil {
		var once sync.Once
		once.Do(
			func() {

				routineListeners := make(map[string]*RoutineListener)

				_config := zbc.ClientConfig{UsePlaintextConnection: true, GatewayAddress: config.Routine.Hostname + ":" + strconv.Itoa(config.Routine.Port)}
				client, err := zbc.NewClient(&_config)
				if err != nil {
					panic(err)
				}

				b.RoutineListenerErr = make(chan RoutineListenerErr, len(b.SpecRoutineListeners))

				for _, specRoutineListener := range b.SpecRoutineListeners {

					configuration := specRoutineListener.GetConfiguration()

					routineListener, err := NewRoutineListener(ctx, config, &client, bindings, specRoutineListener, b.RoutineListenerErr)
					if err != nil {
						panic("Error setting up routine listener")
					}

					routineListener.Configuration = configuration

					go routineListener.Listen()

					routineListeners[configuration.ListenerType] = routineListener

					fmt.Println("Registered Routine Listener: " + routineListener.Configuration.ListenerName + " for type: " + routineListener.Configuration.ListenerType)

				}

				routineInstance = &RoutineBinding{
					Client:               client,
					SpecRoutineListeners: b.SpecRoutineListeners,
					RoutineListeners:     routineListeners,
					RoutineListenerTypes: createRoutineListenerTypes(),
				}

				bindings.Routine = routineInstance

			})
	} else {
		bindings.Routine = routineInstance
		fmt.Println("Routine already bound")
	}

	return bindings
}

func (b *RoutineBinding) GetBinding() interface{} {
	return routineInstance
}

func (b *RoutineBinding) Close() error {

	for key, routineListener := range b.RoutineListeners {
		fmt.Println("Shutting down routine listener: " + key)
		routineListener.Close()
	}

	return nil

}

func (b *RoutineBinding) DeployProcessDefinition(resourceFile string) *pb.ProcessMetadata {
	definition, err := os.ReadFile("resources/" + resourceFile)
	if err != nil {
		panic(err)
	}

	if b.Client == nil {
		panic("No zeebe client configured")
	}
	command := b.Client.NewDeployResourceCommand().AddResource(definition, resourceFile)

	ctx, cancelFn := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancelFn()

	resource, err := command.Send(ctx)
	if err != nil {
		panic(err)
	}

	if len(resource.GetDeployments()) < 0 {
		panic(errors.New("failed to deploy send-email model; nothing was deployed"))
	}

	deployment := resource.GetDeployments()[0]
	process := deployment.GetProcess()
	if process == nil {
		panic(errors.New("failed to deploy send-email process; the deployment was successful, but no process was returned"))
	}

	log.Printf("deployed BPMN process [%s] with key [%d]", process.GetBpmnProcessId(), process.GetProcessDefinitionKey())
	return process
}

func (b *RoutineBinding) StartProcessInstance(deployProcess *pb.ProcessMetadata, spec *specproto.Spec) *pb.CreateProcessInstanceResponse {

	bytes, err := protojson.MarshalOptions{
		AllowPartial: false,
		//DiscardUnknown: false,
		Resolver: protoregistry.GlobalTypes,
	}.Marshal(spec)
	var inInterface map[string]interface{}
	json.Unmarshal(bytes, &inInterface)

	command, err := b.Client.NewCreateInstanceCommand().
		BPMNProcessId(deployProcess.BpmnProcessId).
		LatestVersion().
		VariablesFromMap(inInterface)
	if err != nil {
		panic(fmt.Errorf("failed to create routine process instance command"))
	}

	ctx, cancelFn := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancelFn()

	process, err := command.Send(ctx)
	if err != nil {
		panic(err)
	}

	log.Printf("started process instance [%d]", process.GetProcessInstanceKey())
	return process
}
