package v2

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/nats-io/nats.go"
	"time"

	"github.com/camunda/zeebe/clients/go/v8/pkg/entities"
	"github.com/camunda/zeebe/clients/go/v8/pkg/worker"
	"github.com/camunda/zeebe/clients/go/v8/pkg/zbc"
	specproto "libs/protobuf/go/protobuf/gen/platform/spec/v2"

	"libs/private/go/server/v2alpha"
	"errors"
	log "github.com/sirupsen/logrus"
	//"go.opentelemetry.io/otel/attribute"
	//"go.opentelemetry.io/otel/trace"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/anypb"
)

type SpecRoutineListener interface {
	GetConfiguration() *RoutineListenerConfiguration
	Process(ctx context.Context, request *RoutineListenerMessage) (*anypb.Any, error)
}

type RoutineListener struct {
	JobWorker     *worker.JobWorker
	WorkerBuilder *worker.JobWorkerBuilderStep3
	Configuration *RoutineListenerConfiguration
}

type RoutineListenerConfiguration struct {
	ListenerType string
	ListenerName string
	StartOffset  int64
}

type RoutineListenerMessage struct {
	Bindings *Bindings
	SpecKey  *specproto.SpecKey
	Spec     *specproto.Spec
	Client   *worker.JobClient
	Job      *entities.Job
}

type RoutineListenerErr struct {
	Error        error
	Subscription *nats.Subscription
}

func NewRoutineListener(ctx context.Context, config *sdkv2alphalib.Configuration, client *zbc.Client, bindings *Bindings, listener SpecRoutineListener, listenerErr chan RoutineListenerErr) (*RoutineListener, error) {

	configuration := listener.GetConfiguration()

	_client := *client

	w := _client.NewJobWorker().
		JobType(configuration.ListenerType).
		Handler(handler(ctx, config, client, bindings, listener, listenerErr)).
		MaxJobsActive(10).
		RequestTimeout(10 * time.Second).
		PollInterval(1 * time.Second).
		Name(configuration.ListenerName)

	return &RoutineListener{
		WorkerBuilder: &w,
	}, nil
}

func (r RoutineListener) ValidateRoutineChannel() error {

	return nil
}

func (r RoutineListener) Listen() {
	builder := *r.WorkerBuilder
	w := builder.Open()

	defer w.AwaitClose()

}

func (r RoutineListener) Close() {

}

func convertToRoutineListenerMessage(bindings *Bindings, c *worker.JobClient, job *entities.Job) (context.Context, RoutineListenerMessage, error) {

	ctx := context.Background()

	s := &specproto.Spec{}

	jobVariables := job.GetVariables()
	err := protojson.UnmarshalOptions{
		AllowPartial:   false,
		DiscardUnknown: true,
		Resolver:       protoregistry.GlobalTypes,
	}.Unmarshal([]byte(jobVariables), s)
	if err != nil {
		log.Error(err.Error())
	}

	if bindings.Routine == nil {
		panic("Routine listener types not configured")
	}

	// Insert routine variables into Spec Routine Context
	var variableMap map[string]interface{}
	json.Unmarshal([]byte(jobVariables), &variableMap)

	for k, _ := range bindings.Routine.RoutineListenerTypes.EnumValueMap {
		if routineVariable, ok := variableMap[k]; ok {
			varJson, err := json.Marshal(routineVariable)
			if err != nil {
				log.Error(err.Error())
				continue
			}
			varAny := anypb.Any{}
			err = protojson.UnmarshalOptions{
				AllowPartial:   false,
				DiscardUnknown: false,
				Resolver:       protoregistry.GlobalTypes,
			}.Unmarshal([]byte(varJson), &varAny)
			if err != nil {
				log.Error(err.Error())
				continue
			}
			if s.RoutineContext == nil {
				s.RoutineContext = &specproto.SpecRoutineContext{
					RoutineId:   fmt.Sprintf("%d", job.ProcessInstanceKey),
					RoutineData: map[string]*anypb.Any{},
				}
			}
			s.RoutineContext.RoutineData[k] = &varAny
		}
	}
	// end Insert into Spec Routine Context

	//ctx = interceptor.DecorateContextWithSpec(ctx, *s)

	return ctx, RoutineListenerMessage{
		Bindings: bindings,
		Spec:     s,
		Client:   c,
		Job:      job,
	}, nil

}

func handler(ctx context.Context, config *sdkv2alphalib.Configuration, client *zbc.Client, bindings *Bindings, listener SpecRoutineListener, listenerErr chan RoutineListenerErr) func(c worker.JobClient, job entities.Job) {

	return func(c worker.JobClient, job entities.Job) {

		messageCtx, message, err := convertToRoutineListenerMessage(bindings, &c, &job)
		if err != nil {
			log.Error(errors.NewSpecError(ctx, errors.SpecInternalError(), "Could not convert to routine listener message").Error())
		}

		//messageCtx, parentSpan := bindings.Frontsight.Tracer.Start(ctx, "RoutineListener",
		//	trace.WithSpanKind(trace.SpanKindConsumer),
		//	trace.WithAttributes(attribute.String("rpc.system", "grpc")),
		//	trace.WithAttributes(attribute.String("net.transport", "IP.TCP")),
		//)

		_client := *client

		any, err := listener.Process(messageCtx, &message)
		if any != nil {
			if message.Spec.RoutineContext == nil {
				message.Spec.RoutineContext = &specproto.SpecRoutineContext{
					RoutineId:   fmt.Sprintf("%d", job.ProcessInstanceKey),
					RoutineData: map[string]*anypb.Any{},
				}
			}
			message.Spec.RoutineContext.RoutineData[job.Worker] = any
		}

		clientCtx, cancelFn := context.WithTimeout(messageCtx, 10*time.Second)
		defer cancelFn()

		errorRetry := func() {
			_, err = _client.NewFailJobCommand().JobKey(job.Key).Retries(1).ErrorMessage(err.Error()).Send(clientCtx)
			if err == nil {
				log.Printf("sent fail job command for key %d", job.Key)
			} else {
				log.Printf("failed to send fail job command with key %d: [%s]", job.Key, err.Error())
			}
		}
		if err != nil {
			log.Printf("error encountered in job with key %d: [%s]", job.Key, err.Error())
			errorRetry()
		}

		spec, err := protojson.Marshal(message.Spec)
		if err != nil {
			log.Printf("failed to marshal spec in job with key %d: [%s]", job.Key, err.Error())
			errorRetry()
		}

		// Flatten Spec Routine Context to first level of variable map
		var specMap map[string]interface{}
		json.Unmarshal([]byte(spec), &specMap)
		if routineContext, ok := specMap["routineContext"]; ok {
			if routineData, ok := routineContext.(map[string]interface{})["routineData"]; ok {
				for k, v := range routineData.(map[string]interface{}) {
					specMap[k] = v
				}
			}
		}
		delete(specMap, "routineContext")
		spec, err = json.Marshal(specMap)
		if err != nil {
			log.Printf("failed to marshal spec in job with key %d: [%s]", job.Key, err.Error())
			errorRetry()
		}
		// end Spec Routine Context transformation

		request, err := _client.NewCompleteJobCommand().JobKey(job.Key).VariablesFromString(string(spec))
		if err != nil {
			log.Printf("failed to create complete job command for key %d: [%s]", job.Key, err.Error())
			errorRetry()
		}
		_, err = request.Send(ctx)
		if err != nil {
			log.Printf("failed to send complete job command for key %d: [%s]", job.Key, err.Error())
			errorRetry()
		}

		log.Printf("completed job %d successfully", job.Key)

		//parentSpan.End()

	}
}
