package binding

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"google.golang.org/grpc"

	"github.com/authzed/grpcutil"

	"libs/private/go/server/v2alpha"
	common "libs/private/go/server/v2alpha"
)

type AuthzedConfiguration struct {
	Authzed struct {
		Hostname string `yaml:"hostname,omitempty" validate:"required"`
		Port     int    `yaml:"port,omitempty" validate:"required"`
		Token    string `yaml:"token,omitempty" validate:"required"`
		Insecure bool   `yaml:"insecure,omitempty"`
	} `yaml:"authzed,omitempty"`
}

type AuthzedBinding struct {
	Client *authzed.Client
}

var (
	authzedInstance *AuthzedBinding
	AuthzedBindingName = "AUTHZED_BINDING"
)

func (b *AuthzedBinding) Name() string {
  return AuthzedBindingName
}

func (b *AuthzedBinding) Validate(_ context.Context, c *sdkv2alphalib.Configuration, _ *Bindings) error {
	var authzedConfig AuthzedConfiguration
	common.Resolve(&authzedConfig)

	if authzedConfig.Authzed.Hostname == "" {
		return errors.New("Missing hostname in authzed configuration")
	}
	if authzedConfig.Authzed.Port == 0 {
		return errors.New("Missing port in authzed configuration")
	}
	if authzedConfig.Authzed.Token == "" {
		return errors.New("Missing token in authzed configuration")
	}
	return nil
}

func (b *AuthzedBinding) Bind(ctx context.Context, c *sdkv2alphalib.Configuration, bindings *Bindings) *Bindings {

	var once sync.Once
	if authzedInstance == nil {
		once.Do(
			func() {
				var authzedConfig AuthzedConfiguration
				common.Resolve(&authzedConfig)
				url := fmt.Sprintf("%s:%d", authzedConfig.Authzed.Hostname, authzedConfig.Authzed.Port)
				token := authzedConfig.Authzed.Token
				caOpt, err := grpcutil.WithSystemCerts(grpcutil.VerifyCA)
				if err != nil {
					fmt.Println("Could not load system certs for authzed connection...")
					panic(err)
				}
				opts := []grpc.DialOption{
					grpcutil.WithBearerToken(token),
					caOpt,
				}
				if authzedConfig.Authzed.Insecure {
					opts = []grpc.DialOption{
						grpc.WithInsecure(),
						grpcutil.WithInsecureBearerToken(token),
					}
				}

				client, err := authzed.NewClient(url, opts...)
				if err != nil {
					fmt.Println("Could not connect to Authzed...")
					fmt.Println(err)
					panic(err)
				}
				authzedInstance = &AuthzedBinding{
					Client: client,
				}
				bindings.Authzed = authzedInstance
			})
	} else {
		bindings.Authzed = authzedInstance
		fmt.Println("Authzed already bound")
	}

	return bindings
}

func (b *AuthzedBinding) GetBinding() interface{} {
	return authzedInstance
}

func (b *AuthzedBinding) Close() error {

	fmt.Println("Shutting down Authzed")

	return nil
}
