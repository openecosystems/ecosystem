package opentelemetryv1

import (
	"context"
	"fmt"
	"sync"

	grpc_zap "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
	grpc_recovery "github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
	"libs/private/go/server/v2alpha"
	//"github.com/lightstep/otel-launcher-go/launcher"
	"github.com/prometheus/client_golang/prometheus"
	//"go.opentelemetry.io/otel"
	//"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Wrapper for coercing a zap.Logger to the interface expected by Lightstep
type LightstepLogger struct {
	*zap.Logger
}

func (l *LightstepLogger) Fatalf(format string, v ...interface{}) {
	l.Fatal(fmt.Sprintf(format, v...))
}

func (l *LightstepLogger) Debugf(format string, v ...interface{}) {
	l.Debug(fmt.Sprintf(format, v...))
}

type FrontsightBinding struct {
	//Logger *log.Logger
	Logger *zap.Logger
	//Tracer  *lightstep.Tracer
	//Tracer  trace.Tracer
	Metrics Metrics
}

type Metrics struct {
	Registry      *prometheus.Registry
	ServerMetrics *grpc_prometheus.ServerMetrics
}

var (
	frontsightInstance    *FrontsightBinding
	FrontsightBindingName = "FRONTSIGHT_BINDING"

	FrontsightRecoveryOptions []grpc_recovery.Option = []grpc_recovery.Option{
		grpc_recovery.WithRecoveryHandler(recoverFromPanic),
	}

	//lightstep launcher.Launcher
)

func (b *FrontsightBinding) Name() string {
	return FrontsightBindingName
}

func (b *FrontsightBinding) Validate(_ context.Context, _ *sdkv2alphalib.Configuration, _ *Bindings) error {

	return nil
}

func (b *FrontsightBinding) Bind(ctx context.Context, config *sdkv2alphalib.Configuration, bindings *Bindings) *Bindings {

	var once sync.Once
	if bindings.Frontsight == nil {

		once.Do(
			func() {
				logger, err := b.configureLoggerTransport(ctx, config)
				if err != nil {
					fmt.Println("Could not configure Frontsight logger transport")
					fmt.Println(err)
					panic(err)
				}

				//tracer, err := b.configureTracerTransport(ctx, config)
				_, err = b.configureTracerTransport(ctx, config)
				if err != nil {
					fmt.Println("Could not configure Frontsight Tracer transport")
					fmt.Println(err)
					panic(err)
				}

				metrics, err := b.configureMetricsTransport(ctx, config)
				if err != nil {
					fmt.Println("Could not configure Frontsight Metrics transport")
					fmt.Println(err)
					panic(err)
				}

				frontsightInstance = &FrontsightBinding{
					Logger: logger,
					//Tracer:  tracer,
					Metrics: metrics,
				}

				bindings.Frontsight = frontsightInstance
			})
	} else {
		bindings.Frontsight = frontsightInstance
		fmt.Println("Frontsight already bound")
	}

	return bindings
}

func (b *FrontsightBinding) GetBinding() interface{} {
	return frontsightInstance
}

func (b *FrontsightBinding) Close() error {

	fmt.Println("Shutting down frontsight")
	//lightstep.Shutdown()

	return nil
}

func (b *FrontsightBinding) configureLoggerTransport(_ context.Context, config *sdkv2alphalib.Configuration) (*zap.Logger, error) {

	var err error
	b.Logger, err = config.Zap.Build()
	if err != nil {
		return nil, err
	}

	defer b.Logger.Sync()

	// Make sure that log statements internal to gRPC library are logged using the zapLogger as well.
	grpc_zap.ReplaceGrpcLoggerV2(b.Logger)

	return b.Logger, nil
}

// func (b *FrontsightBinding) configureTracerTransport(_ context.Context, config *sdkv2alphalib.Configuration) (trace.Tracer, error) {
func (b *FrontsightBinding) configureTracerTransport(_ context.Context, config *sdkv2alphalib.Configuration) (string, error) {

	attributes := map[string]string{}
	attributes["instrumentation.version"] = config.App.Version

	// See https://github.com/lightstep/otel-launcher-go#configuration-options
	// for an explanation of configuration options via environment variable
	//lightstep = launcher.ConfigureOpentelemetry(
	//	launcher.WithServiceName(config.App.Name),
	//	launcher.WithServiceVersion(config.App.Version),
	//	launcher.WithMetricsEnabled(false),
	//	launcher.WithResourceAttributes(attributes),
	//	launcher.WithLogger(&LightstepLogger{b.Logger}),
	//)

	//tracer := otel.Tracer("frontsight")
	//tracer, _ := otlptrace.New(nil,nil)

	return "", nil

}

func (b *FrontsightBinding) configureMetricsTransport(_ context.Context, config *sdkv2alphalib.Configuration) (Metrics, error) {

	registry := prometheus.NewRegistry()

	serverMetrics := grpc_prometheus.NewServerMetrics()

	// Register Custom metrics here

	registry.MustRegister(serverMetrics)

	metrics := Metrics{
		Registry:      registry,
		ServerMetrics: serverMetrics,
	}

	return metrics, nil

}

func recoverFromPanic(p interface{}) (err error) {
	return status.Errorf(codes.Unknown, "Internal error: %v", p)
}
