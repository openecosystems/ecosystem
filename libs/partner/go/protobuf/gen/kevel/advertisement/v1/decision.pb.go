// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: kevel/advertisement/v1/decision.proto

package advertisementv1pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DecisionCommands int32

const (
	DecisionCommands_DECISION_COMMANDS_UNSPECIFIED DecisionCommands = 0
	DecisionCommands_DECISION_COMMANDS_OPT_OUT     DecisionCommands = 1
)

// Enum value maps for DecisionCommands.
var (
	DecisionCommands_name = map[int32]string{
		0: "DECISION_COMMANDS_UNSPECIFIED",
		1: "DECISION_COMMANDS_OPT_OUT",
	}
	DecisionCommands_value = map[string]int32{
		"DECISION_COMMANDS_UNSPECIFIED": 0,
		"DECISION_COMMANDS_OPT_OUT":     1,
	}
)

func (x DecisionCommands) Enum() *DecisionCommands {
	p := new(DecisionCommands)
	*p = x
	return p
}

func (x DecisionCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecisionCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_kevel_advertisement_v1_decision_proto_enumTypes[0].Descriptor()
}

func (DecisionCommands) Type() protoreflect.EnumType {
	return &file_kevel_advertisement_v1_decision_proto_enumTypes[0]
}

func (x DecisionCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecisionCommands.Descriptor instead.
func (DecisionCommands) EnumDescriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{0}
}

type DecisionEvents int32

const (
	DecisionEvents_DECISION_EVENTS_UNSPECIFIED DecisionEvents = 0
	DecisionEvents_DECISION_EVENTS_OPTED_OUT   DecisionEvents = 1
)

// Enum value maps for DecisionEvents.
var (
	DecisionEvents_name = map[int32]string{
		0: "DECISION_EVENTS_UNSPECIFIED",
		1: "DECISION_EVENTS_OPTED_OUT",
	}
	DecisionEvents_value = map[string]int32{
		"DECISION_EVENTS_UNSPECIFIED": 0,
		"DECISION_EVENTS_OPTED_OUT":   1,
	}
)

func (x DecisionEvents) Enum() *DecisionEvents {
	p := new(DecisionEvents)
	*p = x
	return p
}

func (x DecisionEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecisionEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_kevel_advertisement_v1_decision_proto_enumTypes[1].Descriptor()
}

func (DecisionEvents) Type() protoreflect.EnumType {
	return &file_kevel_advertisement_v1_decision_proto_enumTypes[1]
}

func (x DecisionEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecisionEvents.Descriptor instead.
func (DecisionEvents) EnumDescriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{1}
}

type Consent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Consent) Reset() {
	*x = Consent{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consent) ProtoMessage() {}

func (x *Consent) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consent.ProtoReflect.Descriptor instead.
func (*Consent) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{0}
}

type DecisionRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Placements           []*Placement           `protobuf:"bytes,1,rep,name=placements,proto3" json:"placements,omitempty"`
	User                 *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Keywords             []string               `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Url                  string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Referrer             string                 `protobuf:"bytes,5,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Ip                   string                 `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	BlockedCreatives     []int64                `protobuf:"varint,7,rep,packed,name=blocked_creatives,json=blockedCreatives,proto3" json:"blocked_creatives,omitempty"`
	IsMobile             bool                   `protobuf:"varint,8,opt,name=is_mobile,json=isMobile,proto3" json:"is_mobile,omitempty"`
	IncludePricingData   bool                   `protobuf:"varint,9,opt,name=include_pricing_data,json=includePricingData,proto3" json:"include_pricing_data,omitempty"`
	Notrack              bool                   `protobuf:"varint,10,opt,name=notrack,proto3" json:"notrack,omitempty"`
	EnableBotFiltering   bool                   `protobuf:"varint,11,opt,name=enable_bot_filtering,json=enableBotFiltering,proto3" json:"enable_bot_filtering,omitempty"`
	EnableUserDbip       bool                   `protobuf:"varint,12,opt,name=enable_user_dbip,json=enableUserDbip,proto3" json:"enable_user_dbip,omitempty"`
	Consent              *Consent               `protobuf:"bytes,13,opt,name=consent,proto3" json:"consent,omitempty"`
	DeviceId             string                 `protobuf:"bytes,14,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Parallel             bool                   `protobuf:"varint,15,opt,name=parallel,proto3" json:"parallel,omitempty"`
	IntendedLatitude     float32                `protobuf:"fixed32,16,opt,name=intended_latitude,json=intendedLatitude,proto3" json:"intended_latitude,omitempty"`
	IntendedLongitude    float32                `protobuf:"fixed32,17,opt,name=intended_longitude,json=intendedLongitude,proto3" json:"intended_longitude,omitempty"`
	Radius               float32                `protobuf:"fixed32,18,opt,name=radius,proto3" json:"radius,omitempty"`
	IncludeMatchedPoints bool                   `protobuf:"varint,19,opt,name=include_matched_points,json=includeMatchedPoints,proto3" json:"include_matched_points,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DecisionRequest) Reset() {
	*x = DecisionRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionRequest) ProtoMessage() {}

func (x *DecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionRequest.ProtoReflect.Descriptor instead.
func (*DecisionRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{1}
}

func (x *DecisionRequest) GetPlacements() []*Placement {
	if x != nil {
		return x.Placements
	}
	return nil
}

func (x *DecisionRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DecisionRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *DecisionRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DecisionRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *DecisionRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DecisionRequest) GetBlockedCreatives() []int64 {
	if x != nil {
		return x.BlockedCreatives
	}
	return nil
}

func (x *DecisionRequest) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

func (x *DecisionRequest) GetIncludePricingData() bool {
	if x != nil {
		return x.IncludePricingData
	}
	return false
}

func (x *DecisionRequest) GetNotrack() bool {
	if x != nil {
		return x.Notrack
	}
	return false
}

func (x *DecisionRequest) GetEnableBotFiltering() bool {
	if x != nil {
		return x.EnableBotFiltering
	}
	return false
}

func (x *DecisionRequest) GetEnableUserDbip() bool {
	if x != nil {
		return x.EnableUserDbip
	}
	return false
}

func (x *DecisionRequest) GetConsent() *Consent {
	if x != nil {
		return x.Consent
	}
	return nil
}

func (x *DecisionRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DecisionRequest) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

func (x *DecisionRequest) GetIntendedLatitude() float32 {
	if x != nil {
		return x.IntendedLatitude
	}
	return 0
}

func (x *DecisionRequest) GetIntendedLongitude() float32 {
	if x != nil {
		return x.IntendedLongitude
	}
	return 0
}

func (x *DecisionRequest) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *DecisionRequest) GetIncludeMatchedPoints() bool {
	if x != nil {
		return x.IncludeMatchedPoints
	}
	return false
}

type Properties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Properties) Reset() {
	*x = Properties{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Properties) ProtoMessage() {}

func (x *Properties) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Properties.ProtoReflect.Descriptor instead.
func (*Properties) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{2}
}

type Overrides struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Overrides) Reset() {
	*x = Overrides{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overrides) ProtoMessage() {}

func (x *Overrides) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overrides.ProtoReflect.Descriptor instead.
func (*Overrides) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{3}
}

type ContentKeys struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AdditionalProperties map[string]string      `protobuf:"bytes,1,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ContentKeys) Reset() {
	*x = ContentKeys{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentKeys) ProtoMessage() {}

func (x *ContentKeys) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentKeys.ProtoReflect.Descriptor instead.
func (*ContentKeys) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{4}
}

func (x *ContentKeys) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type AdQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdQuery) Reset() {
	*x = AdQuery{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdQuery) ProtoMessage() {}

func (x *AdQuery) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdQuery.ProtoReflect.Descriptor instead.
func (*AdQuery) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{5}
}

type Placement struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DivName         string                 `protobuf:"bytes,1,opt,name=div_name,json=divName,proto3" json:"div_name,omitempty"`
	NetworkId       int32                  `protobuf:"varint,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	SiteId          int32                  `protobuf:"varint,3,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	AdTypes         []int64                `protobuf:"varint,4,rep,packed,name=ad_types,json=adTypes,proto3" json:"ad_types,omitempty"`
	ZoneIds         []int64                `protobuf:"varint,5,rep,packed,name=zone_ids,json=zoneIds,proto3" json:"zone_ids,omitempty"`
	CampaignId      int32                  `protobuf:"varint,6,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	FlightId        int32                  `protobuf:"varint,7,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
	AdId            int32                  `protobuf:"varint,8,opt,name=ad_id,json=adId,proto3" json:"ad_id,omitempty"`
	ClickUrl        string                 `protobuf:"bytes,9,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	Properties      *Properties            `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
	EventIds        []int64                `protobuf:"varint,11,rep,packed,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	Overrides       *Overrides             `protobuf:"bytes,12,opt,name=overrides,proto3" json:"overrides,omitempty"`
	ContentKeys     *ContentKeys           `protobuf:"bytes,13,opt,name=content_keys,json=contentKeys,proto3" json:"content_keys,omitempty"`
	Count           int32                  `protobuf:"varint,14,opt,name=count,proto3" json:"count,omitempty"`
	Proportionality bool                   `protobuf:"varint,15,opt,name=proportionality,proto3" json:"proportionality,omitempty"`
	EcpmPartition   string                 `protobuf:"bytes,16,opt,name=ecpm_partition,json=ecpmPartition,proto3" json:"ecpm_partition,omitempty"`
	EcpmPartitions  []string               `protobuf:"bytes,17,rep,name=ecpm_partitions,json=ecpmPartitions,proto3" json:"ecpm_partitions,omitempty"`
	EventMultiplier int32                  `protobuf:"varint,18,opt,name=event_multiplier,json=eventMultiplier,proto3" json:"event_multiplier,omitempty"`
	SkipSelection   bool                   `protobuf:"varint,19,opt,name=skip_selection,json=skipSelection,proto3" json:"skip_selection,omitempty"`
	AdQuery         *AdQuery               `protobuf:"bytes,20,opt,name=ad_query,json=adQuery,proto3" json:"ad_query,omitempty"`
	FloorPrice      float32                `protobuf:"fixed32,21,opt,name=floor_price,json=floorPrice,proto3" json:"floor_price,omitempty"`
	FloorCpc        float32                `protobuf:"fixed32,22,opt,name=floor_cpc,json=floorCpc,proto3" json:"floor_cpc,omitempty"`
	SkipFilters     *SkipFilters           `protobuf:"bytes,23,opt,name=skip_filters,json=skipFilters,proto3" json:"skip_filters,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Placement) Reset() {
	*x = Placement{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement) ProtoMessage() {}

func (x *Placement) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement.ProtoReflect.Descriptor instead.
func (*Placement) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{6}
}

func (x *Placement) GetDivName() string {
	if x != nil {
		return x.DivName
	}
	return ""
}

func (x *Placement) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *Placement) GetSiteId() int32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *Placement) GetAdTypes() []int64 {
	if x != nil {
		return x.AdTypes
	}
	return nil
}

func (x *Placement) GetZoneIds() []int64 {
	if x != nil {
		return x.ZoneIds
	}
	return nil
}

func (x *Placement) GetCampaignId() int32 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *Placement) GetFlightId() int32 {
	if x != nil {
		return x.FlightId
	}
	return 0
}

func (x *Placement) GetAdId() int32 {
	if x != nil {
		return x.AdId
	}
	return 0
}

func (x *Placement) GetClickUrl() string {
	if x != nil {
		return x.ClickUrl
	}
	return ""
}

func (x *Placement) GetProperties() *Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Placement) GetEventIds() []int64 {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *Placement) GetOverrides() *Overrides {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *Placement) GetContentKeys() *ContentKeys {
	if x != nil {
		return x.ContentKeys
	}
	return nil
}

func (x *Placement) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Placement) GetProportionality() bool {
	if x != nil {
		return x.Proportionality
	}
	return false
}

func (x *Placement) GetEcpmPartition() string {
	if x != nil {
		return x.EcpmPartition
	}
	return ""
}

func (x *Placement) GetEcpmPartitions() []string {
	if x != nil {
		return x.EcpmPartitions
	}
	return nil
}

func (x *Placement) GetEventMultiplier() int32 {
	if x != nil {
		return x.EventMultiplier
	}
	return 0
}

func (x *Placement) GetSkipSelection() bool {
	if x != nil {
		return x.SkipSelection
	}
	return false
}

func (x *Placement) GetAdQuery() *AdQuery {
	if x != nil {
		return x.AdQuery
	}
	return nil
}

func (x *Placement) GetFloorPrice() float32 {
	if x != nil {
		return x.FloorPrice
	}
	return 0
}

func (x *Placement) GetFloorCpc() float32 {
	if x != nil {
		return x.FloorCpc
	}
	return 0
}

func (x *Placement) GetSkipFilters() *SkipFilters {
	if x != nil {
		return x.SkipFilters
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{7}
}

func (x *User) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Decision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AdId          int64                  `protobuf:"varint,1,opt,name=ad_id,json=adId,proto3" json:"ad_id,omitempty"`
	AdvertiserId  int64                  `protobuf:"varint,2,opt,name=advertiser_id,json=advertiserId,proto3" json:"advertiser_id,omitempty"`
	CreativeId    int64                  `protobuf:"varint,3,opt,name=creative_id,json=creativeId,proto3" json:"creative_id,omitempty"`
	FlightId      int64                  `protobuf:"varint,4,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
	CampaignId    int64                  `protobuf:"varint,5,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	PriorityId    int64                  `protobuf:"varint,6,opt,name=priority_id,json=priorityId,proto3" json:"priority_id,omitempty"`
	ClickUrl      string                 `protobuf:"bytes,7,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	Contents      []*Content             `protobuf:"bytes,8,rep,name=contents,proto3" json:"contents,omitempty"`
	ImpressionUrl string                 `protobuf:"bytes,9,opt,name=impression_url,json=impressionUrl,proto3" json:"impression_url,omitempty"`
	Events        []*Event               `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	MatchedPoints []*MatchedPoint        `protobuf:"bytes,11,rep,name=matched_points,json=matchedPoints,proto3" json:"matched_points,omitempty"`
	Pricing       *PricingData           `protobuf:"bytes,12,opt,name=pricing,proto3" json:"pricing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decision) Reset() {
	*x = Decision{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{8}
}

func (x *Decision) GetAdId() int64 {
	if x != nil {
		return x.AdId
	}
	return 0
}

func (x *Decision) GetAdvertiserId() int64 {
	if x != nil {
		return x.AdvertiserId
	}
	return 0
}

func (x *Decision) GetCreativeId() int64 {
	if x != nil {
		return x.CreativeId
	}
	return 0
}

func (x *Decision) GetFlightId() int64 {
	if x != nil {
		return x.FlightId
	}
	return 0
}

func (x *Decision) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *Decision) GetPriorityId() int64 {
	if x != nil {
		return x.PriorityId
	}
	return 0
}

func (x *Decision) GetClickUrl() string {
	if x != nil {
		return x.ClickUrl
	}
	return ""
}

func (x *Decision) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *Decision) GetImpressionUrl() string {
	if x != nil {
		return x.ImpressionUrl
	}
	return ""
}

func (x *Decision) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Decision) GetMatchedPoints() []*MatchedPoint {
	if x != nil {
		return x.MatchedPoints
	}
	return nil
}

func (x *Decision) GetPricing() *PricingData {
	if x != nil {
		return x.Pricing
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{9}
}

func (x *Event) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{10}
}

type Content struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Template       string                 `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	CustomTemplate string                 `protobuf:"bytes,3,opt,name=custom_template,json=customTemplate,proto3" json:"custom_template,omitempty"`
	Data           *Data                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Body           string                 `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{11}
}

func (x *Content) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Content) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *Content) GetCustomTemplate() string {
	if x != nil {
		return x.CustomTemplate
	}
	return ""
}

func (x *Content) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Content) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type PricingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float32                `protobuf:"fixed32,1,opt,name=price,proto3" json:"price,omitempty"`
	ClearPrice    float32                `protobuf:"fixed32,2,opt,name=clear_price,json=clearPrice,proto3" json:"clear_price,omitempty"`
	Revenue       float32                `protobuf:"fixed32,3,opt,name=revenue,proto3" json:"revenue,omitempty"`
	RateType      int64                  `protobuf:"varint,4,opt,name=rate_type,json=rateType,proto3" json:"rate_type,omitempty"`
	ECpm          float32                `protobuf:"fixed32,5,opt,name=e_cpm,json=eCpm,proto3" json:"e_cpm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PricingData) Reset() {
	*x = PricingData{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PricingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PricingData) ProtoMessage() {}

func (x *PricingData) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PricingData.ProtoReflect.Descriptor instead.
func (*PricingData) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{12}
}

func (x *PricingData) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PricingData) GetClearPrice() float32 {
	if x != nil {
		return x.ClearPrice
	}
	return 0
}

func (x *PricingData) GetRevenue() float32 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *PricingData) GetRateType() int64 {
	if x != nil {
		return x.RateType
	}
	return 0
}

func (x *PricingData) GetECpm() float32 {
	if x != nil {
		return x.ECpm
	}
	return 0
}

type Decisions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decisions) Reset() {
	*x = Decisions{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decisions) ProtoMessage() {}

func (x *Decisions) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decisions.ProtoReflect.Descriptor instead.
func (*Decisions) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{13}
}

type Explain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Explain) Reset() {
	*x = Explain{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Explain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Explain) ProtoMessage() {}

func (x *Explain) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Explain.ProtoReflect.Descriptor instead.
func (*Explain) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{14}
}

type GetDecisionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	User          *User                   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Decisions     *Decisions              `protobuf:"bytes,3,opt,name=decisions,proto3" json:"decisions,omitempty"`
	Explain       *Explain                `protobuf:"bytes,4,opt,name=explain,proto3" json:"explain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDecisionsResponse) Reset() {
	*x = GetDecisionsResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDecisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecisionsResponse) ProtoMessage() {}

func (x *GetDecisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecisionsResponse.ProtoReflect.Descriptor instead.
func (*GetDecisionsResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{15}
}

func (x *GetDecisionsResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *GetDecisionsResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetDecisionsResponse) GetDecisions() *Decisions {
	if x != nil {
		return x.Decisions
	}
	return nil
}

func (x *GetDecisionsResponse) GetExplain() *Explain {
	if x != nil {
		return x.Explain
	}
	return nil
}

type ConsentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserKey       string                 `protobuf:"bytes,1,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	Consent       *Consent               `protobuf:"bytes,2,opt,name=consent,proto3" json:"consent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentRequest) Reset() {
	*x = ConsentRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentRequest) ProtoMessage() {}

func (x *ConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentRequest.ProtoReflect.Descriptor instead.
func (*ConsentRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{16}
}

func (x *ConsentRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *ConsentRequest) GetConsent() *Consent {
	if x != nil {
		return x.Consent
	}
	return nil
}

type MatchedPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lat           string                 `protobuf:"bytes,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon           string                 `protobuf:"bytes,2,opt,name=lon,proto3" json:"lon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchedPoint) Reset() {
	*x = MatchedPoint{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedPoint) ProtoMessage() {}

func (x *MatchedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedPoint.ProtoReflect.Descriptor instead.
func (*MatchedPoint) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{17}
}

func (x *MatchedPoint) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *MatchedPoint) GetLon() string {
	if x != nil {
		return x.Lon
	}
	return ""
}

type GeoDistanceSkipFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoDistanceSkipFilter) Reset() {
	*x = GeoDistanceSkipFilter{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoDistanceSkipFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoDistanceSkipFilter) ProtoMessage() {}

func (x *GeoDistanceSkipFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoDistanceSkipFilter.ProtoReflect.Descriptor instead.
func (*GeoDistanceSkipFilter) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{18}
}

func (x *GeoDistanceSkipFilter) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type GeoLocationSkipFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoLocationSkipFilter) Reset() {
	*x = GeoLocationSkipFilter{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoLocationSkipFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocationSkipFilter) ProtoMessage() {}

func (x *GeoLocationSkipFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocationSkipFilter.ProtoReflect.Descriptor instead.
func (*GeoLocationSkipFilter) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{19}
}

func (x *GeoLocationSkipFilter) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type SkipFilters struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Distance       *GeoDistanceSkipFilter `protobuf:"bytes,1,opt,name=distance,proto3" json:"distance,omitempty"`
	Facet          bool                   `protobuf:"varint,2,opt,name=facet,proto3" json:"facet,omitempty"`
	Geodistance    *GeoDistanceSkipFilter `protobuf:"bytes,3,opt,name=geodistance,proto3" json:"geodistance,omitempty"`
	Geolocation    *GeoLocationSkipFilter `protobuf:"bytes,4,opt,name=geolocation,proto3" json:"geolocation,omitempty"`
	Keyword        bool                   `protobuf:"varint,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Location       *GeoLocationSkipFilter `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	PlacementLimit bool                   `protobuf:"varint,7,opt,name=placement_limit,json=placementLimit,proto3" json:"placement_limit,omitempty"`
	SiteZone       bool                   `protobuf:"varint,8,opt,name=site_zone,json=siteZone,proto3" json:"site_zone,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SkipFilters) Reset() {
	*x = SkipFilters{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkipFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipFilters) ProtoMessage() {}

func (x *SkipFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipFilters.ProtoReflect.Descriptor instead.
func (*SkipFilters) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{20}
}

func (x *SkipFilters) GetDistance() *GeoDistanceSkipFilter {
	if x != nil {
		return x.Distance
	}
	return nil
}

func (x *SkipFilters) GetFacet() bool {
	if x != nil {
		return x.Facet
	}
	return false
}

func (x *SkipFilters) GetGeodistance() *GeoDistanceSkipFilter {
	if x != nil {
		return x.Geodistance
	}
	return nil
}

func (x *SkipFilters) GetGeolocation() *GeoLocationSkipFilter {
	if x != nil {
		return x.Geolocation
	}
	return nil
}

func (x *SkipFilters) GetKeyword() bool {
	if x != nil {
		return x.Keyword
	}
	return false
}

func (x *SkipFilters) GetLocation() *GeoLocationSkipFilter {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SkipFilters) GetPlacementLimit() bool {
	if x != nil {
		return x.PlacementLimit
	}
	return false
}

func (x *SkipFilters) GetSiteZone() bool {
	if x != nil {
		return x.SiteZone
	}
	return false
}

// GetDecisionsParameters holds parameters to GetDecisions
type GetDecisionsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DecisionRequest *DecisionRequest       `protobuf:"bytes,1,opt,name=decision_request,json=decisionRequest,proto3" json:"decision_request,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetDecisionsRequest) Reset() {
	*x = GetDecisionsRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDecisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecisionsRequest) ProtoMessage() {}

func (x *GetDecisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecisionsRequest.ProtoReflect.Descriptor instead.
func (*GetDecisionsRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{21}
}

func (x *GetDecisionsRequest) GetDecisionRequest() *DecisionRequest {
	if x != nil {
		return x.DecisionRequest
	}
	return nil
}

type AddCustomPropertiesRequestBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCustomPropertiesRequestBody) Reset() {
	*x = AddCustomPropertiesRequestBody{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCustomPropertiesRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomPropertiesRequestBody) ProtoMessage() {}

func (x *AddCustomPropertiesRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomPropertiesRequestBody.ProtoReflect.Descriptor instead.
func (*AddCustomPropertiesRequestBody) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{22}
}

// AddCustomPropertiesParameters holds parameters to AddCustomProperties
type AddCustomPropertiesRequest struct {
	state                          protoimpl.MessageState          `protogen:"open.v1"`
	NetworkId                      int32                           `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey                        string                          `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	AddCustomPropertiesRequestBody *AddCustomPropertiesRequestBody `protobuf:"bytes,3,opt,name=add_custom_properties_request_body,json=addCustomPropertiesRequestBody,proto3" json:"add_custom_properties_request_body,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *AddCustomPropertiesRequest) Reset() {
	*x = AddCustomPropertiesRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCustomPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomPropertiesRequest) ProtoMessage() {}

func (x *AddCustomPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomPropertiesRequest.ProtoReflect.Descriptor instead.
func (*AddCustomPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{23}
}

func (x *AddCustomPropertiesRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *AddCustomPropertiesRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *AddCustomPropertiesRequest) GetAddCustomPropertiesRequestBody() *AddCustomPropertiesRequestBody {
	if x != nil {
		return x.AddCustomPropertiesRequestBody
	}
	return nil
}

type AddCustomPropertiesResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCustomPropertiesResponse) Reset() {
	*x = AddCustomPropertiesResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCustomPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomPropertiesResponse) ProtoMessage() {}

func (x *AddCustomPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomPropertiesResponse.ProtoReflect.Descriptor instead.
func (*AddCustomPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{24}
}

func (x *AddCustomPropertiesResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

// AddInterestsParameters holds parameters to AddInterests
type AddInterestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey       string                 `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	Interest      string                 `protobuf:"bytes,3,opt,name=interest,proto3" json:"interest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInterestsRequest) Reset() {
	*x = AddInterestsRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInterestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInterestsRequest) ProtoMessage() {}

func (x *AddInterestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInterestsRequest.ProtoReflect.Descriptor instead.
func (*AddInterestsRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{25}
}

func (x *AddInterestsRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *AddInterestsRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *AddInterestsRequest) GetInterest() string {
	if x != nil {
		return x.Interest
	}
	return ""
}

type AddInterestsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInterestsResponse) Reset() {
	*x = AddInterestsResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInterestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInterestsResponse) ProtoMessage() {}

func (x *AddInterestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInterestsResponse.ProtoReflect.Descriptor instead.
func (*AddInterestsResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{26}
}

func (x *AddInterestsResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

// AddRetargetingSegmentParameters holds parameters to AddRetargetingSegment
type AddRetargetingSegmentRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NetworkId            int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	AdvertiserId         int32                  `protobuf:"varint,2,opt,name=advertiser_id,json=advertiserId,proto3" json:"advertiser_id,omitempty"`
	RetargetingSegmentId int32                  `protobuf:"varint,3,opt,name=retargeting_segment_id,json=retargetingSegmentId,proto3" json:"retargeting_segment_id,omitempty"`
	UserKey              string                 `protobuf:"bytes,4,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AddRetargetingSegmentRequest) Reset() {
	*x = AddRetargetingSegmentRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRetargetingSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRetargetingSegmentRequest) ProtoMessage() {}

func (x *AddRetargetingSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRetargetingSegmentRequest.ProtoReflect.Descriptor instead.
func (*AddRetargetingSegmentRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{27}
}

func (x *AddRetargetingSegmentRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *AddRetargetingSegmentRequest) GetAdvertiserId() int32 {
	if x != nil {
		return x.AdvertiserId
	}
	return 0
}

func (x *AddRetargetingSegmentRequest) GetRetargetingSegmentId() int32 {
	if x != nil {
		return x.RetargetingSegmentId
	}
	return 0
}

func (x *AddRetargetingSegmentRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

type AddRetargetingSegmentResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRetargetingSegmentResponse) Reset() {
	*x = AddRetargetingSegmentResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRetargetingSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRetargetingSegmentResponse) ProtoMessage() {}

func (x *AddRetargetingSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRetargetingSegmentResponse.ProtoReflect.Descriptor instead.
func (*AddRetargetingSegmentResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{28}
}

func (x *AddRetargetingSegmentResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

// OptOutParameters holds parameters to OptOut
type OptOutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey       string                 `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptOutRequest) Reset() {
	*x = OptOutRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptOutRequest) ProtoMessage() {}

func (x *OptOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptOutRequest.ProtoReflect.Descriptor instead.
func (*OptOutRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{29}
}

func (x *OptOutRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *OptOutRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

type OptOutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptOutResponse) Reset() {
	*x = OptOutResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptOutResponse) ProtoMessage() {}

func (x *OptOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptOutResponse.ProtoReflect.Descriptor instead.
func (*OptOutResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{30}
}

// ReadParameters holds parameters to Read
type ReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey       string                 `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{31}
}

func (x *ReadRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *ReadRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

type ReadResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{32}
}

func (x *ReadResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

// IpOverrideParameters holds parameters to IpOverride
type IpOverrideRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey       string                 `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	Ip            string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpOverrideRequest) Reset() {
	*x = IpOverrideRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpOverrideRequest) ProtoMessage() {}

func (x *IpOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpOverrideRequest.ProtoReflect.Descriptor instead.
func (*IpOverrideRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{33}
}

func (x *IpOverrideRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *IpOverrideRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *IpOverrideRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type IpOverrideResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpOverrideResponse) Reset() {
	*x = IpOverrideResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpOverrideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpOverrideResponse) ProtoMessage() {}

func (x *IpOverrideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpOverrideResponse.ProtoReflect.Descriptor instead.
func (*IpOverrideResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{34}
}

func (x *IpOverrideResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

// ForgetParameters holds parameters to Forget
type ForgetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey       string                 `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForgetRequest) Reset() {
	*x = ForgetRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgetRequest) ProtoMessage() {}

func (x *ForgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgetRequest.ProtoReflect.Descriptor instead.
func (*ForgetRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{35}
}

func (x *ForgetRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *ForgetRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

type ForgetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForgetResponse) Reset() {
	*x = ForgetResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgetResponse) ProtoMessage() {}

func (x *ForgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgetResponse.ProtoReflect.Descriptor instead.
func (*ForgetResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{36}
}

// GdprConsentParameters holds parameters to GdprConsent
type GdprConsentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NetworkId      int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	ConsentRequest *ConsentRequest        `protobuf:"bytes,2,opt,name=consent_request,json=consentRequest,proto3" json:"consent_request,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GdprConsentRequest) Reset() {
	*x = GdprConsentRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GdprConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GdprConsentRequest) ProtoMessage() {}

func (x *GdprConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GdprConsentRequest.ProtoReflect.Descriptor instead.
func (*GdprConsentRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{37}
}

func (x *GdprConsentRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *GdprConsentRequest) GetConsentRequest() *ConsentRequest {
	if x != nil {
		return x.ConsentRequest
	}
	return nil
}

type GdprConsentResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GdprConsentResponse) Reset() {
	*x = GdprConsentResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GdprConsentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GdprConsentResponse) ProtoMessage() {}

func (x *GdprConsentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GdprConsentResponse.ProtoReflect.Descriptor instead.
func (*GdprConsentResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{38}
}

func (x *GdprConsentResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

// MatchUserParameters holds parameters to MatchUser
type MatchUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UserKey       string                 `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	PartnerId     int32                  `protobuf:"varint,3,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	UserId        int32                  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchUserRequest) Reset() {
	*x = MatchUserRequest{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchUserRequest) ProtoMessage() {}

func (x *MatchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchUserRequest.ProtoReflect.Descriptor instead.
func (*MatchUserRequest) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{39}
}

func (x *MatchUserRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *MatchUserRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *MatchUserRequest) GetPartnerId() int32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *MatchUserRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MatchUserResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SpecContext   *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchUserResponse) Reset() {
	*x = MatchUserResponse{}
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchUserResponse) ProtoMessage() {}

func (x *MatchUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kevel_advertisement_v1_decision_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchUserResponse.ProtoReflect.Descriptor instead.
func (*MatchUserResponse) Descriptor() ([]byte, []int) {
	return file_kevel_advertisement_v1_decision_proto_rawDescGZIP(), []int{40}
}

func (x *MatchUserResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

var File_kevel_advertisement_v1_decision_proto protoreflect.FileDescriptor

var file_kevel_advertisement_v1_decision_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xf0,
	0x05, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6e, 0x6f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x62, 0x69, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x62, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x0b, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x72, 0x0a, 0x15,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x09, 0x0a, 0x07, 0x41, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x92, 0x07, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x63, 0x70, 0x6d, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x63, 0x70, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x63, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x63, 0x70, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x61, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x70,
	0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x70,
	0x63, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x73, 0x6b,
	0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x18, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x90, 0x04, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xca, 0xb7, 0x18, 0x02, 0x08, 0x01, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12,
	0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x29, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x5f, 0x63, 0x70, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x65, 0x43, 0x70, 0x6d, 0x22, 0x0b, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x22,
	0x8e, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x22, 0x66, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x15,
	0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x15, 0x47,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x0b, 0x53,
	0x6b, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x67,
	0x65, 0x6f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x67, 0x65, 0x6f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x69, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xdb, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x82,
	0x01, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x1e, 0x61, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x67, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6b, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x1c,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x72, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x22, 0x69, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x0d,
	0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x22, 0x58, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x0a, 0x11,
	0x49, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x5e, 0x0a, 0x12, 0x49,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x0d, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x64, 0x70,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5f, 0x0a, 0x13, 0x47, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x84, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2a, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x1a, 0x06, 0x92, 0xb8,
	0x18, 0x02, 0x08, 0x03, 0x2a, 0x58, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x43, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08, 0x04, 0x32, 0x8c,
	0x0d, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x07, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x12, 0xd4, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x6b, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6,
	0x18, 0x02, 0x08, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x18,
	0x2f, 0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6b, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02,
	0xaa, 0xb6, 0x18, 0x02, 0x08, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x75,
	0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x2e, 0x67, 0x69, 0x66, 0x12, 0xe1,
	0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18,
	0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f,
	0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x74, 0x2f, 0x7b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x2e, 0x67,
	0x69, 0x66, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x2e,
	0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0xa2, 0xb6,
	0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x0a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x70, 0x74, 0x6f, 0x75, 0x74, 0x2f, 0x69,
	0x2e, 0x67, 0x69, 0x66, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x23, 0x2e,
	0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02,
	0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x49, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x0a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x70, 0x2f, 0x69, 0x2e, 0x67,
	0x69, 0x66, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xa2, 0xb6,
	0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x04, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x47, 0x64, 0x70, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x64, 0x70,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02,
	0x08, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x2f, 0x75, 0x64, 0x62, 0x2f,
	0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x28, 0x2e, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xa2, 0xb6, 0x18, 0x06, 0x08, 0x02, 0x10,
	0x01, 0x18, 0x02, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x75, 0x64, 0x62, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x69, 0x2e, 0x67, 0x69, 0x66, 0x42, 0x8b, 0x01,
	0x82, 0xc4, 0x13, 0x02, 0x08, 0x02, 0x82, 0xb5, 0x18, 0x06, 0x08, 0x02, 0x10, 0x01, 0x18, 0x02,
	0x8a, 0xb5, 0x18, 0x1e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x03, 0x6a, 0x61, 0x6e, 0x28, 0x02,
	0x38, 0x01, 0x92, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x03, 0x06, 0x9a, 0xb5, 0x18, 0x02, 0x08, 0x01,
	0xa2, 0xb5, 0x18, 0x00, 0x5a, 0x45, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x6b, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kevel_advertisement_v1_decision_proto_rawDescOnce sync.Once
	file_kevel_advertisement_v1_decision_proto_rawDescData = file_kevel_advertisement_v1_decision_proto_rawDesc
)

func file_kevel_advertisement_v1_decision_proto_rawDescGZIP() []byte {
	file_kevel_advertisement_v1_decision_proto_rawDescOnce.Do(func() {
		file_kevel_advertisement_v1_decision_proto_rawDescData = protoimpl.X.CompressGZIP(file_kevel_advertisement_v1_decision_proto_rawDescData)
	})
	return file_kevel_advertisement_v1_decision_proto_rawDescData
}

var file_kevel_advertisement_v1_decision_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kevel_advertisement_v1_decision_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_kevel_advertisement_v1_decision_proto_goTypes = []any{
	(DecisionCommands)(0),                  // 0: kevel.advertisement.v1.DecisionCommands
	(DecisionEvents)(0),                    // 1: kevel.advertisement.v1.DecisionEvents
	(*Consent)(nil),                        // 2: kevel.advertisement.v1.Consent
	(*DecisionRequest)(nil),                // 3: kevel.advertisement.v1.DecisionRequest
	(*Properties)(nil),                     // 4: kevel.advertisement.v1.Properties
	(*Overrides)(nil),                      // 5: kevel.advertisement.v1.Overrides
	(*ContentKeys)(nil),                    // 6: kevel.advertisement.v1.ContentKeys
	(*AdQuery)(nil),                        // 7: kevel.advertisement.v1.AdQuery
	(*Placement)(nil),                      // 8: kevel.advertisement.v1.Placement
	(*User)(nil),                           // 9: kevel.advertisement.v1.User
	(*Decision)(nil),                       // 10: kevel.advertisement.v1.Decision
	(*Event)(nil),                          // 11: kevel.advertisement.v1.Event
	(*Data)(nil),                           // 12: kevel.advertisement.v1.Data
	(*Content)(nil),                        // 13: kevel.advertisement.v1.Content
	(*PricingData)(nil),                    // 14: kevel.advertisement.v1.PricingData
	(*Decisions)(nil),                      // 15: kevel.advertisement.v1.Decisions
	(*Explain)(nil),                        // 16: kevel.advertisement.v1.Explain
	(*GetDecisionsResponse)(nil),           // 17: kevel.advertisement.v1.GetDecisionsResponse
	(*ConsentRequest)(nil),                 // 18: kevel.advertisement.v1.ConsentRequest
	(*MatchedPoint)(nil),                   // 19: kevel.advertisement.v1.MatchedPoint
	(*GeoDistanceSkipFilter)(nil),          // 20: kevel.advertisement.v1.GeoDistanceSkipFilter
	(*GeoLocationSkipFilter)(nil),          // 21: kevel.advertisement.v1.GeoLocationSkipFilter
	(*SkipFilters)(nil),                    // 22: kevel.advertisement.v1.SkipFilters
	(*GetDecisionsRequest)(nil),            // 23: kevel.advertisement.v1.GetDecisionsRequest
	(*AddCustomPropertiesRequestBody)(nil), // 24: kevel.advertisement.v1.AddCustomPropertiesRequestBody
	(*AddCustomPropertiesRequest)(nil),     // 25: kevel.advertisement.v1.AddCustomPropertiesRequest
	(*AddCustomPropertiesResponse)(nil),    // 26: kevel.advertisement.v1.AddCustomPropertiesResponse
	(*AddInterestsRequest)(nil),            // 27: kevel.advertisement.v1.AddInterestsRequest
	(*AddInterestsResponse)(nil),           // 28: kevel.advertisement.v1.AddInterestsResponse
	(*AddRetargetingSegmentRequest)(nil),   // 29: kevel.advertisement.v1.AddRetargetingSegmentRequest
	(*AddRetargetingSegmentResponse)(nil),  // 30: kevel.advertisement.v1.AddRetargetingSegmentResponse
	(*OptOutRequest)(nil),                  // 31: kevel.advertisement.v1.OptOutRequest
	(*OptOutResponse)(nil),                 // 32: kevel.advertisement.v1.OptOutResponse
	(*ReadRequest)(nil),                    // 33: kevel.advertisement.v1.ReadRequest
	(*ReadResponse)(nil),                   // 34: kevel.advertisement.v1.ReadResponse
	(*IpOverrideRequest)(nil),              // 35: kevel.advertisement.v1.IpOverrideRequest
	(*IpOverrideResponse)(nil),             // 36: kevel.advertisement.v1.IpOverrideResponse
	(*ForgetRequest)(nil),                  // 37: kevel.advertisement.v1.ForgetRequest
	(*ForgetResponse)(nil),                 // 38: kevel.advertisement.v1.ForgetResponse
	(*GdprConsentRequest)(nil),             // 39: kevel.advertisement.v1.GdprConsentRequest
	(*GdprConsentResponse)(nil),            // 40: kevel.advertisement.v1.GdprConsentResponse
	(*MatchUserRequest)(nil),               // 41: kevel.advertisement.v1.MatchUserRequest
	(*MatchUserResponse)(nil),              // 42: kevel.advertisement.v1.MatchUserResponse
	nil,                                    // 43: kevel.advertisement.v1.ContentKeys.AdditionalPropertiesEntry
	(*v2.SpecResponseContext)(nil),         // 44: platform.spec.v2.SpecResponseContext
}
var file_kevel_advertisement_v1_decision_proto_depIdxs = []int32{
	8,  // 0: kevel.advertisement.v1.DecisionRequest.placements:type_name -> kevel.advertisement.v1.Placement
	9,  // 1: kevel.advertisement.v1.DecisionRequest.user:type_name -> kevel.advertisement.v1.User
	2,  // 2: kevel.advertisement.v1.DecisionRequest.consent:type_name -> kevel.advertisement.v1.Consent
	43, // 3: kevel.advertisement.v1.ContentKeys.additional_properties:type_name -> kevel.advertisement.v1.ContentKeys.AdditionalPropertiesEntry
	4,  // 4: kevel.advertisement.v1.Placement.properties:type_name -> kevel.advertisement.v1.Properties
	5,  // 5: kevel.advertisement.v1.Placement.overrides:type_name -> kevel.advertisement.v1.Overrides
	6,  // 6: kevel.advertisement.v1.Placement.content_keys:type_name -> kevel.advertisement.v1.ContentKeys
	7,  // 7: kevel.advertisement.v1.Placement.ad_query:type_name -> kevel.advertisement.v1.AdQuery
	22, // 8: kevel.advertisement.v1.Placement.skip_filters:type_name -> kevel.advertisement.v1.SkipFilters
	13, // 9: kevel.advertisement.v1.Decision.contents:type_name -> kevel.advertisement.v1.Content
	11, // 10: kevel.advertisement.v1.Decision.events:type_name -> kevel.advertisement.v1.Event
	19, // 11: kevel.advertisement.v1.Decision.matched_points:type_name -> kevel.advertisement.v1.MatchedPoint
	14, // 12: kevel.advertisement.v1.Decision.pricing:type_name -> kevel.advertisement.v1.PricingData
	12, // 13: kevel.advertisement.v1.Content.data:type_name -> kevel.advertisement.v1.Data
	44, // 14: kevel.advertisement.v1.GetDecisionsResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	9,  // 15: kevel.advertisement.v1.GetDecisionsResponse.user:type_name -> kevel.advertisement.v1.User
	15, // 16: kevel.advertisement.v1.GetDecisionsResponse.decisions:type_name -> kevel.advertisement.v1.Decisions
	16, // 17: kevel.advertisement.v1.GetDecisionsResponse.explain:type_name -> kevel.advertisement.v1.Explain
	2,  // 18: kevel.advertisement.v1.ConsentRequest.consent:type_name -> kevel.advertisement.v1.Consent
	20, // 19: kevel.advertisement.v1.SkipFilters.distance:type_name -> kevel.advertisement.v1.GeoDistanceSkipFilter
	20, // 20: kevel.advertisement.v1.SkipFilters.geodistance:type_name -> kevel.advertisement.v1.GeoDistanceSkipFilter
	21, // 21: kevel.advertisement.v1.SkipFilters.geolocation:type_name -> kevel.advertisement.v1.GeoLocationSkipFilter
	21, // 22: kevel.advertisement.v1.SkipFilters.location:type_name -> kevel.advertisement.v1.GeoLocationSkipFilter
	3,  // 23: kevel.advertisement.v1.GetDecisionsRequest.decision_request:type_name -> kevel.advertisement.v1.DecisionRequest
	24, // 24: kevel.advertisement.v1.AddCustomPropertiesRequest.add_custom_properties_request_body:type_name -> kevel.advertisement.v1.AddCustomPropertiesRequestBody
	44, // 25: kevel.advertisement.v1.AddCustomPropertiesResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	44, // 26: kevel.advertisement.v1.AddInterestsResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	44, // 27: kevel.advertisement.v1.AddRetargetingSegmentResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	44, // 28: kevel.advertisement.v1.ReadResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	44, // 29: kevel.advertisement.v1.IpOverrideResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	18, // 30: kevel.advertisement.v1.GdprConsentRequest.consent_request:type_name -> kevel.advertisement.v1.ConsentRequest
	44, // 31: kevel.advertisement.v1.GdprConsentResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	44, // 32: kevel.advertisement.v1.MatchUserResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	23, // 33: kevel.advertisement.v1.DecisionService.GetDecisions:input_type -> kevel.advertisement.v1.GetDecisionsRequest
	25, // 34: kevel.advertisement.v1.DecisionService.AddCustomProperties:input_type -> kevel.advertisement.v1.AddCustomPropertiesRequest
	27, // 35: kevel.advertisement.v1.DecisionService.AddInterests:input_type -> kevel.advertisement.v1.AddInterestsRequest
	29, // 36: kevel.advertisement.v1.DecisionService.AddRetargetingSegment:input_type -> kevel.advertisement.v1.AddRetargetingSegmentRequest
	31, // 37: kevel.advertisement.v1.DecisionService.OptOut:input_type -> kevel.advertisement.v1.OptOutRequest
	33, // 38: kevel.advertisement.v1.DecisionService.Read:input_type -> kevel.advertisement.v1.ReadRequest
	35, // 39: kevel.advertisement.v1.DecisionService.IpOverride:input_type -> kevel.advertisement.v1.IpOverrideRequest
	37, // 40: kevel.advertisement.v1.DecisionService.Forget:input_type -> kevel.advertisement.v1.ForgetRequest
	39, // 41: kevel.advertisement.v1.DecisionService.GdprConsent:input_type -> kevel.advertisement.v1.GdprConsentRequest
	41, // 42: kevel.advertisement.v1.DecisionService.MatchUser:input_type -> kevel.advertisement.v1.MatchUserRequest
	17, // 43: kevel.advertisement.v1.DecisionService.GetDecisions:output_type -> kevel.advertisement.v1.GetDecisionsResponse
	26, // 44: kevel.advertisement.v1.DecisionService.AddCustomProperties:output_type -> kevel.advertisement.v1.AddCustomPropertiesResponse
	28, // 45: kevel.advertisement.v1.DecisionService.AddInterests:output_type -> kevel.advertisement.v1.AddInterestsResponse
	30, // 46: kevel.advertisement.v1.DecisionService.AddRetargetingSegment:output_type -> kevel.advertisement.v1.AddRetargetingSegmentResponse
	32, // 47: kevel.advertisement.v1.DecisionService.OptOut:output_type -> kevel.advertisement.v1.OptOutResponse
	34, // 48: kevel.advertisement.v1.DecisionService.Read:output_type -> kevel.advertisement.v1.ReadResponse
	36, // 49: kevel.advertisement.v1.DecisionService.IpOverride:output_type -> kevel.advertisement.v1.IpOverrideResponse
	38, // 50: kevel.advertisement.v1.DecisionService.Forget:output_type -> kevel.advertisement.v1.ForgetResponse
	40, // 51: kevel.advertisement.v1.DecisionService.GdprConsent:output_type -> kevel.advertisement.v1.GdprConsentResponse
	42, // 52: kevel.advertisement.v1.DecisionService.MatchUser:output_type -> kevel.advertisement.v1.MatchUserResponse
	43, // [43:53] is the sub-list for method output_type
	33, // [33:43] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_kevel_advertisement_v1_decision_proto_init() }
func file_kevel_advertisement_v1_decision_proto_init() {
	if File_kevel_advertisement_v1_decision_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kevel_advertisement_v1_decision_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kevel_advertisement_v1_decision_proto_goTypes,
		DependencyIndexes: file_kevel_advertisement_v1_decision_proto_depIdxs,
		EnumInfos:         file_kevel_advertisement_v1_decision_proto_enumTypes,
		MessageInfos:      file_kevel_advertisement_v1_decision_proto_msgTypes,
	}.Build()
	File_kevel_advertisement_v1_decision_proto = out.File
	file_kevel_advertisement_v1_decision_proto_rawDesc = nil
	file_kevel_advertisement_v1_decision_proto_goTypes = nil
	file_kevel_advertisement_v1_decision_proto_depIdxs = nil
}
