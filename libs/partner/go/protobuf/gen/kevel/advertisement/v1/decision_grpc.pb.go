// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kevel/advertisement/v1/decision.proto

package advertisementv1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DecisionService_GetDecisions_FullMethodName          = "/kevel.advertisement.v1.DecisionService/GetDecisions"
	DecisionService_AddCustomProperties_FullMethodName   = "/kevel.advertisement.v1.DecisionService/AddCustomProperties"
	DecisionService_AddInterests_FullMethodName          = "/kevel.advertisement.v1.DecisionService/AddInterests"
	DecisionService_AddRetargetingSegment_FullMethodName = "/kevel.advertisement.v1.DecisionService/AddRetargetingSegment"
	DecisionService_OptOut_FullMethodName                = "/kevel.advertisement.v1.DecisionService/OptOut"
	DecisionService_Read_FullMethodName                  = "/kevel.advertisement.v1.DecisionService/Read"
	DecisionService_IpOverride_FullMethodName            = "/kevel.advertisement.v1.DecisionService/IpOverride"
	DecisionService_Forget_FullMethodName                = "/kevel.advertisement.v1.DecisionService/Forget"
	DecisionService_GdprConsent_FullMethodName           = "/kevel.advertisement.v1.DecisionService/GdprConsent"
	DecisionService_MatchUser_FullMethodName             = "/kevel.advertisement.v1.DecisionService/MatchUser"
)

// DecisionServiceClient is the client API for DecisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecisionServiceClient interface {
	GetDecisions(ctx context.Context, in *GetDecisionsRequest, opts ...grpc.CallOption) (*GetDecisionsResponse, error)
	AddCustomProperties(ctx context.Context, in *AddCustomPropertiesRequest, opts ...grpc.CallOption) (*AddCustomPropertiesResponse, error)
	AddInterests(ctx context.Context, in *AddInterestsRequest, opts ...grpc.CallOption) (*AddInterestsResponse, error)
	AddRetargetingSegment(ctx context.Context, in *AddRetargetingSegmentRequest, opts ...grpc.CallOption) (*AddRetargetingSegmentResponse, error)
	OptOut(ctx context.Context, in *OptOutRequest, opts ...grpc.CallOption) (*OptOutResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	IpOverride(ctx context.Context, in *IpOverrideRequest, opts ...grpc.CallOption) (*IpOverrideResponse, error)
	Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*ForgetResponse, error)
	GdprConsent(ctx context.Context, in *GdprConsentRequest, opts ...grpc.CallOption) (*GdprConsentResponse, error)
	MatchUser(ctx context.Context, in *MatchUserRequest, opts ...grpc.CallOption) (*MatchUserResponse, error)
}

type decisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecisionServiceClient(cc grpc.ClientConnInterface) DecisionServiceClient {
	return &decisionServiceClient{cc}
}

func (c *decisionServiceClient) GetDecisions(ctx context.Context, in *GetDecisionsRequest, opts ...grpc.CallOption) (*GetDecisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDecisionsResponse)
	err := c.cc.Invoke(ctx, DecisionService_GetDecisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) AddCustomProperties(ctx context.Context, in *AddCustomPropertiesRequest, opts ...grpc.CallOption) (*AddCustomPropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCustomPropertiesResponse)
	err := c.cc.Invoke(ctx, DecisionService_AddCustomProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) AddInterests(ctx context.Context, in *AddInterestsRequest, opts ...grpc.CallOption) (*AddInterestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInterestsResponse)
	err := c.cc.Invoke(ctx, DecisionService_AddInterests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) AddRetargetingSegment(ctx context.Context, in *AddRetargetingSegmentRequest, opts ...grpc.CallOption) (*AddRetargetingSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRetargetingSegmentResponse)
	err := c.cc.Invoke(ctx, DecisionService_AddRetargetingSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) OptOut(ctx context.Context, in *OptOutRequest, opts ...grpc.CallOption) (*OptOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptOutResponse)
	err := c.cc.Invoke(ctx, DecisionService_OptOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, DecisionService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) IpOverride(ctx context.Context, in *IpOverrideRequest, opts ...grpc.CallOption) (*IpOverrideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpOverrideResponse)
	err := c.cc.Invoke(ctx, DecisionService_IpOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*ForgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForgetResponse)
	err := c.cc.Invoke(ctx, DecisionService_Forget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) GdprConsent(ctx context.Context, in *GdprConsentRequest, opts ...grpc.CallOption) (*GdprConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GdprConsentResponse)
	err := c.cc.Invoke(ctx, DecisionService_GdprConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionServiceClient) MatchUser(ctx context.Context, in *MatchUserRequest, opts ...grpc.CallOption) (*MatchUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchUserResponse)
	err := c.cc.Invoke(ctx, DecisionService_MatchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecisionServiceServer is the server API for DecisionService service.
// All implementations must embed UnimplementedDecisionServiceServer
// for forward compatibility.
type DecisionServiceServer interface {
	GetDecisions(context.Context, *GetDecisionsRequest) (*GetDecisionsResponse, error)
	AddCustomProperties(context.Context, *AddCustomPropertiesRequest) (*AddCustomPropertiesResponse, error)
	AddInterests(context.Context, *AddInterestsRequest) (*AddInterestsResponse, error)
	AddRetargetingSegment(context.Context, *AddRetargetingSegmentRequest) (*AddRetargetingSegmentResponse, error)
	OptOut(context.Context, *OptOutRequest) (*OptOutResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	IpOverride(context.Context, *IpOverrideRequest) (*IpOverrideResponse, error)
	Forget(context.Context, *ForgetRequest) (*ForgetResponse, error)
	GdprConsent(context.Context, *GdprConsentRequest) (*GdprConsentResponse, error)
	MatchUser(context.Context, *MatchUserRequest) (*MatchUserResponse, error)
	mustEmbedUnimplementedDecisionServiceServer()
}

// UnimplementedDecisionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDecisionServiceServer struct{}

func (UnimplementedDecisionServiceServer) GetDecisions(context.Context, *GetDecisionsRequest) (*GetDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecisions not implemented")
}
func (UnimplementedDecisionServiceServer) AddCustomProperties(context.Context, *AddCustomPropertiesRequest) (*AddCustomPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomProperties not implemented")
}
func (UnimplementedDecisionServiceServer) AddInterests(context.Context, *AddInterestsRequest) (*AddInterestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterests not implemented")
}
func (UnimplementedDecisionServiceServer) AddRetargetingSegment(context.Context, *AddRetargetingSegmentRequest) (*AddRetargetingSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRetargetingSegment not implemented")
}
func (UnimplementedDecisionServiceServer) OptOut(context.Context, *OptOutRequest) (*OptOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptOut not implemented")
}
func (UnimplementedDecisionServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDecisionServiceServer) IpOverride(context.Context, *IpOverrideRequest) (*IpOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpOverride not implemented")
}
func (UnimplementedDecisionServiceServer) Forget(context.Context, *ForgetRequest) (*ForgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (UnimplementedDecisionServiceServer) GdprConsent(context.Context, *GdprConsentRequest) (*GdprConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GdprConsent not implemented")
}
func (UnimplementedDecisionServiceServer) MatchUser(context.Context, *MatchUserRequest) (*MatchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchUser not implemented")
}
func (UnimplementedDecisionServiceServer) mustEmbedUnimplementedDecisionServiceServer() {}
func (UnimplementedDecisionServiceServer) testEmbeddedByValue()                         {}

// UnsafeDecisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecisionServiceServer will
// result in compilation errors.
type UnsafeDecisionServiceServer interface {
	mustEmbedUnimplementedDecisionServiceServer()
}

func RegisterDecisionServiceServer(s grpc.ServiceRegistrar, srv DecisionServiceServer) {
	// If the following call pancis, it indicates UnimplementedDecisionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DecisionService_ServiceDesc, srv)
}

func _DecisionService_GetDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).GetDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_GetDecisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).GetDecisions(ctx, req.(*GetDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_AddCustomProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).AddCustomProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_AddCustomProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).AddCustomProperties(ctx, req.(*AddCustomPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_AddInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).AddInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_AddInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).AddInterests(ctx, req.(*AddInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_AddRetargetingSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRetargetingSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).AddRetargetingSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_AddRetargetingSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).AddRetargetingSegment(ctx, req.(*AddRetargetingSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_OptOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).OptOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_OptOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).OptOut(ctx, req.(*OptOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_IpOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).IpOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_IpOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).IpOverride(ctx, req.(*IpOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_Forget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).Forget(ctx, req.(*ForgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_GdprConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GdprConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).GdprConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_GdprConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).GdprConsent(ctx, req.(*GdprConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionService_MatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionServiceServer).MatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecisionService_MatchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionServiceServer).MatchUser(ctx, req.(*MatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DecisionService_ServiceDesc is the grpc.ServiceDesc for DecisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kevel.advertisement.v1.DecisionService",
	HandlerType: (*DecisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDecisions",
			Handler:    _DecisionService_GetDecisions_Handler,
		},
		{
			MethodName: "AddCustomProperties",
			Handler:    _DecisionService_AddCustomProperties_Handler,
		},
		{
			MethodName: "AddInterests",
			Handler:    _DecisionService_AddInterests_Handler,
		},
		{
			MethodName: "AddRetargetingSegment",
			Handler:    _DecisionService_AddRetargetingSegment_Handler,
		},
		{
			MethodName: "OptOut",
			Handler:    _DecisionService_OptOut_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _DecisionService_Read_Handler,
		},
		{
			MethodName: "IpOverride",
			Handler:    _DecisionService_IpOverride_Handler,
		},
		{
			MethodName: "Forget",
			Handler:    _DecisionService_Forget_Handler,
		},
		{
			MethodName: "GdprConsent",
			Handler:    _DecisionService_GdprConsent_Handler,
		},
		{
			MethodName: "MatchUser",
			Handler:    _DecisionService_MatchUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kevel/advertisement/v1/decision.proto",
}
