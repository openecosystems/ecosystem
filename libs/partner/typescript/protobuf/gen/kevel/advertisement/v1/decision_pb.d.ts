// @generated by protoc-gen-es v2.2.3
// @generated from file kevel/advertisement/v1/decision.proto (package decision, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file kevel/advertisement/v1/decision.proto.
 */
export declare const file_kevel_advertisement_v1_decision: GenFile;

/**
 * @generated from message decision.Consent
 */
export declare type Consent = Message<"decision.Consent"> & {
};

/**
 * Describes the message decision.Consent.
 * Use `create(ConsentSchema)` to create a new message.
 */
export declare const ConsentSchema: GenMessage<Consent>;

/**
 * @generated from message decision.DecisionRequest
 */
export declare type DecisionRequest = Message<"decision.DecisionRequest"> & {
  /**
   * @generated from field: repeated decision.Placement placements = 1;
   */
  placements: Placement[];

  /**
   * @generated from field: decision.User user = 2;
   */
  user?: User;

  /**
   * @generated from field: repeated string keywords = 3;
   */
  keywords: string[];

  /**
   * @generated from field: string url = 4;
   */
  url: string;

  /**
   * @generated from field: string referrer = 5;
   */
  referrer: string;

  /**
   * @generated from field: string ip = 6;
   */
  ip: string;

  /**
   * @generated from field: repeated int64 blocked_creatives = 7;
   */
  blockedCreatives: bigint[];

  /**
   * @generated from field: bool is_mobile = 8;
   */
  isMobile: boolean;

  /**
   * @generated from field: bool include_pricing_data = 9;
   */
  includePricingData: boolean;

  /**
   * @generated from field: bool notrack = 10;
   */
  notrack: boolean;

  /**
   * @generated from field: bool enable_bot_filtering = 11;
   */
  enableBotFiltering: boolean;

  /**
   * @generated from field: bool enable_user_dbip = 12;
   */
  enableUserDbip: boolean;

  /**
   * @generated from field: decision.Consent consent = 13;
   */
  consent?: Consent;

  /**
   * @generated from field: string device_id = 14;
   */
  deviceId: string;

  /**
   * @generated from field: bool parallel = 15;
   */
  parallel: boolean;

  /**
   * @generated from field: float intended_latitude = 16;
   */
  intendedLatitude: number;

  /**
   * @generated from field: float intended_longitude = 17;
   */
  intendedLongitude: number;

  /**
   * @generated from field: float radius = 18;
   */
  radius: number;

  /**
   * @generated from field: bool include_matched_points = 19;
   */
  includeMatchedPoints: boolean;
};

/**
 * Describes the message decision.DecisionRequest.
 * Use `create(DecisionRequestSchema)` to create a new message.
 */
export declare const DecisionRequestSchema: GenMessage<DecisionRequest>;

/**
 * @generated from message decision.Properties
 */
export declare type Properties = Message<"decision.Properties"> & {
};

/**
 * Describes the message decision.Properties.
 * Use `create(PropertiesSchema)` to create a new message.
 */
export declare const PropertiesSchema: GenMessage<Properties>;

/**
 * @generated from message decision.Overrides
 */
export declare type Overrides = Message<"decision.Overrides"> & {
};

/**
 * Describes the message decision.Overrides.
 * Use `create(OverridesSchema)` to create a new message.
 */
export declare const OverridesSchema: GenMessage<Overrides>;

/**
 * @generated from message decision.ContentKeys
 */
export declare type ContentKeys = Message<"decision.ContentKeys"> & {
  /**
   * @generated from field: map<string, string> additional_properties = 1;
   */
  additionalProperties: { [key: string]: string };
};

/**
 * Describes the message decision.ContentKeys.
 * Use `create(ContentKeysSchema)` to create a new message.
 */
export declare const ContentKeysSchema: GenMessage<ContentKeys>;

/**
 * @generated from message decision.AdQuery
 */
export declare type AdQuery = Message<"decision.AdQuery"> & {
};

/**
 * Describes the message decision.AdQuery.
 * Use `create(AdQuerySchema)` to create a new message.
 */
export declare const AdQuerySchema: GenMessage<AdQuery>;

/**
 * @generated from message decision.Placement
 */
export declare type Placement = Message<"decision.Placement"> & {
  /**
   * @generated from field: string div_name = 1;
   */
  divName: string;

  /**
   * @generated from field: int32 network_id = 2;
   */
  networkId: number;

  /**
   * @generated from field: int32 site_id = 3;
   */
  siteId: number;

  /**
   * @generated from field: repeated int64 ad_types = 4;
   */
  adTypes: bigint[];

  /**
   * @generated from field: repeated int64 zone_ids = 5;
   */
  zoneIds: bigint[];

  /**
   * @generated from field: int32 campaign_id = 6;
   */
  campaignId: number;

  /**
   * @generated from field: int32 flight_id = 7;
   */
  flightId: number;

  /**
   * @generated from field: int32 ad_id = 8;
   */
  adId: number;

  /**
   * @generated from field: string click_url = 9;
   */
  clickUrl: string;

  /**
   * @generated from field: decision.Properties properties = 10;
   */
  properties?: Properties;

  /**
   * @generated from field: repeated int64 event_ids = 11;
   */
  eventIds: bigint[];

  /**
   * @generated from field: decision.Overrides overrides = 12;
   */
  overrides?: Overrides;

  /**
   * @generated from field: decision.ContentKeys content_keys = 13;
   */
  contentKeys?: ContentKeys;

  /**
   * @generated from field: int32 count = 14;
   */
  count: number;

  /**
   * @generated from field: bool proportionality = 15;
   */
  proportionality: boolean;

  /**
   * @generated from field: string ecpm_partition = 16;
   */
  ecpmPartition: string;

  /**
   * @generated from field: repeated string ecpm_partitions = 17;
   */
  ecpmPartitions: string[];

  /**
   * @generated from field: int32 event_multiplier = 18;
   */
  eventMultiplier: number;

  /**
   * @generated from field: bool skip_selection = 19;
   */
  skipSelection: boolean;

  /**
   * @generated from field: decision.AdQuery ad_query = 20;
   */
  adQuery?: AdQuery;

  /**
   * @generated from field: float floor_price = 21;
   */
  floorPrice: number;

  /**
   * @generated from field: float floor_cpc = 22;
   */
  floorCpc: number;

  /**
   * @generated from field: decision.SkipFilters skip_filters = 23;
   */
  skipFilters?: SkipFilters;
};

/**
 * Describes the message decision.Placement.
 * Use `create(PlacementSchema)` to create a new message.
 */
export declare const PlacementSchema: GenMessage<Placement>;

/**
 * @generated from message decision.User
 */
export declare type User = Message<"decision.User"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message decision.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * @generated from message decision.Decision
 */
export declare type Decision = Message<"decision.Decision"> & {
  /**
   * @generated from field: int64 ad_id = 1;
   */
  adId: bigint;

  /**
   * @generated from field: int64 advertiser_id = 2;
   */
  advertiserId: bigint;

  /**
   * @generated from field: int64 creative_id = 3;
   */
  creativeId: bigint;

  /**
   * @generated from field: int64 flight_id = 4;
   */
  flightId: bigint;

  /**
   * @generated from field: int64 campaign_id = 5;
   */
  campaignId: bigint;

  /**
   * @generated from field: int64 priority_id = 6;
   */
  priorityId: bigint;

  /**
   * @generated from field: string click_url = 7;
   */
  clickUrl: string;

  /**
   * @generated from field: repeated decision.Content contents = 8;
   */
  contents: Content[];

  /**
   * @generated from field: string impression_url = 9;
   */
  impressionUrl: string;

  /**
   * @generated from field: repeated decision.Event events = 10;
   */
  events: Event[];

  /**
   * @generated from field: repeated decision.MatchedPoint matched_points = 11;
   */
  matchedPoints: MatchedPoint[];

  /**
   * @generated from field: decision.PricingData pricing = 12;
   */
  pricing?: PricingData;
};

/**
 * Describes the message decision.Decision.
 * Use `create(DecisionSchema)` to create a new message.
 */
export declare const DecisionSchema: GenMessage<Decision>;

/**
 * @generated from message decision.Event
 */
export declare type Event = Message<"decision.Event"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message decision.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export declare const EventSchema: GenMessage<Event>;

/**
 * @generated from message decision.Data
 */
export declare type Data = Message<"decision.Data"> & {
};

/**
 * Describes the message decision.Data.
 * Use `create(DataSchema)` to create a new message.
 */
export declare const DataSchema: GenMessage<Data>;

/**
 * @generated from message decision.Content
 */
export declare type Content = Message<"decision.Content"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: string template = 2;
   */
  template: string;

  /**
   * @generated from field: string custom_template = 3;
   */
  customTemplate: string;

  /**
   * @generated from field: decision.Data data = 4;
   */
  data?: Data;

  /**
   * @generated from field: string body = 5;
   */
  body: string;
};

/**
 * Describes the message decision.Content.
 * Use `create(ContentSchema)` to create a new message.
 */
export declare const ContentSchema: GenMessage<Content>;

/**
 * @generated from message decision.PricingData
 */
export declare type PricingData = Message<"decision.PricingData"> & {
  /**
   * @generated from field: float price = 1;
   */
  price: number;

  /**
   * @generated from field: float clear_price = 2;
   */
  clearPrice: number;

  /**
   * @generated from field: float revenue = 3;
   */
  revenue: number;

  /**
   * @generated from field: int64 rate_type = 4;
   */
  rateType: bigint;

  /**
   * @generated from field: float e_cpm = 5;
   */
  eCpm: number;
};

/**
 * Describes the message decision.PricingData.
 * Use `create(PricingDataSchema)` to create a new message.
 */
export declare const PricingDataSchema: GenMessage<PricingData>;

/**
 * @generated from message decision.Decisions
 */
export declare type Decisions = Message<"decision.Decisions"> & {
};

/**
 * Describes the message decision.Decisions.
 * Use `create(DecisionsSchema)` to create a new message.
 */
export declare const DecisionsSchema: GenMessage<Decisions>;

/**
 * @generated from message decision.Explain
 */
export declare type Explain = Message<"decision.Explain"> & {
};

/**
 * Describes the message decision.Explain.
 * Use `create(ExplainSchema)` to create a new message.
 */
export declare const ExplainSchema: GenMessage<Explain>;

/**
 * @generated from message decision.DecisionResponse
 */
export declare type DecisionResponse = Message<"decision.DecisionResponse"> & {
  /**
   * @generated from field: decision.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: decision.Decisions decisions = 2;
   */
  decisions?: Decisions;

  /**
   * @generated from field: decision.Explain explain = 3;
   */
  explain?: Explain;
};

/**
 * Describes the message decision.DecisionResponse.
 * Use `create(DecisionResponseSchema)` to create a new message.
 */
export declare const DecisionResponseSchema: GenMessage<DecisionResponse>;

/**
 * @generated from message decision.ConsentRequest
 */
export declare type ConsentRequest = Message<"decision.ConsentRequest"> & {
  /**
   * @generated from field: string user_key = 1;
   */
  userKey: string;

  /**
   * @generated from field: decision.Consent consent = 2;
   */
  consent?: Consent;
};

/**
 * Describes the message decision.ConsentRequest.
 * Use `create(ConsentRequestSchema)` to create a new message.
 */
export declare const ConsentRequestSchema: GenMessage<ConsentRequest>;

/**
 * @generated from message decision.MatchedPoint
 */
export declare type MatchedPoint = Message<"decision.MatchedPoint"> & {
  /**
   * @generated from field: string lat = 1;
   */
  lat: string;

  /**
   * @generated from field: string lon = 2;
   */
  lon: string;
};

/**
 * Describes the message decision.MatchedPoint.
 * Use `create(MatchedPointSchema)` to create a new message.
 */
export declare const MatchedPointSchema: GenMessage<MatchedPoint>;

/**
 * @generated from message decision.GeoDistanceSkipFilter
 */
export declare type GeoDistanceSkipFilter = Message<"decision.GeoDistanceSkipFilter"> & {
  /**
   * @generated from field: bool value = 1;
   */
  value: boolean;
};

/**
 * Describes the message decision.GeoDistanceSkipFilter.
 * Use `create(GeoDistanceSkipFilterSchema)` to create a new message.
 */
export declare const GeoDistanceSkipFilterSchema: GenMessage<GeoDistanceSkipFilter>;

/**
 * @generated from message decision.GeoLocationSkipFilter
 */
export declare type GeoLocationSkipFilter = Message<"decision.GeoLocationSkipFilter"> & {
  /**
   * @generated from field: bool value = 1;
   */
  value: boolean;
};

/**
 * Describes the message decision.GeoLocationSkipFilter.
 * Use `create(GeoLocationSkipFilterSchema)` to create a new message.
 */
export declare const GeoLocationSkipFilterSchema: GenMessage<GeoLocationSkipFilter>;

/**
 * @generated from message decision.SkipFilters
 */
export declare type SkipFilters = Message<"decision.SkipFilters"> & {
  /**
   * @generated from field: decision.GeoDistanceSkipFilter distance = 1;
   */
  distance?: GeoDistanceSkipFilter;

  /**
   * @generated from field: bool facet = 2;
   */
  facet: boolean;

  /**
   * @generated from field: decision.GeoDistanceSkipFilter geodistance = 3;
   */
  geodistance?: GeoDistanceSkipFilter;

  /**
   * @generated from field: decision.GeoLocationSkipFilter geolocation = 4;
   */
  geolocation?: GeoLocationSkipFilter;

  /**
   * @generated from field: bool keyword = 5;
   */
  keyword: boolean;

  /**
   * @generated from field: decision.GeoLocationSkipFilter location = 6;
   */
  location?: GeoLocationSkipFilter;

  /**
   * @generated from field: bool placement_limit = 7;
   */
  placementLimit: boolean;

  /**
   * @generated from field: bool site_zone = 8;
   */
  siteZone: boolean;
};

/**
 * Describes the message decision.SkipFilters.
 * Use `create(SkipFiltersSchema)` to create a new message.
 */
export declare const SkipFiltersSchema: GenMessage<SkipFilters>;

/**
 * GetDecisionsParameters holds parameters to GetDecisions
 *
 * @generated from message decision.GetDecisionsRequest
 */
export declare type GetDecisionsRequest = Message<"decision.GetDecisionsRequest"> & {
  /**
   * @generated from field: decision.DecisionRequest decision_request = 1;
   */
  decisionRequest?: DecisionRequest;
};

/**
 * Describes the message decision.GetDecisionsRequest.
 * Use `create(GetDecisionsRequestSchema)` to create a new message.
 */
export declare const GetDecisionsRequestSchema: GenMessage<GetDecisionsRequest>;

/**
 * @generated from message decision.AddCustomPropertiesRequestBody
 */
export declare type AddCustomPropertiesRequestBody = Message<"decision.AddCustomPropertiesRequestBody"> & {
};

/**
 * Describes the message decision.AddCustomPropertiesRequestBody.
 * Use `create(AddCustomPropertiesRequestBodySchema)` to create a new message.
 */
export declare const AddCustomPropertiesRequestBodySchema: GenMessage<AddCustomPropertiesRequestBody>;

/**
 * AddCustomPropertiesParameters holds parameters to AddCustomProperties
 *
 * @generated from message decision.AddCustomPropertiesRequest
 */
export declare type AddCustomPropertiesRequest = Message<"decision.AddCustomPropertiesRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;

  /**
   * @generated from field: decision.AddCustomPropertiesRequestBody add_custom_properties_request_body = 3;
   */
  addCustomPropertiesRequestBody?: AddCustomPropertiesRequestBody;
};

/**
 * Describes the message decision.AddCustomPropertiesRequest.
 * Use `create(AddCustomPropertiesRequestSchema)` to create a new message.
 */
export declare const AddCustomPropertiesRequestSchema: GenMessage<AddCustomPropertiesRequest>;

/**
 * AddInterestsParameters holds parameters to AddInterests
 *
 * @generated from message decision.AddInterestsRequest
 */
export declare type AddInterestsRequest = Message<"decision.AddInterestsRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;

  /**
   * @generated from field: string interest = 3;
   */
  interest: string;
};

/**
 * Describes the message decision.AddInterestsRequest.
 * Use `create(AddInterestsRequestSchema)` to create a new message.
 */
export declare const AddInterestsRequestSchema: GenMessage<AddInterestsRequest>;

/**
 * AddRetargetingSegmentParameters holds parameters to AddRetargetingSegment
 *
 * @generated from message decision.AddRetargetingSegmentRequest
 */
export declare type AddRetargetingSegmentRequest = Message<"decision.AddRetargetingSegmentRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: int32 advertiser_id = 2;
   */
  advertiserId: number;

  /**
   * @generated from field: int32 retargeting_segment_id = 3;
   */
  retargetingSegmentId: number;

  /**
   * @generated from field: string user_key = 4;
   */
  userKey: string;
};

/**
 * Describes the message decision.AddRetargetingSegmentRequest.
 * Use `create(AddRetargetingSegmentRequestSchema)` to create a new message.
 */
export declare const AddRetargetingSegmentRequestSchema: GenMessage<AddRetargetingSegmentRequest>;

/**
 * OptOutParameters holds parameters to OptOut
 *
 * @generated from message decision.OptOutRequest
 */
export declare type OptOutRequest = Message<"decision.OptOutRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;
};

/**
 * Describes the message decision.OptOutRequest.
 * Use `create(OptOutRequestSchema)` to create a new message.
 */
export declare const OptOutRequestSchema: GenMessage<OptOutRequest>;

/**
 * ReadParameters holds parameters to Read
 *
 * @generated from message decision.ReadRequest
 */
export declare type ReadRequest = Message<"decision.ReadRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;
};

/**
 * Describes the message decision.ReadRequest.
 * Use `create(ReadRequestSchema)` to create a new message.
 */
export declare const ReadRequestSchema: GenMessage<ReadRequest>;

/**
 * @generated from message decision.ReadOK
 */
export declare type ReadOK = Message<"decision.ReadOK"> & {
};

/**
 * Describes the message decision.ReadOK.
 * Use `create(ReadOKSchema)` to create a new message.
 */
export declare const ReadOKSchema: GenMessage<ReadOK>;

/**
 * IpOverrideParameters holds parameters to IpOverride
 *
 * @generated from message decision.IpOverrideRequest
 */
export declare type IpOverrideRequest = Message<"decision.IpOverrideRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;

  /**
   * @generated from field: string ip = 3;
   */
  ip: string;
};

/**
 * Describes the message decision.IpOverrideRequest.
 * Use `create(IpOverrideRequestSchema)` to create a new message.
 */
export declare const IpOverrideRequestSchema: GenMessage<IpOverrideRequest>;

/**
 * ForgetParameters holds parameters to Forget
 *
 * @generated from message decision.ForgetRequest
 */
export declare type ForgetRequest = Message<"decision.ForgetRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;
};

/**
 * Describes the message decision.ForgetRequest.
 * Use `create(ForgetRequestSchema)` to create a new message.
 */
export declare const ForgetRequestSchema: GenMessage<ForgetRequest>;

/**
 * GdprConsentParameters holds parameters to GdprConsent
 *
 * @generated from message decision.GdprConsentRequest
 */
export declare type GdprConsentRequest = Message<"decision.GdprConsentRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: decision.ConsentRequest consent_request = 2;
   */
  consentRequest?: ConsentRequest;
};

/**
 * Describes the message decision.GdprConsentRequest.
 * Use `create(GdprConsentRequestSchema)` to create a new message.
 */
export declare const GdprConsentRequestSchema: GenMessage<GdprConsentRequest>;

/**
 * MatchUserParameters holds parameters to MatchUser
 *
 * @generated from message decision.MatchUserRequest
 */
export declare type MatchUserRequest = Message<"decision.MatchUserRequest"> & {
  /**
   * @generated from field: int32 network_id = 1;
   */
  networkId: number;

  /**
   * @generated from field: string user_key = 2;
   */
  userKey: string;

  /**
   * @generated from field: int32 partner_id = 3;
   */
  partnerId: number;

  /**
   * @generated from field: int32 user_id = 4;
   */
  userId: number;
};

/**
 * Describes the message decision.MatchUserRequest.
 * Use `create(MatchUserRequestSchema)` to create a new message.
 */
export declare const MatchUserRequestSchema: GenMessage<MatchUserRequest>;

/**
 * @generated from service decision.DecisionService
 */
export declare const DecisionService: GenService<{
  /**
   * @generated from rpc decision.DecisionService.GetDecisions
   */
  getDecisions: {
    methodKind: "unary";
    input: typeof GetDecisionsRequestSchema;
    output: typeof DecisionResponseSchema;
  },
  /**
   * @generated from rpc decision.DecisionService.AddCustomProperties
   */
  addCustomProperties: {
    methodKind: "unary";
    input: typeof AddCustomPropertiesRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.AddInterests
   */
  addInterests: {
    methodKind: "unary";
    input: typeof AddInterestsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.AddRetargetingSegment
   */
  addRetargetingSegment: {
    methodKind: "unary";
    input: typeof AddRetargetingSegmentRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.OptOut
   */
  optOut: {
    methodKind: "unary";
    input: typeof OptOutRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.Read
   */
  read: {
    methodKind: "unary";
    input: typeof ReadRequestSchema;
    output: typeof ReadOKSchema;
  },
  /**
   * @generated from rpc decision.DecisionService.IpOverride
   */
  ipOverride: {
    methodKind: "unary";
    input: typeof IpOverrideRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.Forget
   */
  forget: {
    methodKind: "unary";
    input: typeof ForgetRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.GdprConsent
   */
  gdprConsent: {
    methodKind: "unary";
    input: typeof GdprConsentRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc decision.DecisionService.MatchUser
   */
  matchUser: {
    methodKind: "unary";
    input: typeof MatchUserRequestSchema;
    output: typeof EmptySchema;
  },
}>;

