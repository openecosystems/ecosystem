// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/audit/v2alpha/audit.proto

package auditv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "github.com/openecosystems/ecosystem/libs/private/go/sdk/gen/platform/audit/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuditServiceName is the fully-qualified name of the AuditService service.
	AuditServiceName = "platform.audit.v2alpha.AuditService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditServiceSearchProcedure is the fully-qualified name of the AuditService's Search RPC.
	AuditServiceSearchProcedure = "/platform.audit.v2alpha.AuditService/Search"
)

// AuditServiceClient is a client for the platform.audit.v2alpha.AuditService service.
type AuditServiceClient interface {
	// Method to search for an audit event.
	Search(context.Context, *connect.Request[v2alpha.SearchRequest]) (*connect.Response[v2alpha.SearchResponse], error)
}

// NewAuditServiceClient constructs a client for the platform.audit.v2alpha.AuditService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuditServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	auditServiceMethods := v2alpha.File_platform_audit_v2alpha_audit_proto.Services().ByName("AuditService").Methods()
	return &auditServiceClient{
		search: connect.NewClient[v2alpha.SearchRequest, v2alpha.SearchResponse](
			httpClient,
			baseURL+AuditServiceSearchProcedure,
			connect.WithSchema(auditServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
	}
}

// auditServiceClient implements AuditServiceClient.
type auditServiceClient struct {
	search *connect.Client[v2alpha.SearchRequest, v2alpha.SearchResponse]
}

// Search calls platform.audit.v2alpha.AuditService.Search.
func (c *auditServiceClient) Search(ctx context.Context, req *connect.Request[v2alpha.SearchRequest]) (*connect.Response[v2alpha.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// AuditServiceHandler is an implementation of the platform.audit.v2alpha.AuditService service.
type AuditServiceHandler interface {
	// Method to search for an audit event.
	Search(context.Context, *connect.Request[v2alpha.SearchRequest]) (*connect.Response[v2alpha.SearchResponse], error)
}

// NewAuditServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditServiceHandler(svc AuditServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	auditServiceMethods := v2alpha.File_platform_audit_v2alpha_audit_proto.Services().ByName("AuditService").Methods()
	auditServiceSearchHandler := connect.NewUnaryHandler(
		AuditServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(auditServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.audit.v2alpha.AuditService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditServiceSearchProcedure:
			auditServiceSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditServiceHandler struct{}

func (UnimplementedAuditServiceHandler) Search(context.Context, *connect.Request[v2alpha.SearchRequest]) (*connect.Response[v2alpha.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.audit.v2alpha.AuditService.Search is not implemented"))
}
