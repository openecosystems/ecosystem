// Code generated by protoc-gen-platform go/spec. DO NOT EDIT.
// source: platform/audit/v2alpha/audit.proto

package auditv2alphapbmodel

type AuditCommand int
type AuditEvent int

const (
	AuditTypeName                         string = "audit"
	AuditTypeNamePlural                   string = "audits"
	AuditTypeNameScreamingCamelCase       string = "AUDIT"
	AuditTypeNamePluralScreamingCamelCase string = "AUDITS"
	AuditTypeNameEventPrefix              string = "audit."
)

const (
	AuditCommandsUnspecified AuditCommand = iota
	UnrecognizedAuditCommand AuditCommand = -1
)

const (
	AuditEventsUnspecified AuditEvent = iota
	AuditEventsCreated     AuditEvent = iota
	UnrecognizedAuditEvent AuditEvent = -1
)

const (
	CommandDataAuditTopic  string = "audit.data.command"
	EventDataAuditTopic    string = "audit.data.event"
	RoutineDataAuditTopic  string = "audit.data.routine"
	UnrecognizedAuditTopic string = "unrecognized"
)

func (c AuditCommand) CommandName() string {

	switch c {

	case AuditCommandsUnspecified:
		return "AuditCommandsUnspecified"
	default:
		return "UnrecognizedAuditCommand"
	}

}

func (e AuditEvent) EventName() string {

	switch e {

	case AuditEventsUnspecified:
		return "AuditEventsUnspecified"
	case AuditEventsCreated:
		return "AuditEventsCreated"
	default:
		return "UnrecognizedAuditEvent"
	}

}

func (c AuditCommand) CommandTopic() string {

	switch c {

	case AuditCommandsUnspecified:
		return CommandDataAuditTopic
	default:
		return UnrecognizedAuditTopic
	}

}

func (e AuditEvent) EventTopic() string {

	switch e {

	case AuditEventsUnspecified:
		return EventDataAuditTopic
	case AuditEventsCreated:
		return EventDataAuditTopic
	default:
		return UnrecognizedAuditTopic
	}

}

func (c AuditCommand) CommandTopicWildcard() string {
	return AuditTypeNameEventPrefix + ">"
}

func (e AuditEvent) EventTopicWildcard() string {
	return AuditTypeNameEventPrefix + ">"
}

func GetAuditCommand(command string) AuditCommand {

	switch command {

	case "AuditCommandsUnspecified":
		return AuditCommandsUnspecified
	default:
		return UnrecognizedAuditCommand
	}
}

func GetAuditEvent(event string) AuditEvent {

	switch event {

	case "AuditEventsUnspecified":
		return AuditEventsUnspecified
	case "AuditEventsCreated":
		return AuditEventsCreated
	default:
		return UnrecognizedAuditEvent
	}
}
