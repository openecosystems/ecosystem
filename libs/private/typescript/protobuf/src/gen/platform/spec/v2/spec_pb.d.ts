// @generated by protoc-gen-es v2.2.3
// @generated from file platform/spec/v2/spec.proto (package platform.spec.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Jurisdiction } from "../../type/v2/jurisdiction_pb";
import type { Any, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import type { RequestValidation, ResponseValidation } from "../../type/v2/validation_pb";
import type { ResponseMask } from "../../type/v2/mask_pb";

/**
 * Describes the file platform/spec/v2/spec.proto.
 */
export declare const file_platform_spec_v2_spec: GenFile;

/**
 * @generated from message platform.spec.v2.SpecKey
 */
export declare type SpecKey = Message<"platform.spec.v2.SpecKey"> & {
  /**
   * The organization associated with this context
   *
   * @generated from field: string organization_slug = 2;
   */
  organizationSlug: string;

  /**
   * The workspace associated with this context
   *
   * @generated from field: string workspace_slug = 3;
   */
  workspaceSlug: string;

  /**
   * The workspace location associated with this context
   *
   * @generated from field: platform.type.v2.Jurisdiction workspace_jan = 4;
   */
  workspaceJan: Jurisdiction;

  /**
   * @generated from field: string spec_type = 5;
   */
  specType: string;

  /**
   * @generated from field: string id = 6;
   */
  id: string;
};

/**
 * Describes the message platform.spec.v2.SpecKey.
 * Use `create(SpecKeySchema)` to create a new message.
 */
export declare const SpecKeySchema: GenMessage<SpecKey>;

/**
 * @generated from message platform.spec.v2.Spec
 */
export declare type Spec = Message<"platform.spec.v2.Spec"> & {
  /**
   *
   * Spec Version is captured by:
   * - Channel (Producer)
   *
   * @generated from field: string spec_version = 1;
   */
  specVersion: string;

  /**
   *
   * Spec message id is generated by:
   * - Channel (Producer)
   *
   * @generated from field: string message_id = 2;
   */
  messageId: string;

  /**
   *
   * Spec sent at is generated by:
   * - Client
   *
   * @generated from field: google.protobuf.Timestamp sent_at = 3;
   */
  sentAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp received_at = 4;
   */
  receivedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp completed_at = 5;
   */
  completedAt?: Timestamp;

  /**
   * @generated from field: string spec_type = 6;
   */
  specType: string;

  /**
   * @generated from field: platform.spec.v2.SpecEventType spec_event_type = 7;
   */
  specEventType: SpecEventType;

  /**
   * @generated from field: string spec_event = 8;
   */
  specEvent: string;

  /**
   * @generated from field: platform.spec.v2.SpecPrincipal principal = 9;
   */
  principal?: SpecPrincipal;

  /**
   * @generated from field: platform.spec.v2.SpanContext span_context = 10;
   */
  spanContext?: SpanContext;

  /**
   * @generated from field: platform.spec.v2.SpecContext context = 11;
   */
  context?: SpecContext;

  /**
   * @generated from field: platform.spec.v2.SpecRoutineContext routine_context = 12;
   */
  routineContext?: SpecRoutineContext;

  /**
   * @generated from field: google.protobuf.Any data = 13;
   */
  data?: Any;

  /**
   * @generated from field: platform.spec.v2.SpecData spec_data = 14;
   */
  specData?: SpecData;
};

/**
 * Describes the message platform.spec.v2.Spec.
 * Use `create(SpecSchema)` to create a new message.
 */
export declare const SpecSchema: GenMessage<Spec>;

/**
 * @generated from message platform.spec.v2.SpecPublic
 */
export declare type SpecPublic = Message<"platform.spec.v2.SpecPublic"> & {
  /**
   * @generated from field: string spec_version = 1;
   */
  specVersion: string;

  /**
   * @generated from field: string message_id = 2;
   */
  messageId: string;

  /**
   * @generated from field: google.protobuf.Timestamp sent_at = 3;
   */
  sentAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp received_at = 4;
   */
  receivedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp completed_at = 5;
   */
  completedAt?: Timestamp;

  /**
   * @generated from field: string spec_type = 6;
   */
  specType: string;

  /**
   * @generated from field: platform.spec.v2.SpecEventType spec_event_type = 7;
   */
  specEventType: SpecEventType;

  /**
   * @generated from field: string spec_event = 8;
   */
  specEvent: string;

  /**
   * @generated from field: google.protobuf.Any data = 9;
   */
  data?: Any;
};

/**
 * Describes the message platform.spec.v2.SpecPublic.
 * Use `create(SpecPublicSchema)` to create a new message.
 */
export declare const SpecPublicSchema: GenMessage<SpecPublic>;

/**
 * @generated from message platform.spec.v2.SpecContext
 */
export declare type SpecContext = Message<"platform.spec.v2.SpecContext"> & {
  /**
   * The ecosystem associated with this context.
   *
   * @generated from field: string ecosystem_slug = 1;
   */
  ecosystemSlug: string;

  /**
   * The organization associated with this context.
   *
   * @generated from field: string organization_slug = 50;
   */
  organizationSlug: string;

  /**
   * The workspace associated with this context.
   *
   * @generated from field: string workspace_slug = 51;
   */
  workspaceSlug: string;

  /**
   * The workspace jan associated with this context.
   * Right now this is an enumeration with a finite number of items.
   * That is incorrect. This should be a string instead.
   * See `2023-09-14 - Docs Sync` in sf-docs-internal.
   *
   * @generated from field: platform.type.v2.Jurisdiction workspace_jan = 2;
   */
  workspaceJan: Jurisdiction;

  /**
   * The ip address of the requester. MUST meet RFC 791 or
   *
   * @generated from field: string ip = 5;
   */
  ip: string;

  /**
   * The locality that applies to values in the Spec Message. MUST meet [ISO 3166](https://www.iso.org/iso-3166-country-codes.html).
   *
   * @generated from field: string locale = 6;
   */
  locale: string;

  /**
   * The timezone where the transaction originated. MUST meet [ISO 8601 Time zone designator](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators)
   *
   * @generated from field: string timezone = 7;
   */
  timezone: string;

  /**
   * Similar to the `User-Agent` header of a HTTP request. See [User-Agent - HTTP](developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) for guidance.
   *
   * @generated from field: string user_agent = 8;
   */
  userAgent: string;

  /**
   * @generated from field: platform.spec.v2.SpecValidation validation = 9;
   */
  validation?: SpecValidation;

  /**
   * @generated from field: platform.spec.v2.SpecProducer producer = 10;
   */
  producer?: SpecProducer;

  /**
   * @generated from field: platform.spec.v2.SpecDevice device = 11;
   */
  device?: SpecDevice;

  /**
   * @generated from field: platform.spec.v2.SpecLocation location = 12;
   */
  location?: SpecLocation;

  /**
   * @generated from field: platform.spec.v2.SpecNetwork network = 13;
   */
  network?: SpecNetwork;

  /**
   * The Operating System that was used to send the transaction.
   *
   * @generated from field: platform.spec.v2.SpecOS os = 14;
   */
  os?: SpecOS;
};

/**
 * Describes the message platform.spec.v2.SpecContext.
 * Use `create(SpecContextSchema)` to create a new message.
 */
export declare const SpecContextSchema: GenMessage<SpecContext>;

/**
 * @generated from message platform.spec.v2.SpanContext
 */
export declare type SpanContext = Message<"platform.spec.v2.SpanContext"> & {
  /**
   * @generated from field: string trace_id = 1;
   */
  traceId: string;

  /**
   * @generated from field: string span_id = 2;
   */
  spanId: string;

  /**
   * @generated from field: string parent_span_id = 3;
   */
  parentSpanId: string;

  /**
   * @generated from field: string trace_flags = 4;
   */
  traceFlags: string;
};

/**
 * Describes the message platform.spec.v2.SpanContext.
 * Use `create(SpanContextSchema)` to create a new message.
 */
export declare const SpanContextSchema: GenMessage<SpanContext>;

/**
 * @generated from message platform.spec.v2.SpecRoutineContext
 */
export declare type SpecRoutineContext = Message<"platform.spec.v2.SpecRoutineContext"> & {
  /**
   * The routine associated with this spec event
   *
   * @generated from field: string routine_id = 1;
   */
  routineId: string;

  /**
   * @generated from field: map<string, google.protobuf.Any> routine_data = 2;
   */
  routineData: { [key: string]: Any };
};

/**
 * Describes the message platform.spec.v2.SpecRoutineContext.
 * Use `create(SpecRoutineContextSchema)` to create a new message.
 */
export declare const SpecRoutineContextSchema: GenMessage<SpecRoutineContext>;

/**
 * @generated from message platform.spec.v2.SpecPrincipal
 */
export declare type SpecPrincipal = Message<"platform.spec.v2.SpecPrincipal"> & {
  /**
   * @generated from field: platform.spec.v2.SpecPrincipalType type = 1;
   */
  type: SpecPrincipalType;

  /**
   * @generated from field: string anonymous_id = 2;
   */
  anonymousId: string;

  /**
   * @generated from field: string principal_id = 3;
   */
  principalId: string;

  /**
   * The identity of a principal is an email address associated with a user, service account, or group; or a domain name
   *
   * @generated from field: string principal_email = 4;
   */
  principalEmail: string;

  /**
   * The connection id used to authenticate
   *
   * @generated from field: string connection_id = 5;
   */
  connectionId: string;
};

/**
 * Describes the message platform.spec.v2.SpecPrincipal.
 * Use `create(SpecPrincipalSchema)` to create a new message.
 */
export declare const SpecPrincipalSchema: GenMessage<SpecPrincipal>;

/**
 * @generated from message platform.spec.v2.SpecValidation
 */
export declare type SpecValidation = Message<"platform.spec.v2.SpecValidation"> & {
  /**
   * @generated from field: bool validate_only = 1;
   */
  validateOnly: boolean;
};

/**
 * Describes the message platform.spec.v2.SpecValidation.
 * Use `create(SpecValidationSchema)` to create a new message.
 */
export declare const SpecValidationSchema: GenMessage<SpecValidation>;

/**
 * @generated from message platform.spec.v2.SpecProducer
 */
export declare type SpecProducer = Message<"platform.spec.v2.SpecProducer"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string build = 3;
   */
  build: string;

  /**
   * @generated from field: string namespace = 4;
   */
  namespace: string;
};

/**
 * Describes the message platform.spec.v2.SpecProducer.
 * Use `create(SpecProducerSchema)` to create a new message.
 */
export declare const SpecProducerSchema: GenMessage<SpecProducer>;

/**
 * Describes the device that was used to initiate the transaction.
 *
 * @generated from message platform.spec.v2.SpecDevice
 */
export declare type SpecDevice = Message<"platform.spec.v2.SpecDevice"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string advertising_id = 3;
   */
  advertisingId: string;

  /**
   * @generated from field: string manufacturer = 4;
   */
  manufacturer: string;

  /**
   * @generated from field: string model = 5;
   */
  model: string;

  /**
   * @generated from field: string name = 6;
   */
  name: string;

  /**
   * @generated from field: string token = 7;
   */
  token: string;
};

/**
 * Describes the message platform.spec.v2.SpecDevice.
 * Use `create(SpecDeviceSchema)` to create a new message.
 */
export declare const SpecDeviceSchema: GenMessage<SpecDevice>;

/**
 * Describes the geographical location where the transaction was initiated.
 *
 * @generated from message platform.spec.v2.SpecLocation
 */
export declare type SpecLocation = Message<"platform.spec.v2.SpecLocation"> & {
  /**
   * @generated from field: string city = 1;
   */
  city: string;

  /**
   * The country where the transaction was initiated.
   *
   * @generated from field: string country = 2;
   */
  country: string;

  /**
   * The latitude part of the location's GPS coordinates.
   *
   * @generated from field: double latitude = 3;
   */
  latitude: number;

  /**
   * The longitude part of the location's GPS coordinates.
   *
   * @generated from field: double longitude = 4;
   */
  longitude: number;

  /**
   * Unknown. <!-- issue -->
   *
   * @generated from field: string speed = 5;
   */
  speed: string;
};

/**
 * Describes the message platform.spec.v2.SpecLocation.
 * Use `create(SpecLocationSchema)` to create a new message.
 */
export declare const SpecLocationSchema: GenMessage<SpecLocation>;

/**
 * Contains information about which types of network were used to transport the Spec Message.
 *
 * @generated from message platform.spec.v2.SpecNetwork
 */
export declare type SpecNetwork = Message<"platform.spec.v2.SpecNetwork"> & {
  /**
   * `True` if bluetooth was used.
   *
   * @generated from field: bool bluetooth = 1;
   */
  bluetooth: boolean;

  /**
   * `True` if a cellular network was used.
   *
   * @generated from field: bool cellular = 2;
   */
  cellular: boolean;

  /**
   * `True` if WiFi was used.
   *
   * @generated from field: bool wifi = 3;
   */
  wifi: boolean;

  /**
   * The name of the carrier when a cellular network was used.
   *
   * @generated from field: string carrier = 4;
   */
  carrier: string;
};

/**
 * Describes the message platform.spec.v2.SpecNetwork.
 * Use `create(SpecNetworkSchema)` to create a new message.
 */
export declare const SpecNetworkSchema: GenMessage<SpecNetwork>;

/**
 * Describes the OS that was used to initiate the transaction.
 *
 * @generated from message platform.spec.v2.SpecOS
 */
export declare type SpecOS = Message<"platform.spec.v2.SpecOS"> & {
  /**
   * The name of the OS.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The version of the OS.
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message platform.spec.v2.SpecOS.
 * Use `create(SpecOSSchema)` to create a new message.
 */
export declare const SpecOSSchema: GenMessage<SpecOS>;

/**
 * Describes the Data object for this spec event
 *
 * @generated from message platform.spec.v2.SpecData
 */
export declare type SpecData = Message<"platform.spec.v2.SpecData"> & {
  /**
   * @generated from field: google.protobuf.Any configuration = 1;
   */
  configuration?: Any;

  /**
   * @generated from field: google.protobuf.Any data = 2;
   */
  data?: Any;

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 3;
   */
  fieldMask?: FieldMask;
};

/**
 * Describes the message platform.spec.v2.SpecData.
 * Use `create(SpecDataSchema)` to create a new message.
 */
export declare const SpecDataSchema: GenMessage<SpecData>;

/**
 * @generated from message platform.spec.v2.SpecRequestContext
 */
export declare type SpecRequestContext = Message<"platform.spec.v2.SpecRequestContext"> & {
  /**
   * Should we only validate this request? There are no mutating side effects
   *
   * @generated from field: platform.type.v2.RequestValidation request_validation = 1;
   */
  requestValidation?: RequestValidation;

  /**
   * The organization to which you want to associate this request
   *
   * @generated from field: string organization_slug = 2;
   */
  organizationSlug: string;

  /**
   * The workspace to which you want to associate this request
   *
   * @generated from field: string workspace_slug = 3;
   */
  workspaceSlug: string;

  /**
   * @generated from field: string routine_id = 4;
   */
  routineId: string;
};

/**
 * Describes the message platform.spec.v2.SpecRequestContext.
 * Use `create(SpecRequestContextSchema)` to create a new message.
 */
export declare const SpecRequestContextSchema: GenMessage<SpecRequestContext>;

/**
 * @generated from message platform.spec.v2.SpecResponseContext
 */
export declare type SpecResponseContext = Message<"platform.spec.v2.SpecResponseContext"> & {
  /**
   * Whether this request is a validate only request
   *
   * @generated from field: platform.type.v2.ResponseValidation response_validation = 1;
   */
  responseValidation?: ResponseValidation;

  /**
   * How we have masked the response based on requested masking and policy masking
   *
   * @generated from field: platform.type.v2.ResponseMask response_mask = 2;
   */
  responseMask?: ResponseMask;

  /**
   * @generated from field: string ecosystem_slug = 3;
   */
  ecosystemSlug: string;

  /**
   * The organization associated with this response
   *
   * @generated from field: string organization_slug = 50;
   */
  organizationSlug: string;

  /**
   * The workspace associated with this response
   *
   * @generated from field: string workspace_slug = 51;
   */
  workspaceSlug: string;

  /**
   * The workspace location associated with this response
   *
   * @generated from field: platform.type.v2.Jurisdiction workspace_jan = 52;
   */
  workspaceJan: Jurisdiction;

  /**
   * @generated from field: string routine_id = 53;
   */
  routineId: string;
};

/**
 * Describes the message platform.spec.v2.SpecResponseContext.
 * Use `create(SpecResponseContextSchema)` to create a new message.
 */
export declare const SpecResponseContextSchema: GenMessage<SpecResponseContext>;

/**
 * @generated from enum platform.spec.v2.SpecEventType
 */
export enum SpecEventType {
  /**
   * @generated from enum value: SPEC_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_COMMAND = 1;
   */
  COMMAND = 1,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_EVENT = 2;
   */
  EVENT = 2,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_ROUTINE = 3;
   */
  ROUTINE = 3,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_ML = 4;
   */
  ML = 4,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_STREAM = 5;
   */
  STREAM = 5,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_DB = 6;
   */
  DB = 6,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_PROFILE = 7;
   */
  PROFILE = 7,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_ETL = 8;
   */
  ETL = 8,

  /**
   * @generated from enum value: SPEC_EVENT_TYPE_LOG = 9;
   */
  LOG = 9,
}

/**
 * Describes the enum platform.spec.v2.SpecEventType.
 */
export declare const SpecEventTypeSchema: GenEnum<SpecEventType>;

/**
 * Spec principal types
 *
 * @generated from enum platform.spec.v2.SpecPrincipalType
 */
export enum SpecPrincipalType {
  /**
   * A principal can be:
   *
   * @generated from enum value: SPEC_PRINCIPAL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A Platform Account (for end users)
   *
   * @generated from enum value: SPEC_PRINCIPAL_TYPE_USER = 1;
   */
  USER = 1,

  /**
   * A service account (for applications and compute workloads)
   *
   * @generated from enum value: SPEC_PRINCIPAL_TYPE_SERVICE_ACCOUNT = 2;
   */
  SERVICE_ACCOUNT = 2,

  /**
   * Group
   *
   * @generated from enum value: SPEC_PRINCIPAL_TYPE_GROUP = 3;
   */
  GROUP = 3,

  /**
   * Domain that can access a resource
   *
   * @generated from enum value: SPEC_PRINCIPAL_TYPE_DOMAIN = 4;
   */
  DOMAIN = 4,
}

/**
 * Describes the enum platform.spec.v2.SpecPrincipalType.
 */
export declare const SpecPrincipalTypeSchema: GenEnum<SpecPrincipalType>;

