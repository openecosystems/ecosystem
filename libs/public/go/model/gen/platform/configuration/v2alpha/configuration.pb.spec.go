// Code generated by protoc-gen-platform go/spec. DO NOT EDIT.
// source: platform/configuration/v2alpha/configuration.proto

package configurationv2alphapbmodel

type ConfigurationCommand int
type ConfigurationEvent int

const (
	ConfigurationTypeName                         string = "configuration"
	ConfigurationTypeNamePlural                   string = "configurations"
	ConfigurationTypeNameScreamingCamelCase       string = "CONFIGURATION"
	ConfigurationTypeNamePluralScreamingCamelCase string = "CONFIGURATIONS"
	ConfigurationTypeNameEventPrefix              string = "configuration."
)

const (
	ConfigurationCommandsUnspecified ConfigurationCommand = iota
	ConfigurationCommandsCreate      ConfigurationCommand = iota
	ConfigurationCommandsUpdate      ConfigurationCommand = iota
	ConfigurationCommandsDelete      ConfigurationCommand = iota
	UnrecognizedConfigurationCommand ConfigurationCommand = -1
)

const (
	ConfigurationEventsUnspecified ConfigurationEvent = iota
	ConfigurationEventsCreated     ConfigurationEvent = iota
	ConfigurationEventsUpdated     ConfigurationEvent = iota
	ConfigurationEventsDeleted     ConfigurationEvent = iota
	UnrecognizedConfigurationEvent ConfigurationEvent = -1
)

const (
	CommandDataConfigurationTopic  string = "configuration.data.command"
	EventDataConfigurationTopic    string = "configuration.data.event"
	RoutineDataConfigurationTopic  string = "configuration.data.routine"
	UnrecognizedConfigurationTopic string = "unrecognized"
)

func (c ConfigurationCommand) CommandName() string {

	switch c {

	case ConfigurationCommandsUnspecified:
		return "ConfigurationCommandsUnspecified"
	case ConfigurationCommandsCreate:
		return "ConfigurationCommandsCreate"
	case ConfigurationCommandsUpdate:
		return "ConfigurationCommandsUpdate"
	case ConfigurationCommandsDelete:
		return "ConfigurationCommandsDelete"
	default:
		return "UnrecognizedConfigurationCommand"
	}

}

func (e ConfigurationEvent) EventName() string {

	switch e {

	case ConfigurationEventsUnspecified:
		return "ConfigurationEventsUnspecified"
	case ConfigurationEventsCreated:
		return "ConfigurationEventsCreated"
	case ConfigurationEventsUpdated:
		return "ConfigurationEventsUpdated"
	case ConfigurationEventsDeleted:
		return "ConfigurationEventsDeleted"
	default:
		return "UnrecognizedConfigurationEvent"
	}

}

func (c ConfigurationCommand) CommandTopic() string {

	switch c {

	case ConfigurationCommandsUnspecified:
		return CommandDataConfigurationTopic
	case ConfigurationCommandsCreate:
		return CommandDataConfigurationTopic
	case ConfigurationCommandsUpdate:
		return CommandDataConfigurationTopic
	case ConfigurationCommandsDelete:
		return CommandDataConfigurationTopic
	default:
		return UnrecognizedConfigurationTopic
	}

}

func (e ConfigurationEvent) EventTopic() string {

	switch e {

	case ConfigurationEventsUnspecified:
		return EventDataConfigurationTopic
	case ConfigurationEventsCreated:
		return EventDataConfigurationTopic
	case ConfigurationEventsUpdated:
		return EventDataConfigurationTopic
	case ConfigurationEventsDeleted:
		return EventDataConfigurationTopic
	default:
		return UnrecognizedConfigurationTopic
	}

}

func (c ConfigurationCommand) CommandTopicWildcard() string {
	return ConfigurationTypeNameEventPrefix + ">"
}

func (e ConfigurationEvent) EventTopicWildcard() string {
	return ConfigurationTypeNameEventPrefix + ">"
}

func GetConfigurationCommand(command string) ConfigurationCommand {

	switch command {

	case "ConfigurationCommandsUnspecified":
		return ConfigurationCommandsUnspecified
	case "ConfigurationCommandsCreate":
		return ConfigurationCommandsCreate
	case "ConfigurationCommandsUpdate":
		return ConfigurationCommandsUpdate
	case "ConfigurationCommandsDelete":
		return ConfigurationCommandsDelete
	default:
		return UnrecognizedConfigurationCommand
	}
}

func GetConfigurationEvent(event string) ConfigurationEvent {

	switch event {

	case "ConfigurationEventsUnspecified":
		return ConfigurationEventsUnspecified
	case "ConfigurationEventsCreated":
		return ConfigurationEventsCreated
	case "ConfigurationEventsUpdated":
		return ConfigurationEventsUpdated
	case "ConfigurationEventsDeleted":
		return ConfigurationEventsDeleted
	default:
		return UnrecognizedConfigurationEvent
	}
}
