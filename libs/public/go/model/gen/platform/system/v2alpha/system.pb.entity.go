// Code generated by protoc-gen-platform go/entity-unspecified. DO NOT EDIT.
// source: platform/system/v2alpha/system.proto

package systemv2alphapbmodel

import (
	"context"
	"encoding/json"

	"errors"
	"github.com/openecosystems/ecosystem/libs/public/go/protobuf/gen/platform/system/v2alpha"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2alpha"
	"google.golang.org/protobuf/types/known/anypb"

	specv2pb "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type SystemSpecEntity struct {
	System *systemv2alphapb.System
}

func NewSystemSpecEntity(specContext *specv2pb.SpecContext) (*SystemSpecEntity, error) {

	return &SystemSpecEntity{
		System: &systemv2alphapb.System{},
	}, nil

}

func NewSystemSpecEntityFromSpec(ctx context.Context, s *specv2pb.Spec) (*SystemSpecEntity, error) {
	data := &systemv2alphapb.System{}
	err := sdkv2alphalib.GetDataFromSpec[*systemv2alphapb.System](ctx, s, data)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(err)
	}

	return &SystemSpecEntity{
		System: data,
	}, nil
}

func (entity *SystemSpecEntity) ToProto() (*systemv2alphapb.System, error) {

	return entity.System, nil

}

func (entity *SystemSpecEntity) ToEvent() (*string, error) {

	bytes, err := json.Marshal(entity)
	if err != nil {
		return nil, err
	}

	event := string(bytes)

	return &event, nil

}

func (entity *SystemSpecEntity) FromEvent(event *string) (*SystemSpecEntity, error) {

	bytes := []byte(*event)
	err := json.Unmarshal(bytes, entity)
	if err != nil {
		return nil, err
	}

	return entity, nil

}

func (entity *SystemSpecEntity) MarshalEntity() (*anypb.Any, error) {

	d, err := anypb.New(entity.System)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall entity"), err)
	}

	return d, nil

}

func (entity *SystemSpecEntity) MarshalProto() (*anypb.Any, error) {

	proto, err := entity.ToProto()
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to convert entity to proto"), err)
	}

	d, err := anypb.New(proto)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall proto"), err)
	}

	return d, nil

}

func (entity *SystemSpecEntity) TypeName() string {
	return "system"
}

func (entity *SystemSpecEntity) CommandTopic() string {
	return CommandDataSystemTopic
}

func (entity *SystemSpecEntity) EventTopic() string {
	return EventDataSystemTopic
}

func (entity *SystemSpecEntity) RoutineTopic() string {
	return RoutineDataSystemTopic
}

func (entity *SystemSpecEntity) TopicWildcard() string {
	return SystemTypeNameEventPrefix + ">"
}

func (entity *SystemSpecEntity) SystemName() string {
	return "system"
}

func (entity *SystemSpecEntity) internal() {

	var _ timestamppb.Timestamp
	//enabled_at

	var _ timestamppb.Timestamp
	//created_at

	var _ timestamppb.Timestamp
	//updated_at

}
