// Code generated by protoc-gen-platform go/entity-unspecified. DO NOT EDIT.
// source: platform/event/v2alpha/event_subscription.proto

package eventv2alphapbmodel

import (
	"context"
	"encoding/json"

	"errors"
	"github.com/segmentio/ksuid"
	"google.golang.org/protobuf/types/known/anypb"
	"libs/public/go/protobuf/gen/platform/event/v2alpha"
	"libs/public/go/sdk/v2alpha"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	specv2pb "libs/protobuf/go/protobuf/gen/platform/spec/v2"
)

type EventSubscriptionSpecEntity struct {
	EventSubscription *eventv2alphapb.EventSubscription
}

func NewEventSubscriptionSpecEntity(specContext *specv2pb.SpecContext) (*EventSubscriptionSpecEntity, error) {

	id := ksuid.New()
	createdAt := timestamppb.Now()

	return &EventSubscriptionSpecEntity{
		EventSubscription: &eventv2alphapb.EventSubscription{
			Id:        id.String(),
			CreatedAt: createdAt,
			UpdatedAt: createdAt,
		},
	}, nil

}

func NewEventSubscriptionSpecEntityFromSpec(ctx context.Context, s *specv2pb.Spec) (*EventSubscriptionSpecEntity, error) {
	data := &eventv2alphapb.EventSubscription{}
	err := sdkv2alphalib.GetDataFromSpec[*eventv2alphapb.EventSubscription](ctx, s, data)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(err)
	}

	return &EventSubscriptionSpecEntity{
		EventSubscription: data,
	}, nil
}

func (entity *EventSubscriptionSpecEntity) ToProto() (*eventv2alphapb.EventSubscription, error) {

	return entity.EventSubscription, nil

}

func (entity *EventSubscriptionSpecEntity) ToEvent() (*string, error) {

	bytes, err := json.Marshal(entity)
	if err != nil {
		return nil, err
	}

	event := string(bytes)

	return &event, nil

}

func (entity *EventSubscriptionSpecEntity) FromEvent(event *string) (*EventSubscriptionSpecEntity, error) {

	bytes := []byte(*event)
	err := json.Unmarshal(bytes, entity)
	if err != nil {
		return nil, err
	}

	return entity, nil

}

func (entity *EventSubscriptionSpecEntity) MarshalEntity() (*anypb.Any, error) {

	d, err := anypb.New(entity.EventSubscription)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall entity"), err)
	}

	return d, nil

}

func (entity *EventSubscriptionSpecEntity) MarshalProto() (*anypb.Any, error) {

	proto, err := entity.ToProto()
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to convert entity to proto"), err)
	}

	d, err := anypb.New(proto)
	if err != nil {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("failed to marshall proto"), err)
	}

	return d, nil

}

func (entity *EventSubscriptionSpecEntity) TypeName() string {
	return "eventSubscription"
}

func (entity *EventSubscriptionSpecEntity) CommandTopic() string {
	return CommandDataEventSubscriptionTopic
}

func (entity *EventSubscriptionSpecEntity) EventTopic() string {
	return EventDataEventSubscriptionTopic
}

func (entity *EventSubscriptionSpecEntity) RoutineTopic() string {
	return RoutineDataEventSubscriptionTopic
}

func (entity *EventSubscriptionSpecEntity) TopicWildcard() string {
	return EventSubscriptionTypeNameEventPrefix + ">"
}

func (entity *EventSubscriptionSpecEntity) SystemName() string {
	return "event"
}

func (entity *EventSubscriptionSpecEntity) internal() {

	var _ timestamppb.Timestamp
	//created_at

	var _ timestamppb.Timestamp
	//updated_at

	var _ *eventv2alphapb.EventSubscriptionStatus

	var _ *eventv2alphapb.SubscriptionType
	var _ *specv2pb.SpecPublic
}
