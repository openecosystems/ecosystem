// Code generated by protoc-gen-platform go/spec. DO NOT EDIT.
// source: platform/event/v2alpha/event_subscription.proto

package eventv2alphapbmodel

type EventSubscriptionCommand int
type EventSubscriptionEvent int

const (
	EventSubscriptionTypeName                         string = "eventSubscription"
	EventSubscriptionTypeNamePlural                   string = "eventSubscriptions"
	EventSubscriptionTypeNameScreamingCamelCase       string = "EVENT_SUBSCRIPTION"
	EventSubscriptionTypeNamePluralScreamingCamelCase string = "EVENT_SUBSCRIPTIONS"
	EventSubscriptionTypeNameEventPrefix              string = "eventSubscription."
)

const (
	EventSubscriptionCommandsUnspecified EventSubscriptionCommand = iota
	EventSubscriptionCommandsSubscribe   EventSubscriptionCommand = iota
	EventSubscriptionCommandsUnSubscribe EventSubscriptionCommand = iota
	UnrecognizedEventSubscriptionCommand EventSubscriptionCommand = -1
)

const (
	EventSubscriptionEventsUnspecified  EventSubscriptionEvent = iota
	EventSubscriptionEventsSubscribed   EventSubscriptionEvent = iota
	EventSubscriptionEventsUnSubscribed EventSubscriptionEvent = iota
	UnrecognizedEventSubscriptionEvent  EventSubscriptionEvent = -1
)

const (
	CommandDataEventSubscriptionTopic  string = "eventSubscription.data.command"
	EventDataEventSubscriptionTopic    string = "eventSubscription.data.event"
	RoutineDataEventSubscriptionTopic  string = "eventSubscription.data.routine"
	UnrecognizedEventSubscriptionTopic string = "unrecognized"
)

func (c EventSubscriptionCommand) CommandName() string {

	switch c {

	case EventSubscriptionCommandsUnspecified:
		return "EventSubscriptionCommandsUnspecified"
	case EventSubscriptionCommandsSubscribe:
		return "EventSubscriptionCommandsSubscribe"
	case EventSubscriptionCommandsUnSubscribe:
		return "EventSubscriptionCommandsUnSubscribe"
	default:
		return "UnrecognizedEventSubscriptionCommand"
	}

}

func (e EventSubscriptionEvent) EventName() string {

	switch e {

	case EventSubscriptionEventsUnspecified:
		return "EventSubscriptionEventsUnspecified"
	case EventSubscriptionEventsSubscribed:
		return "EventSubscriptionEventsSubscribed"
	case EventSubscriptionEventsUnSubscribed:
		return "EventSubscriptionEventsUnSubscribed"
	default:
		return "UnrecognizedEventSubscriptionEvent"
	}

}

func (c EventSubscriptionCommand) CommandTopic() string {

	switch c {

	case EventSubscriptionCommandsUnspecified:
		return CommandDataEventSubscriptionTopic
	case EventSubscriptionCommandsSubscribe:
		return CommandDataEventSubscriptionTopic
	case EventSubscriptionCommandsUnSubscribe:
		return CommandDataEventSubscriptionTopic
	default:
		return UnrecognizedEventSubscriptionTopic
	}

}

func (e EventSubscriptionEvent) EventTopic() string {

	switch e {

	case EventSubscriptionEventsUnspecified:
		return EventDataEventSubscriptionTopic
	case EventSubscriptionEventsSubscribed:
		return EventDataEventSubscriptionTopic
	case EventSubscriptionEventsUnSubscribed:
		return EventDataEventSubscriptionTopic
	default:
		return UnrecognizedEventSubscriptionTopic
	}

}

func (c EventSubscriptionCommand) CommandTopicWildcard() string {
	return EventSubscriptionTypeNameEventPrefix + ">"
}

func (e EventSubscriptionEvent) EventTopicWildcard() string {
	return EventSubscriptionTypeNameEventPrefix + ">"
}

func GetEventSubscriptionCommand(command string) EventSubscriptionCommand {

	switch command {

	case "EventSubscriptionCommandsUnspecified":
		return EventSubscriptionCommandsUnspecified
	case "EventSubscriptionCommandsSubscribe":
		return EventSubscriptionCommandsSubscribe
	case "EventSubscriptionCommandsUnSubscribe":
		return EventSubscriptionCommandsUnSubscribe
	default:
		return UnrecognizedEventSubscriptionCommand
	}
}

func GetEventSubscriptionEvent(event string) EventSubscriptionEvent {

	switch event {

	case "EventSubscriptionEventsUnspecified":
		return EventSubscriptionEventsUnspecified
	case "EventSubscriptionEventsSubscribed":
		return EventSubscriptionEventsSubscribed
	case "EventSubscriptionEventsUnSubscribed":
		return EventSubscriptionEventsUnSubscribed
	default:
		return UnrecognizedEventSubscriptionEvent
	}
}
