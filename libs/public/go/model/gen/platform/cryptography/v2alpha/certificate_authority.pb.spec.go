// Code generated by protoc-gen-platform go/spec. DO NOT EDIT.
// source: platform/cryptography/v2alpha/certificate_authority.proto

package cryptographyv2alphapbmodel

type CertificateAuthorityCommand int
type CertificateAuthorityEvent int

const (
	CertificateAuthorityTypeName                         string = "certificateAuthority"
	CertificateAuthorityTypeNamePlural                   string = "certificateAuthorities"
	CertificateAuthorityTypeNameScreamingCamelCase       string = "CERTIFICATE_AUTHORITY"
	CertificateAuthorityTypeNamePluralScreamingCamelCase string = "CERTIFICATE_AUTHORITIES"
	CertificateAuthorityTypeNameEventPrefix              string = "certificateAuthority."
)

const (
	CertificateAuthorityCommandsUnspecified                CertificateAuthorityCommand = iota
	CertificateAuthorityCommandsCreateCertificateAuthority CertificateAuthorityCommand = iota
	UnrecognizedCertificateAuthorityCommand                CertificateAuthorityCommand = -1
)

const (
	CertificateAuthorityEventsUnspecified                 CertificateAuthorityEvent = iota
	CertificateAuthorityEventsCreatedCertificateAuthority CertificateAuthorityEvent = iota
	UnrecognizedCertificateAuthorityEvent                 CertificateAuthorityEvent = -1
)

const (
	CommandDataCertificateAuthorityTopic  string = "certificateAuthority.data.command"
	EventDataCertificateAuthorityTopic    string = "certificateAuthority.data.event"
	RoutineDataCertificateAuthorityTopic  string = "certificateAuthority.data.routine"
	UnrecognizedCertificateAuthorityTopic string = "unrecognized"
)

func (c CertificateAuthorityCommand) CommandName() string {

	switch c {

	case CertificateAuthorityCommandsUnspecified:
		return "CertificateAuthorityCommandsUnspecified"
	case CertificateAuthorityCommandsCreateCertificateAuthority:
		return "CertificateAuthorityCommandsCreateCertificateAuthority"
	default:
		return "UnrecognizedCertificateAuthorityCommand"
	}

}

func (e CertificateAuthorityEvent) EventName() string {

	switch e {

	case CertificateAuthorityEventsUnspecified:
		return "CertificateAuthorityEventsUnspecified"
	case CertificateAuthorityEventsCreatedCertificateAuthority:
		return "CertificateAuthorityEventsCreatedCertificateAuthority"
	default:
		return "UnrecognizedCertificateAuthorityEvent"
	}

}

func (c CertificateAuthorityCommand) CommandTopic() string {

	switch c {

	case CertificateAuthorityCommandsUnspecified:
		return CommandDataCertificateAuthorityTopic
	case CertificateAuthorityCommandsCreateCertificateAuthority:
		return CommandDataCertificateAuthorityTopic
	default:
		return UnrecognizedCertificateAuthorityTopic
	}

}

func (e CertificateAuthorityEvent) EventTopic() string {

	switch e {

	case CertificateAuthorityEventsUnspecified:
		return EventDataCertificateAuthorityTopic
	case CertificateAuthorityEventsCreatedCertificateAuthority:
		return EventDataCertificateAuthorityTopic
	default:
		return UnrecognizedCertificateAuthorityTopic
	}

}

func (c CertificateAuthorityCommand) CommandTopicWildcard() string {
	return CertificateAuthorityTypeNameEventPrefix + ">"
}

func (e CertificateAuthorityEvent) EventTopicWildcard() string {
	return CertificateAuthorityTypeNameEventPrefix + ">"
}

func GetCertificateAuthorityCommand(command string) CertificateAuthorityCommand {

	switch command {

	case "CertificateAuthorityCommandsUnspecified":
		return CertificateAuthorityCommandsUnspecified
	case "CertificateAuthorityCommandsCreateCertificateAuthority":
		return CertificateAuthorityCommandsCreateCertificateAuthority
	default:
		return UnrecognizedCertificateAuthorityCommand
	}
}

func GetCertificateAuthorityEvent(event string) CertificateAuthorityEvent {

	switch event {

	case "CertificateAuthorityEventsUnspecified":
		return CertificateAuthorityEventsUnspecified
	case "CertificateAuthorityEventsCreatedCertificateAuthority":
		return CertificateAuthorityEventsCreatedCertificateAuthority
	default:
		return UnrecognizedCertificateAuthorityEvent
	}
}
