// Code generated by protoc-gen-platform go/spec. DO NOT EDIT.
// source: platform/ecosystem/v2alpha/ecosystem.proto

package ecosystemv2alphapbmodel

type EcosystemCommand int
type EcosystemEvent int

const (
	EcosystemTypeName                         string = "ecosystem"
	EcosystemTypeNamePlural                   string = "ecosystems"
	EcosystemTypeNameScreamingCamelCase       string = "ECOSYSTEM"
	EcosystemTypeNamePluralScreamingCamelCase string = "ECOSYSTEMS"
	EcosystemTypeNameEventPrefix              string = "ecosystem."
)

const (
	EcosystemCommandsUnspecified EcosystemCommand = iota
	EcosystemCommandsCreate      EcosystemCommand = iota
	EcosystemCommandsUpdate      EcosystemCommand = iota
	EcosystemCommandsDelete      EcosystemCommand = iota
	UnrecognizedEcosystemCommand EcosystemCommand = -1
)

const (
	EcosystemEventsUnspecified EcosystemEvent = iota
	EcosystemEventsCreated     EcosystemEvent = iota
	EcosystemEventsUpdated     EcosystemEvent = iota
	EcosystemEventsDeleted     EcosystemEvent = iota
	EcosystemEventsErrored     EcosystemEvent = iota
	UnrecognizedEcosystemEvent EcosystemEvent = -1
)

const (
	CommandDataEcosystemTopic  string = "ecosystem.data.command"
	EventDataEcosystemTopic    string = "ecosystem.data.event"
	RoutineDataEcosystemTopic  string = "ecosystem.data.routine"
	UnrecognizedEcosystemTopic string = "unrecognized"
)

func (c EcosystemCommand) CommandName() string {

	switch c {

	case EcosystemCommandsUnspecified:
		return "EcosystemCommandsUnspecified"
	case EcosystemCommandsCreate:
		return "EcosystemCommandsCreate"
	case EcosystemCommandsUpdate:
		return "EcosystemCommandsUpdate"
	case EcosystemCommandsDelete:
		return "EcosystemCommandsDelete"
	default:
		return "UnrecognizedEcosystemCommand"
	}

}

func (e EcosystemEvent) EventName() string {

	switch e {

	case EcosystemEventsUnspecified:
		return "EcosystemEventsUnspecified"
	case EcosystemEventsCreated:
		return "EcosystemEventsCreated"
	case EcosystemEventsUpdated:
		return "EcosystemEventsUpdated"
	case EcosystemEventsDeleted:
		return "EcosystemEventsDeleted"
	case EcosystemEventsErrored:
		return "EcosystemEventsErrored"
	default:
		return "UnrecognizedEcosystemEvent"
	}

}

func (c EcosystemCommand) CommandTopic() string {

	switch c {

	case EcosystemCommandsUnspecified:
		return CommandDataEcosystemTopic
	case EcosystemCommandsCreate:
		return CommandDataEcosystemTopic
	case EcosystemCommandsUpdate:
		return CommandDataEcosystemTopic
	case EcosystemCommandsDelete:
		return CommandDataEcosystemTopic
	default:
		return UnrecognizedEcosystemTopic
	}

}

func (e EcosystemEvent) EventTopic() string {

	switch e {

	case EcosystemEventsUnspecified:
		return EventDataEcosystemTopic
	case EcosystemEventsCreated:
		return EventDataEcosystemTopic
	case EcosystemEventsUpdated:
		return EventDataEcosystemTopic
	case EcosystemEventsDeleted:
		return EventDataEcosystemTopic
	case EcosystemEventsErrored:
		return EventDataEcosystemTopic
	default:
		return UnrecognizedEcosystemTopic
	}

}

func (c EcosystemCommand) CommandTopicWildcard() string {
	return EcosystemTypeNameEventPrefix + ">"
}

func (e EcosystemEvent) EventTopicWildcard() string {
	return EcosystemTypeNameEventPrefix + ">"
}

func GetEcosystemCommand(command string) EcosystemCommand {

	switch command {

	case "EcosystemCommandsUnspecified":
		return EcosystemCommandsUnspecified
	case "EcosystemCommandsCreate":
		return EcosystemCommandsCreate
	case "EcosystemCommandsUpdate":
		return EcosystemCommandsUpdate
	case "EcosystemCommandsDelete":
		return EcosystemCommandsDelete
	default:
		return UnrecognizedEcosystemCommand
	}
}

func GetEcosystemEvent(event string) EcosystemEvent {

	switch event {

	case "EcosystemEventsUnspecified":
		return EcosystemEventsUnspecified
	case "EcosystemEventsCreated":
		return EcosystemEventsCreated
	case "EcosystemEventsUpdated":
		return EcosystemEventsUpdated
	case "EcosystemEventsDeleted":
		return EcosystemEventsDeleted
	case "EcosystemEventsErrored":
		return EcosystemEventsErrored
	default:
		return UnrecognizedEcosystemEvent
	}
}
