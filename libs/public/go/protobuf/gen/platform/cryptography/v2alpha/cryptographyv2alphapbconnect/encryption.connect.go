// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/cryptography/v2alpha/encryption.proto

package cryptographyv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/cryptography/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EncryptionServiceName is the fully-qualified name of the EncryptionService service.
	EncryptionServiceName = "platform.cryptography.v2alpha.EncryptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EncryptionServiceEncryptProcedure is the fully-qualified name of the EncryptionService's Encrypt
	// RPC.
	EncryptionServiceEncryptProcedure = "/platform.cryptography.v2alpha.EncryptionService/Encrypt"
	// EncryptionServiceDecryptProcedure is the fully-qualified name of the EncryptionService's Decrypt
	// RPC.
	EncryptionServiceDecryptProcedure = "/platform.cryptography.v2alpha.EncryptionService/Decrypt"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	encryptionServiceServiceDescriptor       = v2alpha.File_platform_cryptography_v2alpha_encryption_proto.Services().ByName("EncryptionService")
	encryptionServiceEncryptMethodDescriptor = encryptionServiceServiceDescriptor.Methods().ByName("Encrypt")
	encryptionServiceDecryptMethodDescriptor = encryptionServiceServiceDescriptor.Methods().ByName("Decrypt")
)

// EncryptionServiceClient is a client for the platform.cryptography.v2alpha.EncryptionService
// service.
type EncryptionServiceClient interface {
	Encrypt(context.Context, *connect.Request[v2alpha.EncryptRequest]) (*connect.Response[v2alpha.EncryptResponse], error)
	Decrypt(context.Context, *connect.Request[v2alpha.DecryptRequest]) (*connect.Response[v2alpha.DecryptResponse], error)
}

// NewEncryptionServiceClient constructs a client for the
// platform.cryptography.v2alpha.EncryptionService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEncryptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EncryptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &encryptionServiceClient{
		encrypt: connect.NewClient[v2alpha.EncryptRequest, v2alpha.EncryptResponse](
			httpClient,
			baseURL+EncryptionServiceEncryptProcedure,
			connect.WithSchema(encryptionServiceEncryptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		decrypt: connect.NewClient[v2alpha.DecryptRequest, v2alpha.DecryptResponse](
			httpClient,
			baseURL+EncryptionServiceDecryptProcedure,
			connect.WithSchema(encryptionServiceDecryptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// encryptionServiceClient implements EncryptionServiceClient.
type encryptionServiceClient struct {
	encrypt *connect.Client[v2alpha.EncryptRequest, v2alpha.EncryptResponse]
	decrypt *connect.Client[v2alpha.DecryptRequest, v2alpha.DecryptResponse]
}

// Encrypt calls platform.cryptography.v2alpha.EncryptionService.Encrypt.
func (c *encryptionServiceClient) Encrypt(ctx context.Context, req *connect.Request[v2alpha.EncryptRequest]) (*connect.Response[v2alpha.EncryptResponse], error) {
	return c.encrypt.CallUnary(ctx, req)
}

// Decrypt calls platform.cryptography.v2alpha.EncryptionService.Decrypt.
func (c *encryptionServiceClient) Decrypt(ctx context.Context, req *connect.Request[v2alpha.DecryptRequest]) (*connect.Response[v2alpha.DecryptResponse], error) {
	return c.decrypt.CallUnary(ctx, req)
}

// EncryptionServiceHandler is an implementation of the
// platform.cryptography.v2alpha.EncryptionService service.
type EncryptionServiceHandler interface {
	Encrypt(context.Context, *connect.Request[v2alpha.EncryptRequest]) (*connect.Response[v2alpha.EncryptResponse], error)
	Decrypt(context.Context, *connect.Request[v2alpha.DecryptRequest]) (*connect.Response[v2alpha.DecryptResponse], error)
}

// NewEncryptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEncryptionServiceHandler(svc EncryptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	encryptionServiceEncryptHandler := connect.NewUnaryHandler(
		EncryptionServiceEncryptProcedure,
		svc.Encrypt,
		connect.WithSchema(encryptionServiceEncryptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	encryptionServiceDecryptHandler := connect.NewUnaryHandler(
		EncryptionServiceDecryptProcedure,
		svc.Decrypt,
		connect.WithSchema(encryptionServiceDecryptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.cryptography.v2alpha.EncryptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EncryptionServiceEncryptProcedure:
			encryptionServiceEncryptHandler.ServeHTTP(w, r)
		case EncryptionServiceDecryptProcedure:
			encryptionServiceDecryptHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEncryptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEncryptionServiceHandler struct{}

func (UnimplementedEncryptionServiceHandler) Encrypt(context.Context, *connect.Request[v2alpha.EncryptRequest]) (*connect.Response[v2alpha.EncryptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.cryptography.v2alpha.EncryptionService.Encrypt is not implemented"))
}

func (UnimplementedEncryptionServiceHandler) Decrypt(context.Context, *connect.Request[v2alpha.DecryptRequest]) (*connect.Response[v2alpha.DecryptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.cryptography.v2alpha.EncryptionService.Decrypt is not implemented"))
}
