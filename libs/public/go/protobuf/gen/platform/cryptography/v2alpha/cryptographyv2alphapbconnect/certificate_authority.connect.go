// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/cryptography/v2alpha/certificate_authority.proto

package cryptographyv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/cryptography/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CertificateAuthorityServiceName is the fully-qualified name of the CertificateAuthorityService
	// service.
	CertificateAuthorityServiceName = "platform.cryptography.v2alpha.CertificateAuthorityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CertificateAuthorityServiceCreateCertificateAuthorityProcedure is the fully-qualified name of the
	// CertificateAuthorityService's CreateCertificateAuthority RPC.
	CertificateAuthorityServiceCreateCertificateAuthorityProcedure = "/platform.cryptography.v2alpha.CertificateAuthorityService/CreateCertificateAuthority"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	certificateAuthorityServiceServiceDescriptor                          = v2alpha.File_platform_cryptography_v2alpha_certificate_authority_proto.Services().ByName("CertificateAuthorityService")
	certificateAuthorityServiceCreateCertificateAuthorityMethodDescriptor = certificateAuthorityServiceServiceDescriptor.Methods().ByName("CreateCertificateAuthority")
)

// CertificateAuthorityServiceClient is a client for the
// platform.cryptography.v2alpha.CertificateAuthorityService service.
type CertificateAuthorityServiceClient interface {
	// Method to CreateCertificateAuthority to events based on scopes
	CreateCertificateAuthority(context.Context, *connect.Request[v2alpha.CreateCertificateAuthorityRequest]) (*connect.Response[v2alpha.CreateCertificateAuthorityResponse], error)
}

// NewCertificateAuthorityServiceClient constructs a client for the
// platform.cryptography.v2alpha.CertificateAuthorityService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCertificateAuthorityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CertificateAuthorityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &certificateAuthorityServiceClient{
		createCertificateAuthority: connect.NewClient[v2alpha.CreateCertificateAuthorityRequest, v2alpha.CreateCertificateAuthorityResponse](
			httpClient,
			baseURL+CertificateAuthorityServiceCreateCertificateAuthorityProcedure,
			connect.WithSchema(certificateAuthorityServiceCreateCertificateAuthorityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// certificateAuthorityServiceClient implements CertificateAuthorityServiceClient.
type certificateAuthorityServiceClient struct {
	createCertificateAuthority *connect.Client[v2alpha.CreateCertificateAuthorityRequest, v2alpha.CreateCertificateAuthorityResponse]
}

// CreateCertificateAuthority calls
// platform.cryptography.v2alpha.CertificateAuthorityService.CreateCertificateAuthority.
func (c *certificateAuthorityServiceClient) CreateCertificateAuthority(ctx context.Context, req *connect.Request[v2alpha.CreateCertificateAuthorityRequest]) (*connect.Response[v2alpha.CreateCertificateAuthorityResponse], error) {
	return c.createCertificateAuthority.CallUnary(ctx, req)
}

// CertificateAuthorityServiceHandler is an implementation of the
// platform.cryptography.v2alpha.CertificateAuthorityService service.
type CertificateAuthorityServiceHandler interface {
	// Method to CreateCertificateAuthority to events based on scopes
	CreateCertificateAuthority(context.Context, *connect.Request[v2alpha.CreateCertificateAuthorityRequest]) (*connect.Response[v2alpha.CreateCertificateAuthorityResponse], error)
}

// NewCertificateAuthorityServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCertificateAuthorityServiceHandler(svc CertificateAuthorityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	certificateAuthorityServiceCreateCertificateAuthorityHandler := connect.NewUnaryHandler(
		CertificateAuthorityServiceCreateCertificateAuthorityProcedure,
		svc.CreateCertificateAuthority,
		connect.WithSchema(certificateAuthorityServiceCreateCertificateAuthorityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.cryptography.v2alpha.CertificateAuthorityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CertificateAuthorityServiceCreateCertificateAuthorityProcedure:
			certificateAuthorityServiceCreateCertificateAuthorityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCertificateAuthorityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCertificateAuthorityServiceHandler struct{}

func (UnimplementedCertificateAuthorityServiceHandler) CreateCertificateAuthority(context.Context, *connect.Request[v2alpha.CreateCertificateAuthorityRequest]) (*connect.Response[v2alpha.CreateCertificateAuthorityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.cryptography.v2alpha.CertificateAuthorityService.CreateCertificateAuthority is not implemented"))
}
