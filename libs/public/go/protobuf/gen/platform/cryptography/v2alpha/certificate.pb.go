// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: platform/cryptography/v2alpha/certificate.proto

package cryptographyv2alphapb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported event type for subscription.
type CertificateType int32

const (
	CertificateType_CERTIFICATE_TYPE_UNSPECIFIED  CertificateType = 0 // Unspecified or unknown subscription type.
	CertificateType_CERTIFICATE_TYPE_ORGANIZATION CertificateType = 1 // Certificate for an organization.
	CertificateType_CERTIFICATE_TYPE_ECOSYSTEM    CertificateType = 2 // Certificate for an ecosystem
	CertificateType_CERTIFICATE_TYPE_USER         CertificateType = 3 // Certificate for a user.
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERTIFICATE_TYPE_UNSPECIFIED",
		1: "CERTIFICATE_TYPE_ORGANIZATION",
		2: "CERTIFICATE_TYPE_ECOSYSTEM",
		3: "CERTIFICATE_TYPE_USER",
	}
	CertificateType_value = map[string]int32{
		"CERTIFICATE_TYPE_UNSPECIFIED":  0,
		"CERTIFICATE_TYPE_ORGANIZATION": 1,
		"CERTIFICATE_TYPE_ECOSYSTEM":    2,
		"CERTIFICATE_TYPE_USER":         3,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[0].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[0]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{0}
}

// The current status of a event
type EventCertificateStatus int32

const (
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_UNSPECIFIED EventCertificateStatus = 0 // Unspecified or unknown status.
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_CREATING    EventCertificateStatus = 1 // Certificate is being created.
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_ERROR       EventCertificateStatus = 4 // Error.
)

// Enum value maps for EventCertificateStatus.
var (
	EventCertificateStatus_name = map[int32]string{
		0: "EVENT_CERTIFICATE_STATUS_UNSPECIFIED",
		1: "EVENT_CERTIFICATE_STATUS_CREATING",
		4: "EVENT_CERTIFICATE_STATUS_ERROR",
	}
	EventCertificateStatus_value = map[string]int32{
		"EVENT_CERTIFICATE_STATUS_UNSPECIFIED": 0,
		"EVENT_CERTIFICATE_STATUS_CREATING":    1,
		"EVENT_CERTIFICATE_STATUS_ERROR":       4,
	}
)

func (x EventCertificateStatus) Enum() *EventCertificateStatus {
	p := new(EventCertificateStatus)
	*p = x
	return p
}

func (x EventCertificateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCertificateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[1].Descriptor()
}

func (EventCertificateStatus) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[1]
}

func (x EventCertificateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCertificateStatus.Descriptor instead.
func (EventCertificateStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{1}
}

type CertificateCommands int32

const (
	CertificateCommands_CERTIFICATE_COMMANDS_UNSPECIFIED        CertificateCommands = 0 // Unspecified or unknown command
	CertificateCommands_CERTIFICATE_COMMANDS_CREATE_CERTIFICATE CertificateCommands = 1
)

// Enum value maps for CertificateCommands.
var (
	CertificateCommands_name = map[int32]string{
		0: "CERTIFICATE_COMMANDS_UNSPECIFIED",
		1: "CERTIFICATE_COMMANDS_CREATE_CERTIFICATE",
	}
	CertificateCommands_value = map[string]int32{
		"CERTIFICATE_COMMANDS_UNSPECIFIED":        0,
		"CERTIFICATE_COMMANDS_CREATE_CERTIFICATE": 1,
	}
)

func (x CertificateCommands) Enum() *CertificateCommands {
	p := new(CertificateCommands)
	*p = x
	return p
}

func (x CertificateCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[2].Descriptor()
}

func (CertificateCommands) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[2]
}

func (x CertificateCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateCommands.Descriptor instead.
func (CertificateCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{2}
}

type CertificateEvents int32

const (
	// Unspecified or unknown event.
	CertificateEvents_CERTIFICATE_EVENTS_UNSPECIFIED CertificateEvents = 0
	// Event Certificate complete.
	CertificateEvents_CERTIFICATE_EVENTS_CREATED_CERTIFICATE CertificateEvents = 1
)

// Enum value maps for CertificateEvents.
var (
	CertificateEvents_name = map[int32]string{
		0: "CERTIFICATE_EVENTS_UNSPECIFIED",
		1: "CERTIFICATE_EVENTS_CREATED_CERTIFICATE",
	}
	CertificateEvents_value = map[string]int32{
		"CERTIFICATE_EVENTS_UNSPECIFIED":         0,
		"CERTIFICATE_EVENTS_CREATED_CERTIFICATE": 1,
	}
)

func (x CertificateEvents) Enum() *CertificateEvents {
	p := new(CertificateEvents)
	*p = x
	return p
}

func (x CertificateEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[3].Descriptor()
}

func (CertificateEvents) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[3]
}

func (x CertificateEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateEvents.Descriptor instead.
func (CertificateEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{3}
}

type CertificateConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pki string `protobuf:"bytes,1,opt,name=pki,proto3" json:"pki,omitempty"`
}

func (x *CertificateConfiguration) Reset() {
	*x = CertificateConfiguration{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateConfiguration) ProtoMessage() {}

func (x *CertificateConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateConfiguration.ProtoReflect.Descriptor instead.
func (*CertificateConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateConfiguration) GetPki() string {
	if x != nil {
		return x.Pki
	}
	return ""
}

// Request for CreateCertificate
type CreateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Certificate Authority. For example, 'Open Ecosystems, Inc.'
	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Encrypt key with this passphrase and write out key in an encrypted format
	EncryptKeyPassphrase string `protobuf:"bytes,4,opt,name=encrypt_key_passphrase,json=encryptKeyPassphrase,proto3" json:"encrypt_key_passphrase,omitempty"`
}

func (x *CreateCertificateRequest) Reset() {
	*x = CreateCertificateRequest{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateRequest) ProtoMessage() {}

func (x *CreateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateRequest.ProtoReflect.Descriptor instead.
func (*CreateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCertificateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCertificateRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CreateCertificateRequest) GetEncryptKeyPassphrase() string {
	if x != nil {
		return x.EncryptKeyPassphrase
	}
	return ""
}

// Response to CreateCertificate
type CreateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Certificate *Certificate            `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *CreateCertificateResponse) Reset() {
	*x = CreateCertificateResponse{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateResponse) ProtoMessage() {}

func (x *CreateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateResponse.ProtoReflect.Descriptor instead.
func (*CreateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCertificateResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *CreateCertificateResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Request for CreateAndSignCertificate
type CreateAndSignCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Certificate Authority. For example, 'Open Ecosystems, Inc.'
	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Encrypt key with this passphrase and write out key in an encrypted format
	EncryptKeyPassphrase string `protobuf:"bytes,4,opt,name=encrypt_key_passphrase,json=encryptKeyPassphrase,proto3" json:"encrypt_key_passphrase,omitempty"`
}

func (x *CreateAndSignCertificateRequest) Reset() {
	*x = CreateAndSignCertificateRequest{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAndSignCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndSignCertificateRequest) ProtoMessage() {}

func (x *CreateAndSignCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndSignCertificateRequest.ProtoReflect.Descriptor instead.
func (*CreateAndSignCertificateRequest) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAndSignCertificateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAndSignCertificateRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CreateAndSignCertificateRequest) GetEncryptKeyPassphrase() string {
	if x != nil {
		return x.EncryptKeyPassphrase
	}
	return ""
}

// Response to CreateAndSignCertificate
type CreateAndSignCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Certificate *Certificate            `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *CreateAndSignCertificateResponse) Reset() {
	*x = CreateAndSignCertificateResponse{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAndSignCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndSignCertificateResponse) ProtoMessage() {}

func (x *CreateAndSignCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndSignCertificateResponse.ProtoReflect.Descriptor instead.
func (*CreateAndSignCertificateResponse) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAndSignCertificateResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *CreateAndSignCertificateResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for this Certificate Authority
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp indicating when this event subscription was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when this event subscription was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name      string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Duration  *durationpb.Duration   `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{5}
}

func (x *Certificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Certificate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Certificate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Certificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certificate) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_platform_cryptography_v2alpha_certificate_proto protoreflect.FileDescriptor

var file_platform_cryptography_v2alpha_certificate_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6b, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6b,
	0x69, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x3a,
	0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x4c, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x06, 0xfa,
	0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0xaa, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02,
	0x08, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a,
	0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xb7, 0x18, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x2a, 0x91, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x13,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08, 0x03, 0x2a, 0x75,
	0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x26, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x1a, 0x08, 0xe2, 0xb8, 0x18, 0x04, 0x08, 0x01, 0x18, 0x01, 0x1a, 0x06, 0x92,
	0xb8, 0x18, 0x02, 0x08, 0x04, 0x32, 0xb3, 0x03, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc3, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x30, 0x01, 0x12, 0xd6, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x9c, 0x01, 0x82, 0xc4,
	0x13, 0x02, 0x08, 0x02, 0x82, 0xb5, 0x18, 0x06, 0x08, 0x03, 0x10, 0x01, 0x18, 0x06, 0x8a, 0xb5,
	0x18, 0x24, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x03, 0x6a,
	0x61, 0x6e, 0x28, 0x02, 0x38, 0x01, 0x92, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x03, 0x9a, 0xb5, 0x18,
	0x02, 0x08, 0x01, 0xa2, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x5a, 0x4f, 0x6c, 0x69, 0x62, 0x73, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_platform_cryptography_v2alpha_certificate_proto_rawDescOnce sync.Once
	file_platform_cryptography_v2alpha_certificate_proto_rawDescData = file_platform_cryptography_v2alpha_certificate_proto_rawDesc
)

func file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP() []byte {
	file_platform_cryptography_v2alpha_certificate_proto_rawDescOnce.Do(func() {
		file_platform_cryptography_v2alpha_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_cryptography_v2alpha_certificate_proto_rawDescData)
	})
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescData
}

var file_platform_cryptography_v2alpha_certificate_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_platform_cryptography_v2alpha_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_platform_cryptography_v2alpha_certificate_proto_goTypes = []any{
	(CertificateType)(0),                     // 0: platform.cryptography.v2alpha.CertificateType
	(EventCertificateStatus)(0),              // 1: platform.cryptography.v2alpha.EventCertificateStatus
	(CertificateCommands)(0),                 // 2: platform.cryptography.v2alpha.CertificateCommands
	(CertificateEvents)(0),                   // 3: platform.cryptography.v2alpha.CertificateEvents
	(*CertificateConfiguration)(nil),         // 4: platform.cryptography.v2alpha.CertificateConfiguration
	(*CreateCertificateRequest)(nil),         // 5: platform.cryptography.v2alpha.CreateCertificateRequest
	(*CreateCertificateResponse)(nil),        // 6: platform.cryptography.v2alpha.CreateCertificateResponse
	(*CreateAndSignCertificateRequest)(nil),  // 7: platform.cryptography.v2alpha.CreateAndSignCertificateRequest
	(*CreateAndSignCertificateResponse)(nil), // 8: platform.cryptography.v2alpha.CreateAndSignCertificateResponse
	(*Certificate)(nil),                      // 9: platform.cryptography.v2alpha.Certificate
	(*durationpb.Duration)(nil),              // 10: google.protobuf.Duration
	(*v2.SpecResponseContext)(nil),           // 11: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),            // 12: google.protobuf.Timestamp
}
var file_platform_cryptography_v2alpha_certificate_proto_depIdxs = []int32{
	10, // 0: platform.cryptography.v2alpha.CreateCertificateRequest.duration:type_name -> google.protobuf.Duration
	11, // 1: platform.cryptography.v2alpha.CreateCertificateResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	9,  // 2: platform.cryptography.v2alpha.CreateCertificateResponse.certificate:type_name -> platform.cryptography.v2alpha.Certificate
	10, // 3: platform.cryptography.v2alpha.CreateAndSignCertificateRequest.duration:type_name -> google.protobuf.Duration
	11, // 4: platform.cryptography.v2alpha.CreateAndSignCertificateResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	9,  // 5: platform.cryptography.v2alpha.CreateAndSignCertificateResponse.certificate:type_name -> platform.cryptography.v2alpha.Certificate
	12, // 6: platform.cryptography.v2alpha.Certificate.created_at:type_name -> google.protobuf.Timestamp
	12, // 7: platform.cryptography.v2alpha.Certificate.updated_at:type_name -> google.protobuf.Timestamp
	10, // 8: platform.cryptography.v2alpha.Certificate.duration:type_name -> google.protobuf.Duration
	5,  // 9: platform.cryptography.v2alpha.CertificateService.CreateCertificate:input_type -> platform.cryptography.v2alpha.CreateCertificateRequest
	7,  // 10: platform.cryptography.v2alpha.CertificateService.CreateAndSignCertificate:input_type -> platform.cryptography.v2alpha.CreateAndSignCertificateRequest
	6,  // 11: platform.cryptography.v2alpha.CertificateService.CreateCertificate:output_type -> platform.cryptography.v2alpha.CreateCertificateResponse
	8,  // 12: platform.cryptography.v2alpha.CertificateService.CreateAndSignCertificate:output_type -> platform.cryptography.v2alpha.CreateAndSignCertificateResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_platform_cryptography_v2alpha_certificate_proto_init() }
func file_platform_cryptography_v2alpha_certificate_proto_init() {
	if File_platform_cryptography_v2alpha_certificate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_cryptography_v2alpha_certificate_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_cryptography_v2alpha_certificate_proto_goTypes,
		DependencyIndexes: file_platform_cryptography_v2alpha_certificate_proto_depIdxs,
		EnumInfos:         file_platform_cryptography_v2alpha_certificate_proto_enumTypes,
		MessageInfos:      file_platform_cryptography_v2alpha_certificate_proto_msgTypes,
	}.Build()
	File_platform_cryptography_v2alpha_certificate_proto = out.File
	file_platform_cryptography_v2alpha_certificate_proto_rawDesc = nil
	file_platform_cryptography_v2alpha_certificate_proto_goTypes = nil
	file_platform_cryptography_v2alpha_certificate_proto_depIdxs = nil
}
