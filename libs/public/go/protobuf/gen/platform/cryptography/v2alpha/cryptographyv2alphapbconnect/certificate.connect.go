// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/cryptography/v2alpha/certificate.proto

package cryptographyv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "github.com/openecosystems/ecosystem/libs/public/go/protobuf/gen/platform/cryptography/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CertificateServiceName is the fully-qualified name of the CertificateService service.
	CertificateServiceName = "platform.cryptography.v2alpha.CertificateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CertificateServiceVerifyCertificateProcedure is the fully-qualified name of the
	// CertificateService's VerifyCertificate RPC.
	CertificateServiceVerifyCertificateProcedure = "/platform.cryptography.v2alpha.CertificateService/VerifyCertificate"
	// CertificateServiceSignCertificateProcedure is the fully-qualified name of the
	// CertificateService's SignCertificate RPC.
	CertificateServiceSignCertificateProcedure = "/platform.cryptography.v2alpha.CertificateService/SignCertificate"
)

// CertificateServiceClient is a client for the platform.cryptography.v2alpha.CertificateService
// service.
type CertificateServiceClient interface {
	// Method to VerifyCertificate to events based on scopes
	VerifyCertificate(context.Context, *connect.Request[v2alpha.VerifyCertificateRequest]) (*connect.Response[v2alpha.VerifyCertificateResponse], error)
	// Method to SignCertificate to events based on scopes
	SignCertificate(context.Context, *connect.Request[v2alpha.SignCertificateRequest]) (*connect.Response[v2alpha.SignCertificateResponse], error)
}

// NewCertificateServiceClient constructs a client for the
// platform.cryptography.v2alpha.CertificateService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCertificateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CertificateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	certificateServiceMethods := v2alpha.File_platform_cryptography_v2alpha_certificate_proto.Services().ByName("CertificateService").Methods()
	return &certificateServiceClient{
		verifyCertificate: connect.NewClient[v2alpha.VerifyCertificateRequest, v2alpha.VerifyCertificateResponse](
			httpClient,
			baseURL+CertificateServiceVerifyCertificateProcedure,
			connect.WithSchema(certificateServiceMethods.ByName("VerifyCertificate")),
			connect.WithClientOptions(opts...),
		),
		signCertificate: connect.NewClient[v2alpha.SignCertificateRequest, v2alpha.SignCertificateResponse](
			httpClient,
			baseURL+CertificateServiceSignCertificateProcedure,
			connect.WithSchema(certificateServiceMethods.ByName("SignCertificate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// certificateServiceClient implements CertificateServiceClient.
type certificateServiceClient struct {
	verifyCertificate *connect.Client[v2alpha.VerifyCertificateRequest, v2alpha.VerifyCertificateResponse]
	signCertificate   *connect.Client[v2alpha.SignCertificateRequest, v2alpha.SignCertificateResponse]
}

// VerifyCertificate calls platform.cryptography.v2alpha.CertificateService.VerifyCertificate.
func (c *certificateServiceClient) VerifyCertificate(ctx context.Context, req *connect.Request[v2alpha.VerifyCertificateRequest]) (*connect.Response[v2alpha.VerifyCertificateResponse], error) {
	return c.verifyCertificate.CallUnary(ctx, req)
}

// SignCertificate calls platform.cryptography.v2alpha.CertificateService.SignCertificate.
func (c *certificateServiceClient) SignCertificate(ctx context.Context, req *connect.Request[v2alpha.SignCertificateRequest]) (*connect.Response[v2alpha.SignCertificateResponse], error) {
	return c.signCertificate.CallUnary(ctx, req)
}

// CertificateServiceHandler is an implementation of the
// platform.cryptography.v2alpha.CertificateService service.
type CertificateServiceHandler interface {
	// Method to VerifyCertificate to events based on scopes
	VerifyCertificate(context.Context, *connect.Request[v2alpha.VerifyCertificateRequest]) (*connect.Response[v2alpha.VerifyCertificateResponse], error)
	// Method to SignCertificate to events based on scopes
	SignCertificate(context.Context, *connect.Request[v2alpha.SignCertificateRequest]) (*connect.Response[v2alpha.SignCertificateResponse], error)
}

// NewCertificateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCertificateServiceHandler(svc CertificateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	certificateServiceMethods := v2alpha.File_platform_cryptography_v2alpha_certificate_proto.Services().ByName("CertificateService").Methods()
	certificateServiceVerifyCertificateHandler := connect.NewUnaryHandler(
		CertificateServiceVerifyCertificateProcedure,
		svc.VerifyCertificate,
		connect.WithSchema(certificateServiceMethods.ByName("VerifyCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	certificateServiceSignCertificateHandler := connect.NewUnaryHandler(
		CertificateServiceSignCertificateProcedure,
		svc.SignCertificate,
		connect.WithSchema(certificateServiceMethods.ByName("SignCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.cryptography.v2alpha.CertificateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CertificateServiceVerifyCertificateProcedure:
			certificateServiceVerifyCertificateHandler.ServeHTTP(w, r)
		case CertificateServiceSignCertificateProcedure:
			certificateServiceSignCertificateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCertificateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCertificateServiceHandler struct{}

func (UnimplementedCertificateServiceHandler) VerifyCertificate(context.Context, *connect.Request[v2alpha.VerifyCertificateRequest]) (*connect.Response[v2alpha.VerifyCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.cryptography.v2alpha.CertificateService.VerifyCertificate is not implemented"))
}

func (UnimplementedCertificateServiceHandler) SignCertificate(context.Context, *connect.Request[v2alpha.SignCertificateRequest]) (*connect.Response[v2alpha.SignCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.cryptography.v2alpha.CertificateService.SignCertificate is not implemented"))
}
