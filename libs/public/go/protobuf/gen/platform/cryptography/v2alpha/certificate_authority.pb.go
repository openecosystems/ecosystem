// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: platform/cryptography/v2alpha/certificate_authority.proto

package cryptographyv2alphapb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	v21 "libs/protobuf/go/protobuf/gen/platform/type/v2"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported event type for subscription.
type CertificateAuthorityType int32

const (
	CertificateAuthorityType_CERTIFICATE_AUTHORITY_TYPE_UNSPECIFIED  CertificateAuthorityType = 0 // Unspecified or unknown subscription type.
	CertificateAuthorityType_CERTIFICATE_AUTHORITY_TYPE_ORGANIZATION CertificateAuthorityType = 1 // CertificateAuthority for an organization.
	CertificateAuthorityType_CERTIFICATE_AUTHORITY_TYPE_ECOSYSTEM    CertificateAuthorityType = 2 // CertificateAuthority for an ecosystem
	CertificateAuthorityType_CERTIFICATE_AUTHORITY_TYPE_USER         CertificateAuthorityType = 3 // CertificateAuthority for a user.
)

// Enum value maps for CertificateAuthorityType.
var (
	CertificateAuthorityType_name = map[int32]string{
		0: "CERTIFICATE_AUTHORITY_TYPE_UNSPECIFIED",
		1: "CERTIFICATE_AUTHORITY_TYPE_ORGANIZATION",
		2: "CERTIFICATE_AUTHORITY_TYPE_ECOSYSTEM",
		3: "CERTIFICATE_AUTHORITY_TYPE_USER",
	}
	CertificateAuthorityType_value = map[string]int32{
		"CERTIFICATE_AUTHORITY_TYPE_UNSPECIFIED":  0,
		"CERTIFICATE_AUTHORITY_TYPE_ORGANIZATION": 1,
		"CERTIFICATE_AUTHORITY_TYPE_ECOSYSTEM":    2,
		"CERTIFICATE_AUTHORITY_TYPE_USER":         3,
	}
)

func (x CertificateAuthorityType) Enum() *CertificateAuthorityType {
	p := new(CertificateAuthorityType)
	*p = x
	return p
}

func (x CertificateAuthorityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateAuthorityType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[0].Descriptor()
}

func (CertificateAuthorityType) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[0]
}

func (x CertificateAuthorityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateAuthorityType.Descriptor instead.
func (CertificateAuthorityType) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{0}
}

// The current status of a event
type EventCertificateAuthorityStatus int32

const (
	EventCertificateAuthorityStatus_EVENT_CERTIFICATE_AUTHORITY_STATUS_UNSPECIFIED EventCertificateAuthorityStatus = 0 // Unspecified or unknown status.
	EventCertificateAuthorityStatus_EVENT_CERTIFICATE_AUTHORITY_STATUS_CREATING    EventCertificateAuthorityStatus = 1 // CertificateAuthority is being created.
	EventCertificateAuthorityStatus_EVENT_CERTIFICATE_AUTHORITY_STATUS_ERROR       EventCertificateAuthorityStatus = 4 // Error.
)

// Enum value maps for EventCertificateAuthorityStatus.
var (
	EventCertificateAuthorityStatus_name = map[int32]string{
		0: "EVENT_CERTIFICATE_AUTHORITY_STATUS_UNSPECIFIED",
		1: "EVENT_CERTIFICATE_AUTHORITY_STATUS_CREATING",
		4: "EVENT_CERTIFICATE_AUTHORITY_STATUS_ERROR",
	}
	EventCertificateAuthorityStatus_value = map[string]int32{
		"EVENT_CERTIFICATE_AUTHORITY_STATUS_UNSPECIFIED": 0,
		"EVENT_CERTIFICATE_AUTHORITY_STATUS_CREATING":    1,
		"EVENT_CERTIFICATE_AUTHORITY_STATUS_ERROR":       4,
	}
)

func (x EventCertificateAuthorityStatus) Enum() *EventCertificateAuthorityStatus {
	p := new(EventCertificateAuthorityStatus)
	*p = x
	return p
}

func (x EventCertificateAuthorityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCertificateAuthorityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[1].Descriptor()
}

func (EventCertificateAuthorityStatus) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[1]
}

func (x EventCertificateAuthorityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCertificateAuthorityStatus.Descriptor instead.
func (EventCertificateAuthorityStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{1}
}

type CertificateAuthorityCommands int32

const (
	CertificateAuthorityCommands_CERTIFICATE_AUTHORITY_COMMANDS_UNSPECIFIED                  CertificateAuthorityCommands = 0 // Unspecified or unknown command
	CertificateAuthorityCommands_CERTIFICATE_AUTHORITY_COMMANDS_CREATE_CERTIFICATE_AUTHORITY CertificateAuthorityCommands = 1
)

// Enum value maps for CertificateAuthorityCommands.
var (
	CertificateAuthorityCommands_name = map[int32]string{
		0: "CERTIFICATE_AUTHORITY_COMMANDS_UNSPECIFIED",
		1: "CERTIFICATE_AUTHORITY_COMMANDS_CREATE_CERTIFICATE_AUTHORITY",
	}
	CertificateAuthorityCommands_value = map[string]int32{
		"CERTIFICATE_AUTHORITY_COMMANDS_UNSPECIFIED":                  0,
		"CERTIFICATE_AUTHORITY_COMMANDS_CREATE_CERTIFICATE_AUTHORITY": 1,
	}
)

func (x CertificateAuthorityCommands) Enum() *CertificateAuthorityCommands {
	p := new(CertificateAuthorityCommands)
	*p = x
	return p
}

func (x CertificateAuthorityCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateAuthorityCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[2].Descriptor()
}

func (CertificateAuthorityCommands) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[2]
}

func (x CertificateAuthorityCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateAuthorityCommands.Descriptor instead.
func (CertificateAuthorityCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{2}
}

type CertificateAuthorityEvents int32

const (
	// Unspecified or unknown event.
	CertificateAuthorityEvents_CERTIFICATE_AUTHORITY_EVENTS_UNSPECIFIED CertificateAuthorityEvents = 0
	// Event CertificateAuthority complete.
	CertificateAuthorityEvents_CERTIFICATE_AUTHORITY_EVENTS_CREATED_CERTIFICATE_AUTHORITY CertificateAuthorityEvents = 1
)

// Enum value maps for CertificateAuthorityEvents.
var (
	CertificateAuthorityEvents_name = map[int32]string{
		0: "CERTIFICATE_AUTHORITY_EVENTS_UNSPECIFIED",
		1: "CERTIFICATE_AUTHORITY_EVENTS_CREATED_CERTIFICATE_AUTHORITY",
	}
	CertificateAuthorityEvents_value = map[string]int32{
		"CERTIFICATE_AUTHORITY_EVENTS_UNSPECIFIED":                   0,
		"CERTIFICATE_AUTHORITY_EVENTS_CREATED_CERTIFICATE_AUTHORITY": 1,
	}
)

func (x CertificateAuthorityEvents) Enum() *CertificateAuthorityEvents {
	p := new(CertificateAuthorityEvents)
	*p = x
	return p
}

func (x CertificateAuthorityEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateAuthorityEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[3].Descriptor()
}

func (CertificateAuthorityEvents) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[3]
}

func (x CertificateAuthorityEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateAuthorityEvents.Descriptor instead.
func (CertificateAuthorityEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{3}
}

type Curve int32

const (
	Curve_CURVE_UNSPECIFIED Curve = 0
	Curve_CURVE_EDDSA       Curve = 1
	Curve_CURVE_ECDSA       Curve = 2
)

// Enum value maps for Curve.
var (
	Curve_name = map[int32]string{
		0: "CURVE_UNSPECIFIED",
		1: "CURVE_EDDSA",
		2: "CURVE_ECDSA",
	}
	Curve_value = map[string]int32{
		"CURVE_UNSPECIFIED": 0,
		"CURVE_EDDSA":       1,
		"CURVE_ECDSA":       2,
	}
)

func (x Curve) Enum() *Curve {
	p := new(Curve)
	*p = x
	return p
}

func (x Curve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Curve) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[4].Descriptor()
}

func (Curve) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes[4]
}

func (x Curve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Curve.Descriptor instead.
func (Curve) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{4}
}

type CertificateAuthorityConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pki string `protobuf:"bytes,1,opt,name=pki,proto3" json:"pki,omitempty"`
}

func (x *CertificateAuthorityConfiguration) Reset() {
	*x = CertificateAuthorityConfiguration{}
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateAuthorityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityConfiguration) ProtoMessage() {}

func (x *CertificateAuthorityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityConfiguration.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateAuthorityConfiguration) GetPki() string {
	if x != nil {
		return x.Pki
	}
	return ""
}

// Request for CreateCertificateAuthority
type CreateCertificateAuthorityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Certificate Authority. For example, 'Open Ecosystems, Inc.'
	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Curve    Curve                `protobuf:"varint,2,opt,name=curve,proto3,enum=platform.cryptography.v2alpha.Curve" json:"curve,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Encrypt key with this passphrase and write out key in an encrypted format
	EncryptKeyPassphrase string `protobuf:"bytes,4,opt,name=encrypt_key_passphrase,json=encryptKeyPassphrase,proto3" json:"encrypt_key_passphrase,omitempty"`
}

func (x *CreateCertificateAuthorityRequest) Reset() {
	*x = CreateCertificateAuthorityRequest{}
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateAuthorityRequest) ProtoMessage() {}

func (x *CreateCertificateAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateAuthorityRequest.ProtoReflect.Descriptor instead.
func (*CreateCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCertificateAuthorityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCertificateAuthorityRequest) GetCurve() Curve {
	if x != nil {
		return x.Curve
	}
	return Curve_CURVE_UNSPECIFIED
}

func (x *CreateCertificateAuthorityRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CreateCertificateAuthorityRequest) GetEncryptKeyPassphrase() string {
	if x != nil {
		return x.EncryptKeyPassphrase
	}
	return ""
}

// Response to CreateCertificateAuthority
type CreateCertificateAuthorityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext          *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	CertificateAuthority *CertificateAuthority   `protobuf:"bytes,2,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
}

func (x *CreateCertificateAuthorityResponse) Reset() {
	*x = CreateCertificateAuthorityResponse{}
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateAuthorityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateAuthorityResponse) ProtoMessage() {}

func (x *CreateCertificateAuthorityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateAuthorityResponse.ProtoReflect.Descriptor instead.
func (*CreateCertificateAuthorityResponse) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCertificateAuthorityResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *CreateCertificateAuthorityResponse) GetCertificateAuthority() *CertificateAuthority {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

type CertificateAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for this Certificate Authority
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp indicating when this event subscription was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when this event subscription was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name      string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Curve     Curve                  `protobuf:"varint,5,opt,name=curve,proto3,enum=platform.cryptography.v2alpha.Curve" json:"curve,omitempty"`
	Duration  *durationpb.Duration   `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	CaCert    *v21.File              `protobuf:"bytes,7,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	CaKey     *v21.File              `protobuf:"bytes,8,opt,name=ca_key,json=caKey,proto3" json:"ca_key,omitempty"`
	CaQrCode  *v21.File              `protobuf:"bytes,9,opt,name=ca_qr_code,json=caQrCode,proto3" json:"ca_qr_code,omitempty"`
}

func (x *CertificateAuthority) Reset() {
	*x = CertificateAuthority{}
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthority) ProtoMessage() {}

func (x *CertificateAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthority.ProtoReflect.Descriptor instead.
func (*CertificateAuthority) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP(), []int{3}
}

func (x *CertificateAuthority) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CertificateAuthority) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CertificateAuthority) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CertificateAuthority) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateAuthority) GetCurve() Curve {
	if x != nil {
		return x.Curve
	}
	return Curve_CURVE_UNSPECIFIED
}

func (x *CertificateAuthority) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CertificateAuthority) GetCaCert() *v21.File {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *CertificateAuthority) GetCaKey() *v21.File {
	if x != nil {
		return x.CaKey
	}
	return nil
}

func (x *CertificateAuthority) GetCaQrCode() *v21.File {
	if x != nil {
		return x.CaQrCode
	}
	return nil
}

var File_platform_cryptography_v2alpha_certificate_authority_proto protoreflect.FileDescriptor

var file_platform_cryptography_v2alpha_certificate_authority_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x32, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x21, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6b, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6b,
	0x69, 0x22, 0xe8, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x52, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xe0, 0x01, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x68, 0x0a,
	0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22,
	0xc9, 0x03, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xb7, 0x18, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52,
	0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x63, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x0a, 0x63, 0x61, 0x5f, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x63, 0x61, 0x51, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x2a, 0xc2, 0x01, 0x0a, 0x18,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03,
	0x2a, 0xb4, 0x01, 0x0a, 0x1f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x97, 0x01, 0x0a, 0x1c, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x3b, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08,
	0x03, 0x2a, 0x9c, 0x01, 0x0a, 0x1a, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x28, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x48,
	0x0a, 0x3a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x1a, 0x08,
	0xe2, 0xb8, 0x18, 0x04, 0x08, 0x01, 0x18, 0x01, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08, 0x04,
	0x2a, 0x40, 0x0a, 0x05, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x45, 0x44, 0x44, 0x53, 0x41, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x10, 0x02, 0x32, 0xf3, 0x01, 0x0a, 0x1b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xd3, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x40, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x63,
	0x61, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0xb1, 0x01, 0x82, 0xc4, 0x13, 0x02, 0x08,
	0x01, 0x82, 0xb5, 0x18, 0x06, 0x08, 0x03, 0x10, 0x01, 0x18, 0x06, 0x8a, 0xb5, 0x18, 0x39, 0x0a,
	0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x03, 0x6a, 0x61, 0x6e, 0x28, 0x02, 0x38, 0x01, 0x92, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x03, 0x9a,
	0xb5, 0x18, 0x02, 0x08, 0x01, 0xa2, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x5a, 0x4f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescOnce sync.Once
	file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescData = file_platform_cryptography_v2alpha_certificate_authority_proto_rawDesc
)

func file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescGZIP() []byte {
	file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescOnce.Do(func() {
		file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescData)
	})
	return file_platform_cryptography_v2alpha_certificate_authority_proto_rawDescData
}

var file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_platform_cryptography_v2alpha_certificate_authority_proto_goTypes = []any{
	(CertificateAuthorityType)(0),              // 0: platform.cryptography.v2alpha.CertificateAuthorityType
	(EventCertificateAuthorityStatus)(0),       // 1: platform.cryptography.v2alpha.EventCertificateAuthorityStatus
	(CertificateAuthorityCommands)(0),          // 2: platform.cryptography.v2alpha.CertificateAuthorityCommands
	(CertificateAuthorityEvents)(0),            // 3: platform.cryptography.v2alpha.CertificateAuthorityEvents
	(Curve)(0),                                 // 4: platform.cryptography.v2alpha.Curve
	(*CertificateAuthorityConfiguration)(nil),  // 5: platform.cryptography.v2alpha.CertificateAuthorityConfiguration
	(*CreateCertificateAuthorityRequest)(nil),  // 6: platform.cryptography.v2alpha.CreateCertificateAuthorityRequest
	(*CreateCertificateAuthorityResponse)(nil), // 7: platform.cryptography.v2alpha.CreateCertificateAuthorityResponse
	(*CertificateAuthority)(nil),               // 8: platform.cryptography.v2alpha.CertificateAuthority
	(*durationpb.Duration)(nil),                // 9: google.protobuf.Duration
	(*v2.SpecResponseContext)(nil),             // 10: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),              // 11: google.protobuf.Timestamp
	(*v21.File)(nil),                           // 12: platform.type.v2.File
}
var file_platform_cryptography_v2alpha_certificate_authority_proto_depIdxs = []int32{
	4,  // 0: platform.cryptography.v2alpha.CreateCertificateAuthorityRequest.curve:type_name -> platform.cryptography.v2alpha.Curve
	9,  // 1: platform.cryptography.v2alpha.CreateCertificateAuthorityRequest.duration:type_name -> google.protobuf.Duration
	10, // 2: platform.cryptography.v2alpha.CreateCertificateAuthorityResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	8,  // 3: platform.cryptography.v2alpha.CreateCertificateAuthorityResponse.certificate_authority:type_name -> platform.cryptography.v2alpha.CertificateAuthority
	11, // 4: platform.cryptography.v2alpha.CertificateAuthority.created_at:type_name -> google.protobuf.Timestamp
	11, // 5: platform.cryptography.v2alpha.CertificateAuthority.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 6: platform.cryptography.v2alpha.CertificateAuthority.curve:type_name -> platform.cryptography.v2alpha.Curve
	9,  // 7: platform.cryptography.v2alpha.CertificateAuthority.duration:type_name -> google.protobuf.Duration
	12, // 8: platform.cryptography.v2alpha.CertificateAuthority.ca_cert:type_name -> platform.type.v2.File
	12, // 9: platform.cryptography.v2alpha.CertificateAuthority.ca_key:type_name -> platform.type.v2.File
	12, // 10: platform.cryptography.v2alpha.CertificateAuthority.ca_qr_code:type_name -> platform.type.v2.File
	6,  // 11: platform.cryptography.v2alpha.CertificateAuthorityService.CreateCertificateAuthority:input_type -> platform.cryptography.v2alpha.CreateCertificateAuthorityRequest
	7,  // 12: platform.cryptography.v2alpha.CertificateAuthorityService.CreateCertificateAuthority:output_type -> platform.cryptography.v2alpha.CreateCertificateAuthorityResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_platform_cryptography_v2alpha_certificate_authority_proto_init() }
func file_platform_cryptography_v2alpha_certificate_authority_proto_init() {
	if File_platform_cryptography_v2alpha_certificate_authority_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_cryptography_v2alpha_certificate_authority_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_cryptography_v2alpha_certificate_authority_proto_goTypes,
		DependencyIndexes: file_platform_cryptography_v2alpha_certificate_authority_proto_depIdxs,
		EnumInfos:         file_platform_cryptography_v2alpha_certificate_authority_proto_enumTypes,
		MessageInfos:      file_platform_cryptography_v2alpha_certificate_authority_proto_msgTypes,
	}.Build()
	File_platform_cryptography_v2alpha_certificate_authority_proto = out.File
	file_platform_cryptography_v2alpha_certificate_authority_proto_rawDesc = nil
	file_platform_cryptography_v2alpha_certificate_authority_proto_goTypes = nil
	file_platform_cryptography_v2alpha_certificate_authority_proto_depIdxs = nil
}
