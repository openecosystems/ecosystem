// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/iam/v2alpha/account.proto

package iamv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/iam/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "platform.iam.v2alpha.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceCreateAccountProcedure is the fully-qualified name of the AccountService's
	// CreateAccount RPC.
	AccountServiceCreateAccountProcedure = "/platform.iam.v2alpha.AccountService/CreateAccount"
)

// AccountServiceClient is a client for the platform.iam.v2alpha.AccountService service.
type AccountServiceClient interface {
	// Create an Account to connect to an ecosystem
	CreateAccount(context.Context, *connect.Request[v2alpha.CreateAccountRequest]) (*connect.Response[v2alpha.CreateAccountResponse], error)
}

// NewAccountServiceClient constructs a client for the platform.iam.v2alpha.AccountService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := v2alpha.File_platform_iam_v2alpha_account_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		createAccount: connect.NewClient[v2alpha.CreateAccountRequest, v2alpha.CreateAccountResponse](
			httpClient,
			baseURL+AccountServiceCreateAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	createAccount *connect.Client[v2alpha.CreateAccountRequest, v2alpha.CreateAccountResponse]
}

// CreateAccount calls platform.iam.v2alpha.AccountService.CreateAccount.
func (c *accountServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v2alpha.CreateAccountRequest]) (*connect.Response[v2alpha.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the platform.iam.v2alpha.AccountService service.
type AccountServiceHandler interface {
	// Create an Account to connect to an ecosystem
	CreateAccount(context.Context, *connect.Request[v2alpha.CreateAccountRequest]) (*connect.Response[v2alpha.CreateAccountResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := v2alpha.File_platform_iam_v2alpha_account_proto.Services().ByName("AccountService").Methods()
	accountServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountServiceMethods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.iam.v2alpha.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceCreateAccountProcedure:
			accountServiceCreateAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) CreateAccount(context.Context, *connect.Request[v2alpha.CreateAccountRequest]) (*connect.Response[v2alpha.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.iam.v2alpha.AccountService.CreateAccount is not implemented"))
}
