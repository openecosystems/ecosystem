//
//IAM System
//
//The IAM module provides APIs to create and manage users and their roles. User accounts can be for individual users as well as system accounts. The module also provides APIs to define permissions for roles.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/iam/v2alpha/iam_authentication.proto

package iamv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/iam/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IamAuthenticationServiceName is the fully-qualified name of the IamAuthenticationService service.
	IamAuthenticationServiceName = "platform.iam.v2alpha.IamAuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IamAuthenticationServiceLoginProcedure is the fully-qualified name of the
	// IamAuthenticationService's Login RPC.
	IamAuthenticationServiceLoginProcedure = "/platform.iam.v2alpha.IamAuthenticationService/Login"
	// IamAuthenticationServiceLogoutProcedure is the fully-qualified name of the
	// IamAuthenticationService's Logout RPC.
	IamAuthenticationServiceLogoutProcedure = "/platform.iam.v2alpha.IamAuthenticationService/Logout"
)

// IamAuthenticationServiceClient is a client for the platform.iam.v2alpha.IamAuthenticationService
// service.
type IamAuthenticationServiceClient interface {
	// Method to login
	Login(context.Context, *connect.Request[v2alpha.LoginRequest]) (*connect.Response[v2alpha.LoginResponse], error)
	// Method to logout
	Logout(context.Context, *connect.Request[v2alpha.LogoutRequest]) (*connect.Response[v2alpha.LogoutResponse], error)
}

// NewIamAuthenticationServiceClient constructs a client for the
// platform.iam.v2alpha.IamAuthenticationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIamAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IamAuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	iamAuthenticationServiceMethods := v2alpha.File_platform_iam_v2alpha_iam_authentication_proto.Services().ByName("IamAuthenticationService").Methods()
	return &iamAuthenticationServiceClient{
		login: connect.NewClient[v2alpha.LoginRequest, v2alpha.LoginResponse](
			httpClient,
			baseURL+IamAuthenticationServiceLoginProcedure,
			connect.WithSchema(iamAuthenticationServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v2alpha.LogoutRequest, v2alpha.LogoutResponse](
			httpClient,
			baseURL+IamAuthenticationServiceLogoutProcedure,
			connect.WithSchema(iamAuthenticationServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
	}
}

// iamAuthenticationServiceClient implements IamAuthenticationServiceClient.
type iamAuthenticationServiceClient struct {
	login  *connect.Client[v2alpha.LoginRequest, v2alpha.LoginResponse]
	logout *connect.Client[v2alpha.LogoutRequest, v2alpha.LogoutResponse]
}

// Login calls platform.iam.v2alpha.IamAuthenticationService.Login.
func (c *iamAuthenticationServiceClient) Login(ctx context.Context, req *connect.Request[v2alpha.LoginRequest]) (*connect.Response[v2alpha.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls platform.iam.v2alpha.IamAuthenticationService.Logout.
func (c *iamAuthenticationServiceClient) Logout(ctx context.Context, req *connect.Request[v2alpha.LogoutRequest]) (*connect.Response[v2alpha.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// IamAuthenticationServiceHandler is an implementation of the
// platform.iam.v2alpha.IamAuthenticationService service.
type IamAuthenticationServiceHandler interface {
	// Method to login
	Login(context.Context, *connect.Request[v2alpha.LoginRequest]) (*connect.Response[v2alpha.LoginResponse], error)
	// Method to logout
	Logout(context.Context, *connect.Request[v2alpha.LogoutRequest]) (*connect.Response[v2alpha.LogoutResponse], error)
}

// NewIamAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIamAuthenticationServiceHandler(svc IamAuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iamAuthenticationServiceMethods := v2alpha.File_platform_iam_v2alpha_iam_authentication_proto.Services().ByName("IamAuthenticationService").Methods()
	iamAuthenticationServiceLoginHandler := connect.NewUnaryHandler(
		IamAuthenticationServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(iamAuthenticationServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	iamAuthenticationServiceLogoutHandler := connect.NewUnaryHandler(
		IamAuthenticationServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(iamAuthenticationServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.iam.v2alpha.IamAuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IamAuthenticationServiceLoginProcedure:
			iamAuthenticationServiceLoginHandler.ServeHTTP(w, r)
		case IamAuthenticationServiceLogoutProcedure:
			iamAuthenticationServiceLogoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIamAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIamAuthenticationServiceHandler struct{}

func (UnimplementedIamAuthenticationServiceHandler) Login(context.Context, *connect.Request[v2alpha.LoginRequest]) (*connect.Response[v2alpha.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.iam.v2alpha.IamAuthenticationService.Login is not implemented"))
}

func (UnimplementedIamAuthenticationServiceHandler) Logout(context.Context, *connect.Request[v2alpha.LogoutRequest]) (*connect.Response[v2alpha.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.iam.v2alpha.IamAuthenticationService.Logout is not implemented"))
}
