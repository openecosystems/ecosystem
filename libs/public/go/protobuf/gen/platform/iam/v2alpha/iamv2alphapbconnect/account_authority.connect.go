// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/iam/v2alpha/account_authority.proto

package iamv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/iam/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountAuthorityServiceName is the fully-qualified name of the AccountAuthorityService service.
	AccountAuthorityServiceName = "platform.iam.v2alpha.AccountAuthorityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountAuthorityServiceCreateAccountAuthorityProcedure is the fully-qualified name of the
	// AccountAuthorityService's CreateAccountAuthority RPC.
	AccountAuthorityServiceCreateAccountAuthorityProcedure = "/platform.iam.v2alpha.AccountAuthorityService/CreateAccountAuthority"
)

// AccountAuthorityServiceClient is a client for the platform.iam.v2alpha.AccountAuthorityService
// service.
type AccountAuthorityServiceClient interface {
	// Method to create an Account Authority to manage the ecosystem partners
	CreateAccountAuthority(context.Context, *connect.Request[v2alpha.CreateAccountAuthorityRequest]) (*connect.Response[v2alpha.CreateAccountAuthorityResponse], error)
}

// NewAccountAuthorityServiceClient constructs a client for the
// platform.iam.v2alpha.AccountAuthorityService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountAuthorityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountAuthorityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountAuthorityServiceMethods := v2alpha.File_platform_iam_v2alpha_account_authority_proto.Services().ByName("AccountAuthorityService").Methods()
	return &accountAuthorityServiceClient{
		createAccountAuthority: connect.NewClient[v2alpha.CreateAccountAuthorityRequest, v2alpha.CreateAccountAuthorityResponse](
			httpClient,
			baseURL+AccountAuthorityServiceCreateAccountAuthorityProcedure,
			connect.WithSchema(accountAuthorityServiceMethods.ByName("CreateAccountAuthority")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountAuthorityServiceClient implements AccountAuthorityServiceClient.
type accountAuthorityServiceClient struct {
	createAccountAuthority *connect.Client[v2alpha.CreateAccountAuthorityRequest, v2alpha.CreateAccountAuthorityResponse]
}

// CreateAccountAuthority calls platform.iam.v2alpha.AccountAuthorityService.CreateAccountAuthority.
func (c *accountAuthorityServiceClient) CreateAccountAuthority(ctx context.Context, req *connect.Request[v2alpha.CreateAccountAuthorityRequest]) (*connect.Response[v2alpha.CreateAccountAuthorityResponse], error) {
	return c.createAccountAuthority.CallUnary(ctx, req)
}

// AccountAuthorityServiceHandler is an implementation of the
// platform.iam.v2alpha.AccountAuthorityService service.
type AccountAuthorityServiceHandler interface {
	// Method to create an Account Authority to manage the ecosystem partners
	CreateAccountAuthority(context.Context, *connect.Request[v2alpha.CreateAccountAuthorityRequest]) (*connect.Response[v2alpha.CreateAccountAuthorityResponse], error)
}

// NewAccountAuthorityServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountAuthorityServiceHandler(svc AccountAuthorityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountAuthorityServiceMethods := v2alpha.File_platform_iam_v2alpha_account_authority_proto.Services().ByName("AccountAuthorityService").Methods()
	accountAuthorityServiceCreateAccountAuthorityHandler := connect.NewUnaryHandler(
		AccountAuthorityServiceCreateAccountAuthorityProcedure,
		svc.CreateAccountAuthority,
		connect.WithSchema(accountAuthorityServiceMethods.ByName("CreateAccountAuthority")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.iam.v2alpha.AccountAuthorityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountAuthorityServiceCreateAccountAuthorityProcedure:
			accountAuthorityServiceCreateAccountAuthorityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountAuthorityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountAuthorityServiceHandler struct{}

func (UnimplementedAccountAuthorityServiceHandler) CreateAccountAuthority(context.Context, *connect.Request[v2alpha.CreateAccountAuthorityRequest]) (*connect.Response[v2alpha.CreateAccountAuthorityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.iam.v2alpha.AccountAuthorityService.CreateAccountAuthority is not implemented"))
}
