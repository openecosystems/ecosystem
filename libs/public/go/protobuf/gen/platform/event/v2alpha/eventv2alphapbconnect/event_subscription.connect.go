// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/event/v2alpha/event_subscription.proto

package eventv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/event/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventSubscriptionServiceName is the fully-qualified name of the EventSubscriptionService service.
	EventSubscriptionServiceName = "platform.event.v2alpha.EventSubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventSubscriptionServiceSubscribeProcedure is the fully-qualified name of the
	// EventSubscriptionService's Subscribe RPC.
	EventSubscriptionServiceSubscribeProcedure = "/platform.event.v2alpha.EventSubscriptionService/Subscribe"
	// EventSubscriptionServiceUnSubscribeProcedure is the fully-qualified name of the
	// EventSubscriptionService's UnSubscribe RPC.
	EventSubscriptionServiceUnSubscribeProcedure = "/platform.event.v2alpha.EventSubscriptionService/UnSubscribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventSubscriptionServiceServiceDescriptor           = v2alpha.File_platform_event_v2alpha_event_subscription_proto.Services().ByName("EventSubscriptionService")
	eventSubscriptionServiceSubscribeMethodDescriptor   = eventSubscriptionServiceServiceDescriptor.Methods().ByName("Subscribe")
	eventSubscriptionServiceUnSubscribeMethodDescriptor = eventSubscriptionServiceServiceDescriptor.Methods().ByName("UnSubscribe")
)

// EventSubscriptionServiceClient is a client for the
// platform.event.v2alpha.EventSubscriptionService service.
type EventSubscriptionServiceClient interface {
	// Method to Subscribe to events based on scopes
	Subscribe(context.Context, *connect.Request[v2alpha.SubscribeRequest]) (*connect.ServerStreamForClient[v2alpha.SubscribeResponse], error)
	// Method to Unsubscribe to an event scope
	UnSubscribe(context.Context, *connect.Request[v2alpha.UnSubscribeRequest]) (*connect.Response[v2alpha.UnSubscribeResponse], error)
}

// NewEventSubscriptionServiceClient constructs a client for the
// platform.event.v2alpha.EventSubscriptionService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventSubscriptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventSubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventSubscriptionServiceClient{
		subscribe: connect.NewClient[v2alpha.SubscribeRequest, v2alpha.SubscribeResponse](
			httpClient,
			baseURL+EventSubscriptionServiceSubscribeProcedure,
			connect.WithSchema(eventSubscriptionServiceSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unSubscribe: connect.NewClient[v2alpha.UnSubscribeRequest, v2alpha.UnSubscribeResponse](
			httpClient,
			baseURL+EventSubscriptionServiceUnSubscribeProcedure,
			connect.WithSchema(eventSubscriptionServiceUnSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventSubscriptionServiceClient implements EventSubscriptionServiceClient.
type eventSubscriptionServiceClient struct {
	subscribe   *connect.Client[v2alpha.SubscribeRequest, v2alpha.SubscribeResponse]
	unSubscribe *connect.Client[v2alpha.UnSubscribeRequest, v2alpha.UnSubscribeResponse]
}

// Subscribe calls platform.event.v2alpha.EventSubscriptionService.Subscribe.
func (c *eventSubscriptionServiceClient) Subscribe(ctx context.Context, req *connect.Request[v2alpha.SubscribeRequest]) (*connect.ServerStreamForClient[v2alpha.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// UnSubscribe calls platform.event.v2alpha.EventSubscriptionService.UnSubscribe.
func (c *eventSubscriptionServiceClient) UnSubscribe(ctx context.Context, req *connect.Request[v2alpha.UnSubscribeRequest]) (*connect.Response[v2alpha.UnSubscribeResponse], error) {
	return c.unSubscribe.CallUnary(ctx, req)
}

// EventSubscriptionServiceHandler is an implementation of the
// platform.event.v2alpha.EventSubscriptionService service.
type EventSubscriptionServiceHandler interface {
	// Method to Subscribe to events based on scopes
	Subscribe(context.Context, *connect.Request[v2alpha.SubscribeRequest], *connect.ServerStream[v2alpha.SubscribeResponse]) error
	// Method to Unsubscribe to an event scope
	UnSubscribe(context.Context, *connect.Request[v2alpha.UnSubscribeRequest]) (*connect.Response[v2alpha.UnSubscribeResponse], error)
}

// NewEventSubscriptionServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventSubscriptionServiceHandler(svc EventSubscriptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventSubscriptionServiceSubscribeHandler := connect.NewServerStreamHandler(
		EventSubscriptionServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(eventSubscriptionServiceSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventSubscriptionServiceUnSubscribeHandler := connect.NewUnaryHandler(
		EventSubscriptionServiceUnSubscribeProcedure,
		svc.UnSubscribe,
		connect.WithSchema(eventSubscriptionServiceUnSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.event.v2alpha.EventSubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventSubscriptionServiceSubscribeProcedure:
			eventSubscriptionServiceSubscribeHandler.ServeHTTP(w, r)
		case EventSubscriptionServiceUnSubscribeProcedure:
			eventSubscriptionServiceUnSubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventSubscriptionServiceHandler struct{}

func (UnimplementedEventSubscriptionServiceHandler) Subscribe(context.Context, *connect.Request[v2alpha.SubscribeRequest], *connect.ServerStream[v2alpha.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("platform.event.v2alpha.EventSubscriptionService.Subscribe is not implemented"))
}

func (UnimplementedEventSubscriptionServiceHandler) UnSubscribe(context.Context, *connect.Request[v2alpha.UnSubscribeRequest]) (*connect.Response[v2alpha.UnSubscribeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.event.v2alpha.EventSubscriptionService.UnSubscribe is not implemented"))
}
