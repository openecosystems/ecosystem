// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: platform/event/v2alpha/event_subscription.proto

package eventv2alphapb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported event type for subscription.
type SubscriptionType int32

const (
	SubscriptionType_SUBSCRIPTION_TYPE_UNSPECIFIED  SubscriptionType = 0 // Unspecified or unknown subscription type.
	SubscriptionType_SUBSCRIPTION_TYPE_ORGANIZATION SubscriptionType = 1 // Subscription for an organization.
	SubscriptionType_SUBSCRIPTION_TYPE_WORKSPACE    SubscriptionType = 2 // Subscription for a workspace
	SubscriptionType_SUBSCRIPTION_TYPE_USER         SubscriptionType = 3 // Subscription for a user.
)

// Enum value maps for SubscriptionType.
var (
	SubscriptionType_name = map[int32]string{
		0: "SUBSCRIPTION_TYPE_UNSPECIFIED",
		1: "SUBSCRIPTION_TYPE_ORGANIZATION",
		2: "SUBSCRIPTION_TYPE_WORKSPACE",
		3: "SUBSCRIPTION_TYPE_USER",
	}
	SubscriptionType_value = map[string]int32{
		"SUBSCRIPTION_TYPE_UNSPECIFIED":  0,
		"SUBSCRIPTION_TYPE_ORGANIZATION": 1,
		"SUBSCRIPTION_TYPE_WORKSPACE":    2,
		"SUBSCRIPTION_TYPE_USER":         3,
	}
)

func (x SubscriptionType) Enum() *SubscriptionType {
	p := new(SubscriptionType)
	*p = x
	return p
}

func (x SubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_event_v2alpha_event_subscription_proto_enumTypes[0].Descriptor()
}

func (SubscriptionType) Type() protoreflect.EnumType {
	return &file_platform_event_v2alpha_event_subscription_proto_enumTypes[0]
}

func (x SubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionType.Descriptor instead.
func (SubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{0}
}

// The current status of a event
type EventSubscriptionStatus int32

const (
	EventSubscriptionStatus_EVENT_SUBSCRIPTION_STATUS_UNSPECIFIED    EventSubscriptionStatus = 0 // Unspecified or unknown status.
	EventSubscriptionStatus_EVENT_SUBSCRIPTION_STATUS_SUBSCRIBING    EventSubscriptionStatus = 1 // Subscription is being subscribed.
	EventSubscriptionStatus_EVENT_SUBSCRIPTION_STATUS_LISTENING      EventSubscriptionStatus = 2 // Subscription is listening for events.
	EventSubscriptionStatus_EVENT_SUBSCRIPTION_STATUS_UN_SUBSCRIBING EventSubscriptionStatus = 3 // Subscription is being un-subscribed.
	EventSubscriptionStatus_EVENT_SUBSCRIPTION_STATUS_ERROR          EventSubscriptionStatus = 4 // Error in event subscription.
)

// Enum value maps for EventSubscriptionStatus.
var (
	EventSubscriptionStatus_name = map[int32]string{
		0: "EVENT_SUBSCRIPTION_STATUS_UNSPECIFIED",
		1: "EVENT_SUBSCRIPTION_STATUS_SUBSCRIBING",
		2: "EVENT_SUBSCRIPTION_STATUS_LISTENING",
		3: "EVENT_SUBSCRIPTION_STATUS_UN_SUBSCRIBING",
		4: "EVENT_SUBSCRIPTION_STATUS_ERROR",
	}
	EventSubscriptionStatus_value = map[string]int32{
		"EVENT_SUBSCRIPTION_STATUS_UNSPECIFIED":    0,
		"EVENT_SUBSCRIPTION_STATUS_SUBSCRIBING":    1,
		"EVENT_SUBSCRIPTION_STATUS_LISTENING":      2,
		"EVENT_SUBSCRIPTION_STATUS_UN_SUBSCRIBING": 3,
		"EVENT_SUBSCRIPTION_STATUS_ERROR":          4,
	}
)

func (x EventSubscriptionStatus) Enum() *EventSubscriptionStatus {
	p := new(EventSubscriptionStatus)
	*p = x
	return p
}

func (x EventSubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_event_v2alpha_event_subscription_proto_enumTypes[1].Descriptor()
}

func (EventSubscriptionStatus) Type() protoreflect.EnumType {
	return &file_platform_event_v2alpha_event_subscription_proto_enumTypes[1]
}

func (x EventSubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubscriptionStatus.Descriptor instead.
func (EventSubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{1}
}

// Event Subscription Commands
type EventSubscriptionCommands int32

const (
	EventSubscriptionCommands_EVENT_SUBSCRIPTION_COMMANDS_UNSPECIFIED  EventSubscriptionCommands = 0 // Unspecified or unknown command
	EventSubscriptionCommands_EVENT_SUBSCRIPTION_COMMANDS_SUBSCRIBE    EventSubscriptionCommands = 1 // Subscribe Command
	EventSubscriptionCommands_EVENT_SUBSCRIPTION_COMMANDS_UN_SUBSCRIBE EventSubscriptionCommands = 2 // Un-subscribe command.
)

// Enum value maps for EventSubscriptionCommands.
var (
	EventSubscriptionCommands_name = map[int32]string{
		0: "EVENT_SUBSCRIPTION_COMMANDS_UNSPECIFIED",
		1: "EVENT_SUBSCRIPTION_COMMANDS_SUBSCRIBE",
		2: "EVENT_SUBSCRIPTION_COMMANDS_UN_SUBSCRIBE",
	}
	EventSubscriptionCommands_value = map[string]int32{
		"EVENT_SUBSCRIPTION_COMMANDS_UNSPECIFIED":  0,
		"EVENT_SUBSCRIPTION_COMMANDS_SUBSCRIBE":    1,
		"EVENT_SUBSCRIPTION_COMMANDS_UN_SUBSCRIBE": 2,
	}
)

func (x EventSubscriptionCommands) Enum() *EventSubscriptionCommands {
	p := new(EventSubscriptionCommands)
	*p = x
	return p
}

func (x EventSubscriptionCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubscriptionCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_event_v2alpha_event_subscription_proto_enumTypes[2].Descriptor()
}

func (EventSubscriptionCommands) Type() protoreflect.EnumType {
	return &file_platform_event_v2alpha_event_subscription_proto_enumTypes[2]
}

func (x EventSubscriptionCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubscriptionCommands.Descriptor instead.
func (EventSubscriptionCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{2}
}

// Event subscription events
type EventSubscriptionEvents int32

const (
	// Unspecified or unknown event subscription event.
	EventSubscriptionEvents_EVENT_SUBSCRIPTION_EVENTS_UNSPECIFIED EventSubscriptionEvents = 0
	// Event Subscription complete.
	EventSubscriptionEvents_EVENT_SUBSCRIPTION_EVENTS_SUBSCRIBED EventSubscriptionEvents = 1
	// Event un-subscription complete.
	EventSubscriptionEvents_EVENT_SUBSCRIPTION_EVENTS_UN_SUBSCRIBED EventSubscriptionEvents = 2
)

// Enum value maps for EventSubscriptionEvents.
var (
	EventSubscriptionEvents_name = map[int32]string{
		0: "EVENT_SUBSCRIPTION_EVENTS_UNSPECIFIED",
		1: "EVENT_SUBSCRIPTION_EVENTS_SUBSCRIBED",
		2: "EVENT_SUBSCRIPTION_EVENTS_UN_SUBSCRIBED",
	}
	EventSubscriptionEvents_value = map[string]int32{
		"EVENT_SUBSCRIPTION_EVENTS_UNSPECIFIED":   0,
		"EVENT_SUBSCRIPTION_EVENTS_SUBSCRIBED":    1,
		"EVENT_SUBSCRIPTION_EVENTS_UN_SUBSCRIBED": 2,
	}
)

func (x EventSubscriptionEvents) Enum() *EventSubscriptionEvents {
	p := new(EventSubscriptionEvents)
	*p = x
	return p
}

func (x EventSubscriptionEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubscriptionEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_event_v2alpha_event_subscription_proto_enumTypes[3].Descriptor()
}

func (EventSubscriptionEvents) Type() protoreflect.EnumType {
	return &file_platform_event_v2alpha_event_subscription_proto_enumTypes[3]
}

func (x EventSubscriptionEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubscriptionEvents.Descriptor instead.
func (EventSubscriptionEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{3}
}

type EventSubscriptionConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigOne     string                 `protobuf:"bytes,1,opt,name=config_one,json=configOne,proto3" json:"config_one,omitempty"`
	ConfigTwo     bool                   `protobuf:"varint,2,opt,name=config_two,json=configTwo,proto3" json:"config_two,omitempty"`
	ConfigThree   int64                  `protobuf:"varint,3,opt,name=config_three,json=configThree,proto3" json:"config_three,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventSubscriptionConfiguration) Reset() {
	*x = EventSubscriptionConfiguration{}
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSubscriptionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscriptionConfiguration) ProtoMessage() {}

func (x *EventSubscriptionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscriptionConfiguration.ProtoReflect.Descriptor instead.
func (*EventSubscriptionConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *EventSubscriptionConfiguration) GetConfigOne() string {
	if x != nil {
		return x.ConfigOne
	}
	return ""
}

func (x *EventSubscriptionConfiguration) GetConfigTwo() bool {
	if x != nil {
		return x.ConfigTwo
	}
	return false
}

func (x *EventSubscriptionConfiguration) GetConfigThree() int64 {
	if x != nil {
		return x.ConfigThree
	}
	return 0
}

// Request for Subscribe
type SubscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Must be either Organization, Workspace, or User Subscription type. Cannot be Unspecified.
	Type          SubscriptionType `protobuf:"varint,2,opt,name=type,proto3,enum=platform.event.v2alpha.SubscriptionType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeRequest) GetType() SubscriptionType {
	if x != nil {
		return x.Type
	}
	return SubscriptionType_SUBSCRIPTION_TYPE_UNSPECIFIED
}

// Response to Subscribe
type SubscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// The event subscription.
	EventSubscription *EventSubscription `protobuf:"bytes,2,opt,name=event_subscription,json=eventSubscription,proto3" json:"event_subscription,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *SubscribeResponse) GetEventSubscription() *EventSubscription {
	if x != nil {
		return x.EventSubscription
	}
	return nil
}

// Request for a UnSubscribe
type UnSubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnSubscribeRequest) Reset() {
	*x = UnSubscribeRequest{}
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeRequest) ProtoMessage() {}

func (x *UnSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{3}
}

// Response for a UnSubscribe.
type UnSubscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// The un-subscribed event subscription.
	EventSubscription *EventSubscription `protobuf:"bytes,2,opt,name=event_subscription,json=eventSubscription,proto3" json:"event_subscription,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UnSubscribeResponse) Reset() {
	*x = UnSubscribeResponse{}
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeResponse) ProtoMessage() {}

func (x *UnSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeResponse.ProtoReflect.Descriptor instead.
func (*UnSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{4}
}

func (x *UnSubscribeResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *UnSubscribeResponse) GetEventSubscription() *EventSubscription {
	if x != nil {
		return x.EventSubscription
	}
	return nil
}

// The event subscription data.
type EventSubscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier for this event subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp indicating when this event subscription was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when this event subscription was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Status of this event subscription
	Status EventSubscriptionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=platform.event.v2alpha.EventSubscriptionStatus" json:"status,omitempty"`
	// Details of the current status.
	StatusDetails string `protobuf:"bytes,6,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	// Type of event
	Type SubscriptionType `protobuf:"varint,7,opt,name=type,proto3,enum=platform.event.v2alpha.SubscriptionType" json:"type,omitempty"`
	// Data for the event subscription.
	Data          *v2.SpecPublic `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventSubscription) Reset() {
	*x = EventSubscription{}
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscription) ProtoMessage() {}

func (x *EventSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_platform_event_v2alpha_event_subscription_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscription.ProtoReflect.Descriptor instead.
func (*EventSubscription) Descriptor() ([]byte, []int) {
	return file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP(), []int{5}
}

func (x *EventSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventSubscription) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EventSubscription) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EventSubscription) GetStatus() EventSubscriptionStatus {
	if x != nil {
		return x.Status
	}
	return EventSubscriptionStatus_EVENT_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *EventSubscription) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

func (x *EventSubscription) GetType() SubscriptionType {
	if x != nil {
		return x.Type
	}
	return SubscriptionType_SUBSCRIPTION_TYPE_UNSPECIFIED
}

func (x *EventSubscription) GetData() *v2.SpecPublic {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_platform_event_v2alpha_event_subscription_proto protoreflect.FileDescriptor

var file_platform_event_v2alpha_event_subscription_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x77, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x65, 0x22, 0x62, 0x0a,
	0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08,
	0x01, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x58, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa, 0xb6, 0x18,
	0x02, 0x08, 0x02, 0x22, 0x1c, 0x0a, 0x12, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08,
	0x01, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa,
	0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0x89, 0x03, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xb7, 0x18, 0x02, 0x08, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08,
	0x02, 0x2a, 0x96, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xeb, 0x01, 0x0a, 0x17, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xa9, 0x01, 0x0a, 0x19, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x1a, 0x06, 0x92, 0xb8,
	0x18, 0x02, 0x08, 0x03, 0x2a, 0xad, 0x01, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x24, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x08, 0xe2, 0xb8, 0x18, 0x04, 0x08, 0x01, 0x18, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x06, 0x92, 0xb8,
	0x18, 0x02, 0x08, 0x04, 0x32, 0xc1, 0x02, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x55,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x1a, 0x0b, 0xda, 0xb5, 0x18,
	0x07, 0x08, 0x93, 0x34, 0x10, 0xdb, 0x93, 0x03, 0x42, 0x9a, 0x01, 0x82, 0xc4, 0x13, 0x02, 0x08,
	0x02, 0x82, 0xb5, 0x18, 0x06, 0x08, 0x03, 0x10, 0x01, 0x18, 0x02, 0x8a, 0xb5, 0x18, 0x30, 0x0a,
	0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x03, 0x6a, 0x61, 0x6e, 0x28, 0x02, 0x92,
	0xb5, 0x18, 0x03, 0x0a, 0x01, 0x03, 0x9a, 0xb5, 0x18, 0x02, 0x08, 0x01, 0xa2, 0xb5, 0x18, 0x02,
	0x08, 0x01, 0x5a, 0x41, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platform_event_v2alpha_event_subscription_proto_rawDescOnce sync.Once
	file_platform_event_v2alpha_event_subscription_proto_rawDescData = file_platform_event_v2alpha_event_subscription_proto_rawDesc
)

func file_platform_event_v2alpha_event_subscription_proto_rawDescGZIP() []byte {
	file_platform_event_v2alpha_event_subscription_proto_rawDescOnce.Do(func() {
		file_platform_event_v2alpha_event_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_event_v2alpha_event_subscription_proto_rawDescData)
	})
	return file_platform_event_v2alpha_event_subscription_proto_rawDescData
}

var file_platform_event_v2alpha_event_subscription_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_platform_event_v2alpha_event_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_platform_event_v2alpha_event_subscription_proto_goTypes = []any{
	(SubscriptionType)(0),                  // 0: platform.event.v2alpha.SubscriptionType
	(EventSubscriptionStatus)(0),           // 1: platform.event.v2alpha.EventSubscriptionStatus
	(EventSubscriptionCommands)(0),         // 2: platform.event.v2alpha.EventSubscriptionCommands
	(EventSubscriptionEvents)(0),           // 3: platform.event.v2alpha.EventSubscriptionEvents
	(*EventSubscriptionConfiguration)(nil), // 4: platform.event.v2alpha.EventSubscriptionConfiguration
	(*SubscribeRequest)(nil),               // 5: platform.event.v2alpha.SubscribeRequest
	(*SubscribeResponse)(nil),              // 6: platform.event.v2alpha.SubscribeResponse
	(*UnSubscribeRequest)(nil),             // 7: platform.event.v2alpha.UnSubscribeRequest
	(*UnSubscribeResponse)(nil),            // 8: platform.event.v2alpha.UnSubscribeResponse
	(*EventSubscription)(nil),              // 9: platform.event.v2alpha.EventSubscription
	(*v2.SpecResponseContext)(nil),         // 10: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),          // 11: google.protobuf.Timestamp
	(*v2.SpecPublic)(nil),                  // 12: platform.spec.v2.SpecPublic
}
var file_platform_event_v2alpha_event_subscription_proto_depIdxs = []int32{
	0,  // 0: platform.event.v2alpha.SubscribeRequest.type:type_name -> platform.event.v2alpha.SubscriptionType
	10, // 1: platform.event.v2alpha.SubscribeResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	9,  // 2: platform.event.v2alpha.SubscribeResponse.event_subscription:type_name -> platform.event.v2alpha.EventSubscription
	10, // 3: platform.event.v2alpha.UnSubscribeResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	9,  // 4: platform.event.v2alpha.UnSubscribeResponse.event_subscription:type_name -> platform.event.v2alpha.EventSubscription
	11, // 5: platform.event.v2alpha.EventSubscription.created_at:type_name -> google.protobuf.Timestamp
	11, // 6: platform.event.v2alpha.EventSubscription.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 7: platform.event.v2alpha.EventSubscription.status:type_name -> platform.event.v2alpha.EventSubscriptionStatus
	0,  // 8: platform.event.v2alpha.EventSubscription.type:type_name -> platform.event.v2alpha.SubscriptionType
	12, // 9: platform.event.v2alpha.EventSubscription.data:type_name -> platform.spec.v2.SpecPublic
	5,  // 10: platform.event.v2alpha.EventSubscriptionService.Subscribe:input_type -> platform.event.v2alpha.SubscribeRequest
	7,  // 11: platform.event.v2alpha.EventSubscriptionService.UnSubscribe:input_type -> platform.event.v2alpha.UnSubscribeRequest
	6,  // 12: platform.event.v2alpha.EventSubscriptionService.Subscribe:output_type -> platform.event.v2alpha.SubscribeResponse
	8,  // 13: platform.event.v2alpha.EventSubscriptionService.UnSubscribe:output_type -> platform.event.v2alpha.UnSubscribeResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_platform_event_v2alpha_event_subscription_proto_init() }
func file_platform_event_v2alpha_event_subscription_proto_init() {
	if File_platform_event_v2alpha_event_subscription_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_event_v2alpha_event_subscription_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_event_v2alpha_event_subscription_proto_goTypes,
		DependencyIndexes: file_platform_event_v2alpha_event_subscription_proto_depIdxs,
		EnumInfos:         file_platform_event_v2alpha_event_subscription_proto_enumTypes,
		MessageInfos:      file_platform_event_v2alpha_event_subscription_proto_msgTypes,
	}.Build()
	File_platform_event_v2alpha_event_subscription_proto = out.File
	file_platform_event_v2alpha_event_subscription_proto_rawDesc = nil
	file_platform_event_v2alpha_event_subscription_proto_goTypes = nil
	file_platform_event_v2alpha_event_subscription_proto_depIdxs = nil
}
