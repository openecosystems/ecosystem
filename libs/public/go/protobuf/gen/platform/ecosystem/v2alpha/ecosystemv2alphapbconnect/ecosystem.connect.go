// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/ecosystem/v2alpha/ecosystem.proto

package ecosystemv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "github.com/openecosystems/ecosystem/libs/public/go/protobuf/gen/platform/ecosystem/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EcosystemServiceName is the fully-qualified name of the EcosystemService service.
	EcosystemServiceName = "platform.ecosystem.v2alpha.EcosystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EcosystemServiceCreateEcosystemProcedure is the fully-qualified name of the EcosystemService's
	// CreateEcosystem RPC.
	EcosystemServiceCreateEcosystemProcedure = "/platform.ecosystem.v2alpha.EcosystemService/CreateEcosystem"
	// EcosystemServiceListEcosystemsProcedure is the fully-qualified name of the EcosystemService's
	// ListEcosystems RPC.
	EcosystemServiceListEcosystemsProcedure = "/platform.ecosystem.v2alpha.EcosystemService/ListEcosystems"
	// EcosystemServiceGetEcosystemProcedure is the fully-qualified name of the EcosystemService's
	// GetEcosystem RPC.
	EcosystemServiceGetEcosystemProcedure = "/platform.ecosystem.v2alpha.EcosystemService/GetEcosystem"
	// EcosystemServiceUpdateEcosystemProcedure is the fully-qualified name of the EcosystemService's
	// UpdateEcosystem RPC.
	EcosystemServiceUpdateEcosystemProcedure = "/platform.ecosystem.v2alpha.EcosystemService/UpdateEcosystem"
	// EcosystemServiceDeleteEcosystemProcedure is the fully-qualified name of the EcosystemService's
	// DeleteEcosystem RPC.
	EcosystemServiceDeleteEcosystemProcedure = "/platform.ecosystem.v2alpha.EcosystemService/DeleteEcosystem"
)

// EcosystemServiceClient is a client for the platform.ecosystem.v2alpha.EcosystemService service.
type EcosystemServiceClient interface {
	CreateEcosystem(context.Context, *connect.Request[v2alpha.CreateEcosystemRequest]) (*connect.Response[v2alpha.CreateEcosystemResponse], error)
	ListEcosystems(context.Context, *connect.Request[v2alpha.ListEcosystemsRequest]) (*connect.Response[v2alpha.ListEcosystemsResponse], error)
	GetEcosystem(context.Context, *connect.Request[v2alpha.GetEcosystemRequest]) (*connect.Response[v2alpha.GetEcosystemResponse], error)
	UpdateEcosystem(context.Context, *connect.Request[v2alpha.UpdateEcosystemRequest]) (*connect.Response[v2alpha.UpdateEcosystemResponse], error)
	DeleteEcosystem(context.Context, *connect.Request[v2alpha.DeleteEcosystemRequest]) (*connect.Response[v2alpha.DeleteEcosystemResponse], error)
}

// NewEcosystemServiceClient constructs a client for the platform.ecosystem.v2alpha.EcosystemService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEcosystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EcosystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ecosystemServiceMethods := v2alpha.File_platform_ecosystem_v2alpha_ecosystem_proto.Services().ByName("EcosystemService").Methods()
	return &ecosystemServiceClient{
		createEcosystem: connect.NewClient[v2alpha.CreateEcosystemRequest, v2alpha.CreateEcosystemResponse](
			httpClient,
			baseURL+EcosystemServiceCreateEcosystemProcedure,
			connect.WithSchema(ecosystemServiceMethods.ByName("CreateEcosystem")),
			connect.WithClientOptions(opts...),
		),
		listEcosystems: connect.NewClient[v2alpha.ListEcosystemsRequest, v2alpha.ListEcosystemsResponse](
			httpClient,
			baseURL+EcosystemServiceListEcosystemsProcedure,
			connect.WithSchema(ecosystemServiceMethods.ByName("ListEcosystems")),
			connect.WithClientOptions(opts...),
		),
		getEcosystem: connect.NewClient[v2alpha.GetEcosystemRequest, v2alpha.GetEcosystemResponse](
			httpClient,
			baseURL+EcosystemServiceGetEcosystemProcedure,
			connect.WithSchema(ecosystemServiceMethods.ByName("GetEcosystem")),
			connect.WithClientOptions(opts...),
		),
		updateEcosystem: connect.NewClient[v2alpha.UpdateEcosystemRequest, v2alpha.UpdateEcosystemResponse](
			httpClient,
			baseURL+EcosystemServiceUpdateEcosystemProcedure,
			connect.WithSchema(ecosystemServiceMethods.ByName("UpdateEcosystem")),
			connect.WithClientOptions(opts...),
		),
		deleteEcosystem: connect.NewClient[v2alpha.DeleteEcosystemRequest, v2alpha.DeleteEcosystemResponse](
			httpClient,
			baseURL+EcosystemServiceDeleteEcosystemProcedure,
			connect.WithSchema(ecosystemServiceMethods.ByName("DeleteEcosystem")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ecosystemServiceClient implements EcosystemServiceClient.
type ecosystemServiceClient struct {
	createEcosystem *connect.Client[v2alpha.CreateEcosystemRequest, v2alpha.CreateEcosystemResponse]
	listEcosystems  *connect.Client[v2alpha.ListEcosystemsRequest, v2alpha.ListEcosystemsResponse]
	getEcosystem    *connect.Client[v2alpha.GetEcosystemRequest, v2alpha.GetEcosystemResponse]
	updateEcosystem *connect.Client[v2alpha.UpdateEcosystemRequest, v2alpha.UpdateEcosystemResponse]
	deleteEcosystem *connect.Client[v2alpha.DeleteEcosystemRequest, v2alpha.DeleteEcosystemResponse]
}

// CreateEcosystem calls platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem.
func (c *ecosystemServiceClient) CreateEcosystem(ctx context.Context, req *connect.Request[v2alpha.CreateEcosystemRequest]) (*connect.Response[v2alpha.CreateEcosystemResponse], error) {
	return c.createEcosystem.CallUnary(ctx, req)
}

// ListEcosystems calls platform.ecosystem.v2alpha.EcosystemService.ListEcosystems.
func (c *ecosystemServiceClient) ListEcosystems(ctx context.Context, req *connect.Request[v2alpha.ListEcosystemsRequest]) (*connect.Response[v2alpha.ListEcosystemsResponse], error) {
	return c.listEcosystems.CallUnary(ctx, req)
}

// GetEcosystem calls platform.ecosystem.v2alpha.EcosystemService.GetEcosystem.
func (c *ecosystemServiceClient) GetEcosystem(ctx context.Context, req *connect.Request[v2alpha.GetEcosystemRequest]) (*connect.Response[v2alpha.GetEcosystemResponse], error) {
	return c.getEcosystem.CallUnary(ctx, req)
}

// UpdateEcosystem calls platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem.
func (c *ecosystemServiceClient) UpdateEcosystem(ctx context.Context, req *connect.Request[v2alpha.UpdateEcosystemRequest]) (*connect.Response[v2alpha.UpdateEcosystemResponse], error) {
	return c.updateEcosystem.CallUnary(ctx, req)
}

// DeleteEcosystem calls platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem.
func (c *ecosystemServiceClient) DeleteEcosystem(ctx context.Context, req *connect.Request[v2alpha.DeleteEcosystemRequest]) (*connect.Response[v2alpha.DeleteEcosystemResponse], error) {
	return c.deleteEcosystem.CallUnary(ctx, req)
}

// EcosystemServiceHandler is an implementation of the platform.ecosystem.v2alpha.EcosystemService
// service.
type EcosystemServiceHandler interface {
	CreateEcosystem(context.Context, *connect.Request[v2alpha.CreateEcosystemRequest]) (*connect.Response[v2alpha.CreateEcosystemResponse], error)
	ListEcosystems(context.Context, *connect.Request[v2alpha.ListEcosystemsRequest]) (*connect.Response[v2alpha.ListEcosystemsResponse], error)
	GetEcosystem(context.Context, *connect.Request[v2alpha.GetEcosystemRequest]) (*connect.Response[v2alpha.GetEcosystemResponse], error)
	UpdateEcosystem(context.Context, *connect.Request[v2alpha.UpdateEcosystemRequest]) (*connect.Response[v2alpha.UpdateEcosystemResponse], error)
	DeleteEcosystem(context.Context, *connect.Request[v2alpha.DeleteEcosystemRequest]) (*connect.Response[v2alpha.DeleteEcosystemResponse], error)
}

// NewEcosystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEcosystemServiceHandler(svc EcosystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ecosystemServiceMethods := v2alpha.File_platform_ecosystem_v2alpha_ecosystem_proto.Services().ByName("EcosystemService").Methods()
	ecosystemServiceCreateEcosystemHandler := connect.NewUnaryHandler(
		EcosystemServiceCreateEcosystemProcedure,
		svc.CreateEcosystem,
		connect.WithSchema(ecosystemServiceMethods.ByName("CreateEcosystem")),
		connect.WithHandlerOptions(opts...),
	)
	ecosystemServiceListEcosystemsHandler := connect.NewUnaryHandler(
		EcosystemServiceListEcosystemsProcedure,
		svc.ListEcosystems,
		connect.WithSchema(ecosystemServiceMethods.ByName("ListEcosystems")),
		connect.WithHandlerOptions(opts...),
	)
	ecosystemServiceGetEcosystemHandler := connect.NewUnaryHandler(
		EcosystemServiceGetEcosystemProcedure,
		svc.GetEcosystem,
		connect.WithSchema(ecosystemServiceMethods.ByName("GetEcosystem")),
		connect.WithHandlerOptions(opts...),
	)
	ecosystemServiceUpdateEcosystemHandler := connect.NewUnaryHandler(
		EcosystemServiceUpdateEcosystemProcedure,
		svc.UpdateEcosystem,
		connect.WithSchema(ecosystemServiceMethods.ByName("UpdateEcosystem")),
		connect.WithHandlerOptions(opts...),
	)
	ecosystemServiceDeleteEcosystemHandler := connect.NewUnaryHandler(
		EcosystemServiceDeleteEcosystemProcedure,
		svc.DeleteEcosystem,
		connect.WithSchema(ecosystemServiceMethods.ByName("DeleteEcosystem")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.ecosystem.v2alpha.EcosystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EcosystemServiceCreateEcosystemProcedure:
			ecosystemServiceCreateEcosystemHandler.ServeHTTP(w, r)
		case EcosystemServiceListEcosystemsProcedure:
			ecosystemServiceListEcosystemsHandler.ServeHTTP(w, r)
		case EcosystemServiceGetEcosystemProcedure:
			ecosystemServiceGetEcosystemHandler.ServeHTTP(w, r)
		case EcosystemServiceUpdateEcosystemProcedure:
			ecosystemServiceUpdateEcosystemHandler.ServeHTTP(w, r)
		case EcosystemServiceDeleteEcosystemProcedure:
			ecosystemServiceDeleteEcosystemHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEcosystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEcosystemServiceHandler struct{}

func (UnimplementedEcosystemServiceHandler) CreateEcosystem(context.Context, *connect.Request[v2alpha.CreateEcosystemRequest]) (*connect.Response[v2alpha.CreateEcosystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem is not implemented"))
}

func (UnimplementedEcosystemServiceHandler) ListEcosystems(context.Context, *connect.Request[v2alpha.ListEcosystemsRequest]) (*connect.Response[v2alpha.ListEcosystemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.ecosystem.v2alpha.EcosystemService.ListEcosystems is not implemented"))
}

func (UnimplementedEcosystemServiceHandler) GetEcosystem(context.Context, *connect.Request[v2alpha.GetEcosystemRequest]) (*connect.Response[v2alpha.GetEcosystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.ecosystem.v2alpha.EcosystemService.GetEcosystem is not implemented"))
}

func (UnimplementedEcosystemServiceHandler) UpdateEcosystem(context.Context, *connect.Request[v2alpha.UpdateEcosystemRequest]) (*connect.Response[v2alpha.UpdateEcosystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem is not implemented"))
}

func (UnimplementedEcosystemServiceHandler) DeleteEcosystem(context.Context, *connect.Request[v2alpha.DeleteEcosystemRequest]) (*connect.Response[v2alpha.DeleteEcosystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem is not implemented"))
}
