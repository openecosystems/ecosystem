// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: platform/ecosystem/v2alpha/ecosystem.proto

package ecosystemv2alphapb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported ecosystem type
type EcosystemType int32

const (
	EcosystemType_ECOSYSTEM_TYPE_UNSPECIFIED EcosystemType = 0
	EcosystemType_ECOSYSTEM_TYPE_PUBLIC      EcosystemType = 1
	EcosystemType_ECOSYSTEM_TYPE_PRIVATE     EcosystemType = 2
	EcosystemType_ECOSYSTEM_TYPE_PATIENT     EcosystemType = 3
)

// Enum value maps for EcosystemType.
var (
	EcosystemType_name = map[int32]string{
		0: "ECOSYSTEM_TYPE_UNSPECIFIED",
		1: "ECOSYSTEM_TYPE_PUBLIC",
		2: "ECOSYSTEM_TYPE_PRIVATE",
		3: "ECOSYSTEM_TYPE_PATIENT",
	}
	EcosystemType_value = map[string]int32{
		"ECOSYSTEM_TYPE_UNSPECIFIED": 0,
		"ECOSYSTEM_TYPE_PUBLIC":      1,
		"ECOSYSTEM_TYPE_PRIVATE":     2,
		"ECOSYSTEM_TYPE_PATIENT":     3,
	}
)

func (x EcosystemType) Enum() *EcosystemType {
	p := new(EcosystemType)
	*p = x
	return p
}

func (x EcosystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[0].Descriptor()
}

func (EcosystemType) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[0]
}

func (x EcosystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemType.Descriptor instead.
func (EcosystemType) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{0}
}

// The current status of a ecosystem
type EcosystemStatus int32

const (
	EcosystemStatus_ECOSYSTEM_STATUS_UNSPECIFIED EcosystemStatus = 0
	EcosystemStatus_ECOSYSTEM_STATUS_CREATING    EcosystemStatus = 1
	EcosystemStatus_ECOSYSTEM_STATUS_ACTIVE      EcosystemStatus = 2
	EcosystemStatus_ECOSYSTEM_STATUS_INACTIVE    EcosystemStatus = 3
	EcosystemStatus_ECOSYSTEM_STATUS_UPDATING    EcosystemStatus = 4
	EcosystemStatus_ECOSYSTEM_STATUS_DELETING    EcosystemStatus = 5
	EcosystemStatus_ECOSYSTEM_STATUS_ERROR       EcosystemStatus = 6
)

// Enum value maps for EcosystemStatus.
var (
	EcosystemStatus_name = map[int32]string{
		0: "ECOSYSTEM_STATUS_UNSPECIFIED",
		1: "ECOSYSTEM_STATUS_CREATING",
		2: "ECOSYSTEM_STATUS_ACTIVE",
		3: "ECOSYSTEM_STATUS_INACTIVE",
		4: "ECOSYSTEM_STATUS_UPDATING",
		5: "ECOSYSTEM_STATUS_DELETING",
		6: "ECOSYSTEM_STATUS_ERROR",
	}
	EcosystemStatus_value = map[string]int32{
		"ECOSYSTEM_STATUS_UNSPECIFIED": 0,
		"ECOSYSTEM_STATUS_CREATING":    1,
		"ECOSYSTEM_STATUS_ACTIVE":      2,
		"ECOSYSTEM_STATUS_INACTIVE":    3,
		"ECOSYSTEM_STATUS_UPDATING":    4,
		"ECOSYSTEM_STATUS_DELETING":    5,
		"ECOSYSTEM_STATUS_ERROR":       6,
	}
)

func (x EcosystemStatus) Enum() *EcosystemStatus {
	p := new(EcosystemStatus)
	*p = x
	return p
}

func (x EcosystemStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[1].Descriptor()
}

func (EcosystemStatus) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[1]
}

func (x EcosystemStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemStatus.Descriptor instead.
func (EcosystemStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{1}
}

// The current billing status of a ecosystem
type EcosystemBillingStatus int32

const (
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_UNSPECIFIED EcosystemBillingStatus = 0
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_ACTIVE      EcosystemBillingStatus = 1
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_INACTIVE    EcosystemBillingStatus = 2
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_WARNING     EcosystemBillingStatus = 3
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_ERROR       EcosystemBillingStatus = 4
)

// Enum value maps for EcosystemBillingStatus.
var (
	EcosystemBillingStatus_name = map[int32]string{
		0: "ECOSYSTEM_BILLING_STATUS_UNSPECIFIED",
		1: "ECOSYSTEM_BILLING_STATUS_ACTIVE",
		2: "ECOSYSTEM_BILLING_STATUS_INACTIVE",
		3: "ECOSYSTEM_BILLING_STATUS_WARNING",
		4: "ECOSYSTEM_BILLING_STATUS_ERROR",
	}
	EcosystemBillingStatus_value = map[string]int32{
		"ECOSYSTEM_BILLING_STATUS_UNSPECIFIED": 0,
		"ECOSYSTEM_BILLING_STATUS_ACTIVE":      1,
		"ECOSYSTEM_BILLING_STATUS_INACTIVE":    2,
		"ECOSYSTEM_BILLING_STATUS_WARNING":     3,
		"ECOSYSTEM_BILLING_STATUS_ERROR":       4,
	}
)

func (x EcosystemBillingStatus) Enum() *EcosystemBillingStatus {
	p := new(EcosystemBillingStatus)
	*p = x
	return p
}

func (x EcosystemBillingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemBillingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[2].Descriptor()
}

func (EcosystemBillingStatus) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[2]
}

func (x EcosystemBillingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemBillingStatus.Descriptor instead.
func (EcosystemBillingStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{2}
}

type EcosystemCommands int32

const (
	EcosystemCommands_ECOSYSTEM_COMMANDS_UNSPECIFIED EcosystemCommands = 0
	EcosystemCommands_ECOSYSTEM_COMMANDS_CREATE      EcosystemCommands = 1
	EcosystemCommands_ECOSYSTEM_COMMANDS_UPDATE      EcosystemCommands = 2
	EcosystemCommands_ECOSYSTEM_COMMANDS_DELETE      EcosystemCommands = 3
)

// Enum value maps for EcosystemCommands.
var (
	EcosystemCommands_name = map[int32]string{
		0: "ECOSYSTEM_COMMANDS_UNSPECIFIED",
		1: "ECOSYSTEM_COMMANDS_CREATE",
		2: "ECOSYSTEM_COMMANDS_UPDATE",
		3: "ECOSYSTEM_COMMANDS_DELETE",
	}
	EcosystemCommands_value = map[string]int32{
		"ECOSYSTEM_COMMANDS_UNSPECIFIED": 0,
		"ECOSYSTEM_COMMANDS_CREATE":      1,
		"ECOSYSTEM_COMMANDS_UPDATE":      2,
		"ECOSYSTEM_COMMANDS_DELETE":      3,
	}
)

func (x EcosystemCommands) Enum() *EcosystemCommands {
	p := new(EcosystemCommands)
	*p = x
	return p
}

func (x EcosystemCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[3].Descriptor()
}

func (EcosystemCommands) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[3]
}

func (x EcosystemCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemCommands.Descriptor instead.
func (EcosystemCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{3}
}

type EcosystemEvents int32

const (
	EcosystemEvents_ECOSYSTEM_EVENTS_UNSPECIFIED EcosystemEvents = 0
	EcosystemEvents_ECOSYSTEM_EVENTS_CREATED     EcosystemEvents = 1
	EcosystemEvents_ECOSYSTEM_EVENTS_UPDATED     EcosystemEvents = 2
	EcosystemEvents_ECOSYSTEM_EVENTS_DELETED     EcosystemEvents = 3
	EcosystemEvents_ECOSYSTEM_EVENTS_ERRORED     EcosystemEvents = 4
)

// Enum value maps for EcosystemEvents.
var (
	EcosystemEvents_name = map[int32]string{
		0: "ECOSYSTEM_EVENTS_UNSPECIFIED",
		1: "ECOSYSTEM_EVENTS_CREATED",
		2: "ECOSYSTEM_EVENTS_UPDATED",
		3: "ECOSYSTEM_EVENTS_DELETED",
		4: "ECOSYSTEM_EVENTS_ERRORED",
	}
	EcosystemEvents_value = map[string]int32{
		"ECOSYSTEM_EVENTS_UNSPECIFIED": 0,
		"ECOSYSTEM_EVENTS_CREATED":     1,
		"ECOSYSTEM_EVENTS_UPDATED":     2,
		"ECOSYSTEM_EVENTS_DELETED":     3,
		"ECOSYSTEM_EVENTS_ERRORED":     4,
	}
)

func (x EcosystemEvents) Enum() *EcosystemEvents {
	p := new(EcosystemEvents)
	*p = x
	return p
}

func (x EcosystemEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[4].Descriptor()
}

func (EcosystemEvents) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[4]
}

func (x EcosystemEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemEvents.Descriptor instead.
func (EcosystemEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{4}
}

type EcosystemConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Closed        bool                   `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcosystemConfiguration) Reset() {
	*x = EcosystemConfiguration{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcosystemConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcosystemConfiguration) ProtoMessage() {}

func (x *EcosystemConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcosystemConfiguration.ProtoReflect.Descriptor instead.
func (*EcosystemConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{0}
}

func (x *EcosystemConfiguration) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

// Supported fields to create a ecosystem
type CreateEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	// What type of ecosystem is this?
	Type EcosystemType `protobuf:"varint,3,opt,name=type,proto3,enum=platform.ecosystem.v2alpha.EcosystemType" json:"type,omitempty"`
	Name string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Give your ecosystem a short description
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Describe your ecosystem in detail
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Cidr          string `protobuf:"bytes,7,opt,name=cidr,proto3" json:"cidr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEcosystemRequest) Reset() {
	*x = CreateEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEcosystemRequest) ProtoMessage() {}

func (x *CreateEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEcosystemRequest.ProtoReflect.Descriptor instead.
func (*CreateEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateEcosystemRequest) GetType() EcosystemType {
	if x != nil {
		return x.Type
	}
	return EcosystemType_ECOSYSTEM_TYPE_UNSPECIFIED
}

func (x *CreateEcosystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEcosystemRequest) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *CreateEcosystemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEcosystemRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type CreateEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEcosystemResponse) Reset() {
	*x = CreateEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEcosystemResponse) ProtoMessage() {}

func (x *CreateEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEcosystemResponse.ProtoReflect.Descriptor instead.
func (*CreateEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *CreateEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type GetEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug          string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEcosystemRequest) Reset() {
	*x = GetEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEcosystemRequest) ProtoMessage() {}

func (x *GetEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEcosystemRequest.ProtoReflect.Descriptor instead.
func (*GetEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{3}
}

func (x *GetEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEcosystemResponse) Reset() {
	*x = GetEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEcosystemResponse) ProtoMessage() {}

func (x *GetEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEcosystemResponse.ProtoReflect.Descriptor instead.
func (*GetEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{4}
}

func (x *GetEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *GetEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type ListEcosystemsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How many records would you like returned within one page?
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token provided in the response
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEcosystemsRequest) Reset() {
	*x = ListEcosystemsRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEcosystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEcosystemsRequest) ProtoMessage() {}

func (x *ListEcosystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEcosystemsRequest.ProtoReflect.Descriptor instead.
func (*ListEcosystemsRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{5}
}

func (x *ListEcosystemsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEcosystemsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListEcosystemsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// Total count of ecosystems
	TotalSize int32 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// Token to retrieve the next page
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of ecosystems
	Ecosystems    []*Ecosystem `protobuf:"bytes,4,rep,name=ecosystems,proto3" json:"ecosystems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEcosystemsResponse) Reset() {
	*x = ListEcosystemsResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEcosystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEcosystemsResponse) ProtoMessage() {}

func (x *ListEcosystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEcosystemsResponse.ProtoReflect.Descriptor instead.
func (*ListEcosystemsResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{6}
}

func (x *ListEcosystemsResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *ListEcosystemsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListEcosystemsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEcosystemsResponse) GetEcosystems() []*Ecosystem {
	if x != nil {
		return x.Ecosystems
	}
	return nil
}

type EcosystemsFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Filter        string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcosystemsFilter) Reset() {
	*x = EcosystemsFilter{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcosystemsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcosystemsFilter) ProtoMessage() {}

func (x *EcosystemsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcosystemsFilter.ProtoReflect.Descriptor instead.
func (*EcosystemsFilter) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{7}
}

func (x *EcosystemsFilter) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type UpdateEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Give your ecosystem a short description
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Describe your ecosystem in detail
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEcosystemRequest) Reset() {
	*x = UpdateEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEcosystemRequest) ProtoMessage() {}

func (x *UpdateEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEcosystemRequest.ProtoReflect.Descriptor instead.
func (*UpdateEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *UpdateEcosystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEcosystemRequest) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *UpdateEcosystemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEcosystemResponse) Reset() {
	*x = UpdateEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEcosystemResponse) ProtoMessage() {}

func (x *UpdateEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEcosystemResponse.ProtoReflect.Descriptor instead.
func (*UpdateEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *UpdateEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type DeleteEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug          string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEcosystemRequest) Reset() {
	*x = DeleteEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEcosystemRequest) ProtoMessage() {}

func (x *DeleteEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEcosystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type DeleteEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEcosystemResponse) Reset() {
	*x = DeleteEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEcosystemResponse) ProtoMessage() {}

func (x *DeleteEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEcosystemResponse.ProtoReflect.Descriptor instead.
func (*DeleteEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *DeleteEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type Ecosystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SourceId string `protobuf:"bytes,5,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Type EcosystemType `protobuf:"varint,6,opt,name=type,proto3,enum=platform.ecosystem.v2alpha.EcosystemType" json:"type,omitempty"`
	Status EcosystemStatus `protobuf:"varint,7,opt,name=status,proto3,enum=platform.ecosystem.v2alpha.EcosystemStatus" json:"status,omitempty"`
	StatusDetails string `protobuf:"bytes,8,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	ShortDescription string `protobuf:"bytes,10,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	Description   string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Cidr          string `protobuf:"bytes,12,opt,name=cidr,proto3" json:"cidr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ecosystem) Reset() {
	*x = Ecosystem{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ecosystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ecosystem) ProtoMessage() {}

func (x *Ecosystem) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ecosystem.ProtoReflect.Descriptor instead.
func (*Ecosystem) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{12}
}

func (x *Ecosystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ecosystem) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Ecosystem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ecosystem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Ecosystem) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Ecosystem) GetType() EcosystemType {
	if x != nil {
		return x.Type
	}
	return EcosystemType_ECOSYSTEM_TYPE_UNSPECIFIED
}

func (x *Ecosystem) GetStatus() EcosystemStatus {
	if x != nil {
		return x.Status
	}
	return EcosystemStatus_ECOSYSTEM_STATUS_UNSPECIFIED
}

func (x *Ecosystem) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

func (x *Ecosystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ecosystem) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *Ecosystem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ecosystem) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

var File_platform_ecosystem_v2alpha_ecosystem_proto protoreflect.FileDescriptor

var file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x25, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x16, 0x45, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x30, 0xd2, 0xb7, 0x18, 0x2c, 0x0a, 0x2a, 0x1a, 0x26, 0x49, 0x73, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x6f, 0x70,
	0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3f, 0x28, 0x01, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0xbe, 0x03, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x81, 0x01, 0xba, 0x48, 0x7e, 0xba, 0x01, 0x7b, 0x0a,
	0x0b, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x73, 0x6c,
	0x75, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x33, 0x20, 0x2d, 0x20, 0x32,
	0x34, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6c, 0x6f, 0x6e,
	0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x1a, 0x23, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x34, 0x7d, 0x24, 0x27, 0x29, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba,
	0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x10, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05,
	0x10, 0x05, 0x18, 0xff, 0x01, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x05, 0x18, 0x80, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xba, 0x48, 0x27, 0xba, 0x01, 0x24, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x01, 0x2e, 0x1a, 0x11, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x69, 0x73, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x28, 0x29, 0x52,
	0x04, 0x63, 0x69, 0x64, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xb0, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02,
	0x22, 0xb6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x81, 0x01, 0xba, 0x48, 0x7e, 0xba, 0x01, 0x7b,
	0x0a, 0x0b, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x73,
	0x6c, 0x75, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x33, 0x20, 0x2d, 0x20,
	0x32, 0x34, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6c, 0x6f,
	0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x1a, 0x23, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x34, 0x7d, 0x24, 0x27, 0x29, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0x66, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18, 0x0a, 0x20, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08,
	0x01, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a,
	0x0a, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0x32, 0x0a, 0x10,
	0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01,
	0x22, 0xbf, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x81, 0x01, 0xba, 0x48, 0x7e,
	0xba, 0x01, 0x7b, 0x0a, 0x0b, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x47, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x33,
	0x20, 0x2d, 0x20, 0x32, 0x34, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x1a, 0x23, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x34, 0x7d, 0x24, 0x27, 0x29, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x10, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x05, 0x18, 0xff, 0x01, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x05, 0x18, 0x80, 0x08, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02,
	0x08, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x06, 0xfa,
	0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x96, 0x01, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x81, 0x01, 0xba, 0x48, 0x7e, 0xba, 0x01, 0x7b, 0x0a, 0x0b, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x33, 0x20, 0x2d, 0x20, 0x32, 0x34, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x1a, 0x23,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x34, 0x7d,
	0x24, 0x27, 0x29, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08,
	0x01, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x06, 0xfa, 0xb6,
	0x18, 0x02, 0x08, 0x02, 0x22, 0xf4, 0x03, 0x0a, 0x09, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xca, 0xb7, 0x18, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x64, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x0d,
	0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x43, 0x4f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x2a, 0xe8, 0x01, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0xd8, 0x01, 0x0a, 0x16,
	0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x49,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x9c, 0x01, 0x0a, 0x11, 0x45, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x06, 0x92,
	0xb8, 0x18, 0x02, 0x08, 0x03, 0x2a, 0xbb, 0x01, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x43, 0x4f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x18, 0x45,
	0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x06, 0xe2, 0xb8, 0x18, 0x02, 0x08,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x06, 0x92, 0xb8, 0x18,
	0x02, 0x08, 0x04, 0x32, 0xfd, 0x06, 0x0a, 0x10, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0xa2, 0xb6, 0x18, 0x08, 0x22, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0xa3, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0xa2, 0xb6, 0x18, 0x06, 0x22, 0x04, 0x6c, 0x69, 0x73, 0x74, 0xaa, 0xb6, 0x18, 0x02,
	0x08, 0x08, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0xa3, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0xa2, 0xb6, 0x18, 0x05, 0x22, 0x03, 0x67, 0x65, 0x74, 0xaa, 0xb6, 0x18, 0x02, 0x08,
	0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x7b, 0x73, 0x6c, 0x75,
	0x67, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x36, 0xa2, 0xb6, 0x18, 0x08, 0x22, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xaa, 0xb6, 0x18,
	0x02, 0x08, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xa2, 0xb6, 0x18, 0x08, 0x22, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19,
	0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x7d, 0x1a, 0x08, 0xd2, 0xb5, 0x18, 0x04, 0x08,
	0x03, 0x10, 0x01, 0x42, 0x90, 0x01, 0x82, 0xc4, 0x13, 0x02, 0x08, 0x03, 0x82, 0xb5, 0x18, 0x06,
	0x08, 0x03, 0x10, 0x01, 0x18, 0x02, 0x8a, 0xb5, 0x18, 0x20, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0a, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x03, 0x6a, 0x61, 0x6e, 0x28, 0x02, 0x38, 0x01, 0x92, 0xb5, 0x18, 0x03, 0x0a, 0x01,
	0x03, 0x9a, 0xb5, 0x18, 0x00, 0xa2, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x5a, 0x49, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x3b, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescOnce sync.Once
	file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescData []byte
)

func file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP() []byte {
	file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescOnce.Do(func() {
		file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc), len(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc)))
	})
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescData
}

var file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_platform_ecosystem_v2alpha_ecosystem_proto_goTypes = []any{
	(EcosystemType)(0),              // 0: platform.ecosystem.v2alpha.EcosystemType
	(EcosystemStatus)(0),            // 1: platform.ecosystem.v2alpha.EcosystemStatus
	(EcosystemBillingStatus)(0),     // 2: platform.ecosystem.v2alpha.EcosystemBillingStatus
	(EcosystemCommands)(0),          // 3: platform.ecosystem.v2alpha.EcosystemCommands
	(EcosystemEvents)(0),            // 4: platform.ecosystem.v2alpha.EcosystemEvents
	(*EcosystemConfiguration)(nil),  // 5: platform.ecosystem.v2alpha.EcosystemConfiguration
	(*CreateEcosystemRequest)(nil),  // 6: platform.ecosystem.v2alpha.CreateEcosystemRequest
	(*CreateEcosystemResponse)(nil), // 7: platform.ecosystem.v2alpha.CreateEcosystemResponse
	(*GetEcosystemRequest)(nil),     // 8: platform.ecosystem.v2alpha.GetEcosystemRequest
	(*GetEcosystemResponse)(nil),    // 9: platform.ecosystem.v2alpha.GetEcosystemResponse
	(*ListEcosystemsRequest)(nil),   // 10: platform.ecosystem.v2alpha.ListEcosystemsRequest
	(*ListEcosystemsResponse)(nil),  // 11: platform.ecosystem.v2alpha.ListEcosystemsResponse
	(*EcosystemsFilter)(nil),        // 12: platform.ecosystem.v2alpha.EcosystemsFilter
	(*UpdateEcosystemRequest)(nil),  // 13: platform.ecosystem.v2alpha.UpdateEcosystemRequest
	(*UpdateEcosystemResponse)(nil), // 14: platform.ecosystem.v2alpha.UpdateEcosystemResponse
	(*DeleteEcosystemRequest)(nil),  // 15: platform.ecosystem.v2alpha.DeleteEcosystemRequest
	(*DeleteEcosystemResponse)(nil), // 16: platform.ecosystem.v2alpha.DeleteEcosystemResponse
	(*Ecosystem)(nil),               // 17: platform.ecosystem.v2alpha.Ecosystem
	(*v2.SpecResponseContext)(nil),  // 18: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),   // 19: google.protobuf.Timestamp
}
var file_platform_ecosystem_v2alpha_ecosystem_proto_depIdxs = []int32{
	0,  // 0: platform.ecosystem.v2alpha.CreateEcosystemRequest.type:type_name -> platform.ecosystem.v2alpha.EcosystemType
	18, // 1: platform.ecosystem.v2alpha.CreateEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 2: platform.ecosystem.v2alpha.CreateEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 3: platform.ecosystem.v2alpha.GetEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 4: platform.ecosystem.v2alpha.GetEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 5: platform.ecosystem.v2alpha.ListEcosystemsResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 6: platform.ecosystem.v2alpha.ListEcosystemsResponse.ecosystems:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 7: platform.ecosystem.v2alpha.UpdateEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 8: platform.ecosystem.v2alpha.UpdateEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 9: platform.ecosystem.v2alpha.DeleteEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 10: platform.ecosystem.v2alpha.DeleteEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	19, // 11: platform.ecosystem.v2alpha.Ecosystem.created_at:type_name -> google.protobuf.Timestamp
	19, // 12: platform.ecosystem.v2alpha.Ecosystem.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 13: platform.ecosystem.v2alpha.Ecosystem.type:type_name -> platform.ecosystem.v2alpha.EcosystemType
	1,  // 14: platform.ecosystem.v2alpha.Ecosystem.status:type_name -> platform.ecosystem.v2alpha.EcosystemStatus
	6,  // 15: platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem:input_type -> platform.ecosystem.v2alpha.CreateEcosystemRequest
	10, // 16: platform.ecosystem.v2alpha.EcosystemService.ListEcosystems:input_type -> platform.ecosystem.v2alpha.ListEcosystemsRequest
	8,  // 17: platform.ecosystem.v2alpha.EcosystemService.GetEcosystem:input_type -> platform.ecosystem.v2alpha.GetEcosystemRequest
	13, // 18: platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem:input_type -> platform.ecosystem.v2alpha.UpdateEcosystemRequest
	15, // 19: platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem:input_type -> platform.ecosystem.v2alpha.DeleteEcosystemRequest
	7,  // 20: platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem:output_type -> platform.ecosystem.v2alpha.CreateEcosystemResponse
	11, // 21: platform.ecosystem.v2alpha.EcosystemService.ListEcosystems:output_type -> platform.ecosystem.v2alpha.ListEcosystemsResponse
	9,  // 22: platform.ecosystem.v2alpha.EcosystemService.GetEcosystem:output_type -> platform.ecosystem.v2alpha.GetEcosystemResponse
	14, // 23: platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem:output_type -> platform.ecosystem.v2alpha.UpdateEcosystemResponse
	16, // 24: platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem:output_type -> platform.ecosystem.v2alpha.DeleteEcosystemResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_platform_ecosystem_v2alpha_ecosystem_proto_init() }
func file_platform_ecosystem_v2alpha_ecosystem_proto_init() {
	if File_platform_ecosystem_v2alpha_ecosystem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc), len(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_ecosystem_v2alpha_ecosystem_proto_goTypes,
		DependencyIndexes: file_platform_ecosystem_v2alpha_ecosystem_proto_depIdxs,
		EnumInfos:         file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes,
		MessageInfos:      file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes,
	}.Build()
	File_platform_ecosystem_v2alpha_ecosystem_proto = out.File
	file_platform_ecosystem_v2alpha_ecosystem_proto_goTypes = nil
	file_platform_ecosystem_v2alpha_ecosystem_proto_depIdxs = nil
}
