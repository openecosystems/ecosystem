// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: platform/communication/v1alpha/preference_center.proto

package communicationv1alphapb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Commands used with the Preference Center Service
type PreferenceCenterCommands int32

const (
	PreferenceCenterCommands_PREFERENCE_CENTER_COMMANDS_UNSPECIFIED         PreferenceCenterCommands = 0 // Unspecified or unknown command
	PreferenceCenterCommands_PREFERENCE_CENTER_COMMANDS_SUBSCRIBE           PreferenceCenterCommands = 1
	PreferenceCenterCommands_PREFERENCE_CENTER_COMMANDS_UPDATE_SUBSCRIPTION PreferenceCenterCommands = 2
	PreferenceCenterCommands_PREFERENCE_CENTER_COMMANDS_UNSUBSCRIBE         PreferenceCenterCommands = 3
)

// Enum value maps for PreferenceCenterCommands.
var (
	PreferenceCenterCommands_name = map[int32]string{
		0: "PREFERENCE_CENTER_COMMANDS_UNSPECIFIED",
		1: "PREFERENCE_CENTER_COMMANDS_SUBSCRIBE",
		2: "PREFERENCE_CENTER_COMMANDS_UPDATE_SUBSCRIPTION",
		3: "PREFERENCE_CENTER_COMMANDS_UNSUBSCRIBE",
	}
	PreferenceCenterCommands_value = map[string]int32{
		"PREFERENCE_CENTER_COMMANDS_UNSPECIFIED":         0,
		"PREFERENCE_CENTER_COMMANDS_SUBSCRIBE":           1,
		"PREFERENCE_CENTER_COMMANDS_UPDATE_SUBSCRIPTION": 2,
		"PREFERENCE_CENTER_COMMANDS_UNSUBSCRIBE":         3,
	}
)

func (x PreferenceCenterCommands) Enum() *PreferenceCenterCommands {
	p := new(PreferenceCenterCommands)
	*p = x
	return p
}

func (x PreferenceCenterCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreferenceCenterCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_communication_v1alpha_preference_center_proto_enumTypes[0].Descriptor()
}

func (PreferenceCenterCommands) Type() protoreflect.EnumType {
	return &file_platform_communication_v1alpha_preference_center_proto_enumTypes[0]
}

func (x PreferenceCenterCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreferenceCenterCommands.Descriptor instead.
func (PreferenceCenterCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{0}
}

// Preference Center Events
type PreferenceCenterEvents int32

const (
	PreferenceCenterEvents_PREFERENCE_CENTER_EVENTS_UNSPECIFIED  PreferenceCenterEvents = 0 // Unknown or unspecified event.
	PreferenceCenterEvents_PREFERENCE_CENTER_EVENTS_SUBSCRIBED   PreferenceCenterEvents = 1 // CreateOrUpdatePreferenced.
	PreferenceCenterEvents_PREFERENCE_CENTER_EVENTS_UPDATED      PreferenceCenterEvents = 2 // Updated
	PreferenceCenterEvents_PREFERENCE_CENTER_EVENTS_UNSUBSCRIBED PreferenceCenterEvents = 3 // DeletePreferenced
)

// Enum value maps for PreferenceCenterEvents.
var (
	PreferenceCenterEvents_name = map[int32]string{
		0: "PREFERENCE_CENTER_EVENTS_UNSPECIFIED",
		1: "PREFERENCE_CENTER_EVENTS_SUBSCRIBED",
		2: "PREFERENCE_CENTER_EVENTS_UPDATED",
		3: "PREFERENCE_CENTER_EVENTS_UNSUBSCRIBED",
	}
	PreferenceCenterEvents_value = map[string]int32{
		"PREFERENCE_CENTER_EVENTS_UNSPECIFIED":  0,
		"PREFERENCE_CENTER_EVENTS_SUBSCRIBED":   1,
		"PREFERENCE_CENTER_EVENTS_UPDATED":      2,
		"PREFERENCE_CENTER_EVENTS_UNSUBSCRIBED": 3,
	}
)

func (x PreferenceCenterEvents) Enum() *PreferenceCenterEvents {
	p := new(PreferenceCenterEvents)
	*p = x
	return p
}

func (x PreferenceCenterEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreferenceCenterEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_communication_v1alpha_preference_center_proto_enumTypes[1].Descriptor()
}

func (PreferenceCenterEvents) Type() protoreflect.EnumType {
	return &file_platform_communication_v1alpha_preference_center_proto_enumTypes[1]
}

func (x PreferenceCenterEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreferenceCenterEvents.Descriptor instead.
func (PreferenceCenterEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{1}
}

type EmailSubscriptionType int32

const (
	EmailSubscriptionType_EMAIL_SUBSCRIPTION_TYPE_UNSPECIFIED EmailSubscriptionType = 0 // Unknown or unspecified event.
	EmailSubscriptionType_EMAIL_SUBSCRIPTION_TYPE_INDUSTRY    EmailSubscriptionType = 1
	EmailSubscriptionType_EMAIL_SUBSCRIPTION_TYPE_CAPABILITY  EmailSubscriptionType = 2
)

// Enum value maps for EmailSubscriptionType.
var (
	EmailSubscriptionType_name = map[int32]string{
		0: "EMAIL_SUBSCRIPTION_TYPE_UNSPECIFIED",
		1: "EMAIL_SUBSCRIPTION_TYPE_INDUSTRY",
		2: "EMAIL_SUBSCRIPTION_TYPE_CAPABILITY",
	}
	EmailSubscriptionType_value = map[string]int32{
		"EMAIL_SUBSCRIPTION_TYPE_UNSPECIFIED": 0,
		"EMAIL_SUBSCRIPTION_TYPE_INDUSTRY":    1,
		"EMAIL_SUBSCRIPTION_TYPE_CAPABILITY":  2,
	}
)

func (x EmailSubscriptionType) Enum() *EmailSubscriptionType {
	p := new(EmailSubscriptionType)
	*p = x
	return p
}

func (x EmailSubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailSubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_communication_v1alpha_preference_center_proto_enumTypes[2].Descriptor()
}

func (EmailSubscriptionType) Type() protoreflect.EnumType {
	return &file_platform_communication_v1alpha_preference_center_proto_enumTypes[2]
}

func (x EmailSubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailSubscriptionType.Descriptor instead.
func (EmailSubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{2}
}

type PreferenceCenterConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PreferenceCenterConfiguration) Reset() {
	*x = PreferenceCenterConfiguration{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreferenceCenterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferenceCenterConfiguration) ProtoMessage() {}

func (x *PreferenceCenterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferenceCenterConfiguration.ProtoReflect.Descriptor instead.
func (*PreferenceCenterConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{0}
}

// Request for CreateOrUpdatePreference
type CreateOrUpdatePreferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnonymousId         string   `protobuf:"bytes,1,opt,name=anonymous_id,json=anonymousId,proto3" json:"anonymous_id,omitempty"`
	Email               string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	ExternalId          string   `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	PhoneNumber         string   `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	FirstName           string   `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName            string   `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PostalCode          string   `protobuf:"bytes,7,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	City                string   `protobuf:"bytes,8,opt,name=city,proto3" json:"city,omitempty"`
	StateProvinceRegion string   `protobuf:"bytes,9,opt,name=state_province_region,json=stateProvinceRegion,proto3" json:"state_province_region,omitempty"`
	Country             string   `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	ListIds             []string `protobuf:"bytes,11,rep,name=list_ids,json=listIds,proto3" json:"list_ids,omitempty"`
	SegmentIds          []string `protobuf:"bytes,12,rep,name=segment_ids,json=segmentIds,proto3" json:"segment_ids,omitempty"`
}

func (x *CreateOrUpdatePreferenceRequest) Reset() {
	*x = CreateOrUpdatePreferenceRequest{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdatePreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdatePreferenceRequest) ProtoMessage() {}

func (x *CreateOrUpdatePreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdatePreferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdatePreferenceRequest) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrUpdatePreferenceRequest) GetAnonymousId() string {
	if x != nil {
		return x.AnonymousId
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetStateProvinceRegion() string {
	if x != nil {
		return x.StateProvinceRegion
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateOrUpdatePreferenceRequest) GetListIds() []string {
	if x != nil {
		return x.ListIds
	}
	return nil
}

func (x *CreateOrUpdatePreferenceRequest) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

// Response to CreateOrUpdatePreference
type CreateOrUpdatePreferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// Preference Center data
	PreferenceCenter *PreferenceCenter `protobuf:"bytes,2,opt,name=preference_center,json=preferenceCenter,proto3" json:"preference_center,omitempty"`
}

func (x *CreateOrUpdatePreferenceResponse) Reset() {
	*x = CreateOrUpdatePreferenceResponse{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdatePreferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdatePreferenceResponse) ProtoMessage() {}

func (x *CreateOrUpdatePreferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdatePreferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdatePreferenceResponse) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOrUpdatePreferenceResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *CreateOrUpdatePreferenceResponse) GetPreferenceCenter() *PreferenceCenter {
	if x != nil {
		return x.PreferenceCenter
	}
	return nil
}

// Method for DeletePreference
type DeletePreferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnonymousId string `protobuf:"bytes,1,opt,name=anonymous_id,json=anonymousId,proto3" json:"anonymous_id,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	ExternalId  string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	PhoneNumber string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *DeletePreferenceRequest) Reset() {
	*x = DeletePreferenceRequest{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePreferenceRequest) ProtoMessage() {}

func (x *DeletePreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePreferenceRequest.ProtoReflect.Descriptor instead.
func (*DeletePreferenceRequest) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{3}
}

func (x *DeletePreferenceRequest) GetAnonymousId() string {
	if x != nil {
		return x.AnonymousId
	}
	return ""
}

func (x *DeletePreferenceRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DeletePreferenceRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *DeletePreferenceRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

// Response to DeletePreference
type DeletePreferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// DeletePreference email marketing data
	PreferenceCenter *PreferenceCenter `protobuf:"bytes,2,opt,name=preference_center,json=preferenceCenter,proto3" json:"preference_center,omitempty"`
}

func (x *DeletePreferenceResponse) Reset() {
	*x = DeletePreferenceResponse{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePreferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePreferenceResponse) ProtoMessage() {}

func (x *DeletePreferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePreferenceResponse.ProtoReflect.Descriptor instead.
func (*DeletePreferenceResponse) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePreferenceResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *DeletePreferenceResponse) GetPreferenceCenter() *PreferenceCenter {
	if x != nil {
		return x.PreferenceCenter
	}
	return nil
}

// Request for CreateOrUpdatePreference
type GetPreferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPreferenceRequest) Reset() {
	*x = GetPreferenceRequest{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreferenceRequest) ProtoMessage() {}

func (x *GetPreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreferenceRequest.ProtoReflect.Descriptor instead.
func (*GetPreferenceRequest) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{5}
}

func (x *GetPreferenceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to CreateOrUpdatePreference
type GetPreferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// Preference Center data
	PreferenceCenter *PreferenceCenter `protobuf:"bytes,2,opt,name=preference_center,json=preferenceCenter,proto3" json:"preference_center,omitempty"`
}

func (x *GetPreferenceResponse) Reset() {
	*x = GetPreferenceResponse{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreferenceResponse) ProtoMessage() {}

func (x *GetPreferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreferenceResponse.ProtoReflect.Descriptor instead.
func (*GetPreferenceResponse) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{6}
}

func (x *GetPreferenceResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *GetPreferenceResponse) GetPreferenceCenter() *PreferenceCenter {
	if x != nil {
		return x.PreferenceCenter
	}
	return nil
}

// Request for Get Preference Options
type GetPreferenceOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPreferenceOptionsRequest) Reset() {
	*x = GetPreferenceOptionsRequest{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreferenceOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreferenceOptionsRequest) ProtoMessage() {}

func (x *GetPreferenceOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreferenceOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetPreferenceOptionsRequest) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{7}
}

// Response to Get Preference Options
type GetPreferenceOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response context
	SpecContext  *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Industries   []*EmailSubscription    `protobuf:"bytes,2,rep,name=industries,proto3" json:"industries,omitempty"`
	Capabilities []*EmailSubscription    `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *GetPreferenceOptionsResponse) Reset() {
	*x = GetPreferenceOptionsResponse{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreferenceOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreferenceOptionsResponse) ProtoMessage() {}

func (x *GetPreferenceOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreferenceOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetPreferenceOptionsResponse) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{8}
}

func (x *GetPreferenceOptionsResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *GetPreferenceOptionsResponse) GetIndustries() []*EmailSubscription {
	if x != nil {
		return x.Industries
	}
	return nil
}

func (x *GetPreferenceOptionsResponse) GetCapabilities() []*EmailSubscription {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type EmailSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type EmailSubscriptionType `protobuf:"varint,1,opt,name=type,proto3,enum=platform.communication.v1alpha.EmailSubscriptionType" json:"type,omitempty"`
	Id   string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EmailSubscription) Reset() {
	*x = EmailSubscription{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailSubscription) ProtoMessage() {}

func (x *EmailSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailSubscription.ProtoReflect.Descriptor instead.
func (*EmailSubscription) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{9}
}

func (x *EmailSubscription) GetType() EmailSubscriptionType {
	if x != nil {
		return x.Type
	}
	return EmailSubscriptionType_EMAIL_SUBSCRIPTION_TYPE_UNSPECIFIED
}

func (x *EmailSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EmailSubscription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Authentication data for IAM
type PreferenceCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp last updated.
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AnonymousId         string                 `protobuf:"bytes,4,opt,name=anonymous_id,json=anonymousId,proto3" json:"anonymous_id,omitempty"`
	Email               string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	ExternalId          string                 `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	PhoneNumber         string                 `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	FirstName           string                 `protobuf:"bytes,8,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName            string                 `protobuf:"bytes,9,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PostalCode          string                 `protobuf:"bytes,10,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	City                string                 `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	StateProvinceRegion string                 `protobuf:"bytes,12,opt,name=state_province_region,json=stateProvinceRegion,proto3" json:"state_province_region,omitempty"`
	Country             string                 `protobuf:"bytes,13,opt,name=country,proto3" json:"country,omitempty"`
	ListIds             []string               `protobuf:"bytes,14,rep,name=list_ids,json=listIds,proto3" json:"list_ids,omitempty"`
	SegmentIds          []string               `protobuf:"bytes,15,rep,name=segment_ids,json=segmentIds,proto3" json:"segment_ids,omitempty"`
	EmailSubscription   []*EmailSubscription   `protobuf:"bytes,16,rep,name=email_subscription,json=emailSubscription,proto3" json:"email_subscription,omitempty"`
}

func (x *PreferenceCenter) Reset() {
	*x = PreferenceCenter{}
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreferenceCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferenceCenter) ProtoMessage() {}

func (x *PreferenceCenter) ProtoReflect() protoreflect.Message {
	mi := &file_platform_communication_v1alpha_preference_center_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferenceCenter.ProtoReflect.Descriptor instead.
func (*PreferenceCenter) Descriptor() ([]byte, []int) {
	return file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP(), []int{10}
}

func (x *PreferenceCenter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PreferenceCenter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PreferenceCenter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PreferenceCenter) GetAnonymousId() string {
	if x != nil {
		return x.AnonymousId
	}
	return ""
}

func (x *PreferenceCenter) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PreferenceCenter) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *PreferenceCenter) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PreferenceCenter) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PreferenceCenter) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PreferenceCenter) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PreferenceCenter) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PreferenceCenter) GetStateProvinceRegion() string {
	if x != nil {
		return x.StateProvinceRegion
	}
	return ""
}

func (x *PreferenceCenter) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PreferenceCenter) GetListIds() []string {
	if x != nil {
		return x.ListIds
	}
	return nil
}

func (x *PreferenceCenter) GetSegmentIds() []string {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

func (x *PreferenceCenter) GetEmailSubscription() []*EmailSubscription {
	if x != nil {
		return x.EmailSubscription
	}
	return nil
}

var File_platform_communication_v1alpha_preference_center_proto protoreflect.FileDescriptor

var file_platform_communication_v1alpha_preference_center_proto_rawDesc = []byte{
	0x0a, 0x36, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x03, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0c, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05,
	0x18, 0x80, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x0a, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x0a, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x3c, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x3a, 0x06,
	0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0xbb, 0x01, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x03, 0x18, 0x80, 0x02, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0xfa, 0xb6,
	0x18, 0x02, 0x08, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22,
	0x25, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x06,
	0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0x9a, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x51, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x06, 0xfa, 0xb6, 0x18,
	0x02, 0x08, 0x02, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x04, 0x0a, 0x10, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xb7, 0x18, 0x02, 0x08,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x60, 0x0a, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xd8, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x03, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08, 0x03,
	0x2a, 0xe8, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x23, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0a,
	0xe2, 0xb8, 0x18, 0x06, 0x08, 0x01, 0x10, 0x01, 0x18, 0x01, 0x12, 0x30, 0x0a, 0x20, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0x0a, 0xe2, 0xb8, 0x18, 0x06, 0x08, 0x01, 0x10, 0x01, 0x18, 0x01, 0x12, 0x35, 0x0a, 0x25,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0xe2, 0xb8, 0x18, 0x06, 0x08, 0x01, 0x10,
	0x01, 0x18, 0x01, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08, 0x04, 0x2a, 0x8e, 0x01, 0x0a, 0x15,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x32, 0xcc, 0x06, 0x0a,
	0x17, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x02,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xaa, 0xb6, 0x18,
	0x02, 0x08, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x7d, 0x12, 0xb9, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xaa, 0xb6, 0x18, 0x02,
	0x08, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd1, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xaa, 0xb6, 0x18,
	0x02, 0x08, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xa8, 0x01, 0x82, 0xc4,
	0x13, 0x02, 0x08, 0x02, 0x82, 0xb5, 0x18, 0x06, 0x08, 0x03, 0x10, 0x01, 0x18, 0x02, 0x8a, 0xb5,
	0x18, 0x2e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x03, 0x6a, 0x61, 0x6e, 0x28, 0x02,
	0x92, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x03, 0x9a, 0xb5, 0x18, 0x02, 0x08, 0x01, 0xa2, 0xb5, 0x18,
	0x02, 0x08, 0x01, 0x5a, 0x51, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platform_communication_v1alpha_preference_center_proto_rawDescOnce sync.Once
	file_platform_communication_v1alpha_preference_center_proto_rawDescData = file_platform_communication_v1alpha_preference_center_proto_rawDesc
)

func file_platform_communication_v1alpha_preference_center_proto_rawDescGZIP() []byte {
	file_platform_communication_v1alpha_preference_center_proto_rawDescOnce.Do(func() {
		file_platform_communication_v1alpha_preference_center_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_communication_v1alpha_preference_center_proto_rawDescData)
	})
	return file_platform_communication_v1alpha_preference_center_proto_rawDescData
}

var file_platform_communication_v1alpha_preference_center_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_platform_communication_v1alpha_preference_center_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_platform_communication_v1alpha_preference_center_proto_goTypes = []any{
	(PreferenceCenterCommands)(0),            // 0: platform.communication.v1alpha.PreferenceCenterCommands
	(PreferenceCenterEvents)(0),              // 1: platform.communication.v1alpha.PreferenceCenterEvents
	(EmailSubscriptionType)(0),               // 2: platform.communication.v1alpha.EmailSubscriptionType
	(*PreferenceCenterConfiguration)(nil),    // 3: platform.communication.v1alpha.PreferenceCenterConfiguration
	(*CreateOrUpdatePreferenceRequest)(nil),  // 4: platform.communication.v1alpha.CreateOrUpdatePreferenceRequest
	(*CreateOrUpdatePreferenceResponse)(nil), // 5: platform.communication.v1alpha.CreateOrUpdatePreferenceResponse
	(*DeletePreferenceRequest)(nil),          // 6: platform.communication.v1alpha.DeletePreferenceRequest
	(*DeletePreferenceResponse)(nil),         // 7: platform.communication.v1alpha.DeletePreferenceResponse
	(*GetPreferenceRequest)(nil),             // 8: platform.communication.v1alpha.GetPreferenceRequest
	(*GetPreferenceResponse)(nil),            // 9: platform.communication.v1alpha.GetPreferenceResponse
	(*GetPreferenceOptionsRequest)(nil),      // 10: platform.communication.v1alpha.GetPreferenceOptionsRequest
	(*GetPreferenceOptionsResponse)(nil),     // 11: platform.communication.v1alpha.GetPreferenceOptionsResponse
	(*EmailSubscription)(nil),                // 12: platform.communication.v1alpha.EmailSubscription
	(*PreferenceCenter)(nil),                 // 13: platform.communication.v1alpha.PreferenceCenter
	(*v2.SpecResponseContext)(nil),           // 14: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),            // 15: google.protobuf.Timestamp
}
var file_platform_communication_v1alpha_preference_center_proto_depIdxs = []int32{
	14, // 0: platform.communication.v1alpha.CreateOrUpdatePreferenceResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	13, // 1: platform.communication.v1alpha.CreateOrUpdatePreferenceResponse.preference_center:type_name -> platform.communication.v1alpha.PreferenceCenter
	14, // 2: platform.communication.v1alpha.DeletePreferenceResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	13, // 3: platform.communication.v1alpha.DeletePreferenceResponse.preference_center:type_name -> platform.communication.v1alpha.PreferenceCenter
	14, // 4: platform.communication.v1alpha.GetPreferenceResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	13, // 5: platform.communication.v1alpha.GetPreferenceResponse.preference_center:type_name -> platform.communication.v1alpha.PreferenceCenter
	14, // 6: platform.communication.v1alpha.GetPreferenceOptionsResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	12, // 7: platform.communication.v1alpha.GetPreferenceOptionsResponse.industries:type_name -> platform.communication.v1alpha.EmailSubscription
	12, // 8: platform.communication.v1alpha.GetPreferenceOptionsResponse.capabilities:type_name -> platform.communication.v1alpha.EmailSubscription
	2,  // 9: platform.communication.v1alpha.EmailSubscription.type:type_name -> platform.communication.v1alpha.EmailSubscriptionType
	15, // 10: platform.communication.v1alpha.PreferenceCenter.created_at:type_name -> google.protobuf.Timestamp
	15, // 11: platform.communication.v1alpha.PreferenceCenter.updated_at:type_name -> google.protobuf.Timestamp
	12, // 12: platform.communication.v1alpha.PreferenceCenter.email_subscription:type_name -> platform.communication.v1alpha.EmailSubscription
	4,  // 13: platform.communication.v1alpha.PreferenceCenterService.CreateOrUpdatePreference:input_type -> platform.communication.v1alpha.CreateOrUpdatePreferenceRequest
	6,  // 14: platform.communication.v1alpha.PreferenceCenterService.DeletePreference:input_type -> platform.communication.v1alpha.DeletePreferenceRequest
	8,  // 15: platform.communication.v1alpha.PreferenceCenterService.GetPreference:input_type -> platform.communication.v1alpha.GetPreferenceRequest
	10, // 16: platform.communication.v1alpha.PreferenceCenterService.GetPreferenceOptions:input_type -> platform.communication.v1alpha.GetPreferenceOptionsRequest
	5,  // 17: platform.communication.v1alpha.PreferenceCenterService.CreateOrUpdatePreference:output_type -> platform.communication.v1alpha.CreateOrUpdatePreferenceResponse
	7,  // 18: platform.communication.v1alpha.PreferenceCenterService.DeletePreference:output_type -> platform.communication.v1alpha.DeletePreferenceResponse
	9,  // 19: platform.communication.v1alpha.PreferenceCenterService.GetPreference:output_type -> platform.communication.v1alpha.GetPreferenceResponse
	11, // 20: platform.communication.v1alpha.PreferenceCenterService.GetPreferenceOptions:output_type -> platform.communication.v1alpha.GetPreferenceOptionsResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_platform_communication_v1alpha_preference_center_proto_init() }
func file_platform_communication_v1alpha_preference_center_proto_init() {
	if File_platform_communication_v1alpha_preference_center_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_communication_v1alpha_preference_center_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_communication_v1alpha_preference_center_proto_goTypes,
		DependencyIndexes: file_platform_communication_v1alpha_preference_center_proto_depIdxs,
		EnumInfos:         file_platform_communication_v1alpha_preference_center_proto_enumTypes,
		MessageInfos:      file_platform_communication_v1alpha_preference_center_proto_msgTypes,
	}.Build()
	File_platform_communication_v1alpha_preference_center_proto = out.File
	file_platform_communication_v1alpha_preference_center_proto_rawDesc = nil
	file_platform_communication_v1alpha_preference_center_proto_goTypes = nil
	file_platform_communication_v1alpha_preference_center_proto_depIdxs = nil
}
