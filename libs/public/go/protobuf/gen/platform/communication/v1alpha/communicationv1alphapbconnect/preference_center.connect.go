// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/communication/v1alpha/preference_center.proto

package communicationv1alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha "github.com/openecosystems/ecosystem/libs/public/go/protobuf/gen/platform/communication/v1alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PreferenceCenterServiceName is the fully-qualified name of the PreferenceCenterService service.
	PreferenceCenterServiceName = "platform.communication.v1alpha.PreferenceCenterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PreferenceCenterServiceCreateOrUpdatePreferenceProcedure is the fully-qualified name of the
	// PreferenceCenterService's CreateOrUpdatePreference RPC.
	PreferenceCenterServiceCreateOrUpdatePreferenceProcedure = "/platform.communication.v1alpha.PreferenceCenterService/CreateOrUpdatePreference"
	// PreferenceCenterServiceDeletePreferenceProcedure is the fully-qualified name of the
	// PreferenceCenterService's DeletePreference RPC.
	PreferenceCenterServiceDeletePreferenceProcedure = "/platform.communication.v1alpha.PreferenceCenterService/DeletePreference"
	// PreferenceCenterServiceGetPreferenceProcedure is the fully-qualified name of the
	// PreferenceCenterService's GetPreference RPC.
	PreferenceCenterServiceGetPreferenceProcedure = "/platform.communication.v1alpha.PreferenceCenterService/GetPreference"
	// PreferenceCenterServiceGetPreferenceOptionsProcedure is the fully-qualified name of the
	// PreferenceCenterService's GetPreferenceOptions RPC.
	PreferenceCenterServiceGetPreferenceOptionsProcedure = "/platform.communication.v1alpha.PreferenceCenterService/GetPreferenceOptions"
)

// PreferenceCenterServiceClient is a client for the
// platform.communication.v1alpha.PreferenceCenterService service.
type PreferenceCenterServiceClient interface {
	// CreateOrUpdatePreference to our communications
	CreateOrUpdatePreference(context.Context, *connect.Request[v1alpha.CreateOrUpdatePreferenceRequest]) (*connect.Response[v1alpha.CreateOrUpdatePreferenceResponse], error)
	// DeletePreference from our communications
	DeletePreference(context.Context, *connect.Request[v1alpha.DeletePreferenceRequest]) (*connect.Response[v1alpha.DeletePreferenceResponse], error)
	// Get Communication Preferences
	GetPreference(context.Context, *connect.Request[v1alpha.GetPreferenceRequest]) (*connect.Response[v1alpha.GetPreferenceResponse], error)
	// Get Preference Options
	GetPreferenceOptions(context.Context, *connect.Request[v1alpha.GetPreferenceOptionsRequest]) (*connect.Response[v1alpha.GetPreferenceOptionsResponse], error)
}

// NewPreferenceCenterServiceClient constructs a client for the
// platform.communication.v1alpha.PreferenceCenterService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPreferenceCenterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PreferenceCenterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	preferenceCenterServiceMethods := v1alpha.File_platform_communication_v1alpha_preference_center_proto.Services().ByName("PreferenceCenterService").Methods()
	return &preferenceCenterServiceClient{
		createOrUpdatePreference: connect.NewClient[v1alpha.CreateOrUpdatePreferenceRequest, v1alpha.CreateOrUpdatePreferenceResponse](
			httpClient,
			baseURL+PreferenceCenterServiceCreateOrUpdatePreferenceProcedure,
			connect.WithSchema(preferenceCenterServiceMethods.ByName("CreateOrUpdatePreference")),
			connect.WithClientOptions(opts...),
		),
		deletePreference: connect.NewClient[v1alpha.DeletePreferenceRequest, v1alpha.DeletePreferenceResponse](
			httpClient,
			baseURL+PreferenceCenterServiceDeletePreferenceProcedure,
			connect.WithSchema(preferenceCenterServiceMethods.ByName("DeletePreference")),
			connect.WithClientOptions(opts...),
		),
		getPreference: connect.NewClient[v1alpha.GetPreferenceRequest, v1alpha.GetPreferenceResponse](
			httpClient,
			baseURL+PreferenceCenterServiceGetPreferenceProcedure,
			connect.WithSchema(preferenceCenterServiceMethods.ByName("GetPreference")),
			connect.WithClientOptions(opts...),
		),
		getPreferenceOptions: connect.NewClient[v1alpha.GetPreferenceOptionsRequest, v1alpha.GetPreferenceOptionsResponse](
			httpClient,
			baseURL+PreferenceCenterServiceGetPreferenceOptionsProcedure,
			connect.WithSchema(preferenceCenterServiceMethods.ByName("GetPreferenceOptions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// preferenceCenterServiceClient implements PreferenceCenterServiceClient.
type preferenceCenterServiceClient struct {
	createOrUpdatePreference *connect.Client[v1alpha.CreateOrUpdatePreferenceRequest, v1alpha.CreateOrUpdatePreferenceResponse]
	deletePreference         *connect.Client[v1alpha.DeletePreferenceRequest, v1alpha.DeletePreferenceResponse]
	getPreference            *connect.Client[v1alpha.GetPreferenceRequest, v1alpha.GetPreferenceResponse]
	getPreferenceOptions     *connect.Client[v1alpha.GetPreferenceOptionsRequest, v1alpha.GetPreferenceOptionsResponse]
}

// CreateOrUpdatePreference calls
// platform.communication.v1alpha.PreferenceCenterService.CreateOrUpdatePreference.
func (c *preferenceCenterServiceClient) CreateOrUpdatePreference(ctx context.Context, req *connect.Request[v1alpha.CreateOrUpdatePreferenceRequest]) (*connect.Response[v1alpha.CreateOrUpdatePreferenceResponse], error) {
	return c.createOrUpdatePreference.CallUnary(ctx, req)
}

// DeletePreference calls platform.communication.v1alpha.PreferenceCenterService.DeletePreference.
func (c *preferenceCenterServiceClient) DeletePreference(ctx context.Context, req *connect.Request[v1alpha.DeletePreferenceRequest]) (*connect.Response[v1alpha.DeletePreferenceResponse], error) {
	return c.deletePreference.CallUnary(ctx, req)
}

// GetPreference calls platform.communication.v1alpha.PreferenceCenterService.GetPreference.
func (c *preferenceCenterServiceClient) GetPreference(ctx context.Context, req *connect.Request[v1alpha.GetPreferenceRequest]) (*connect.Response[v1alpha.GetPreferenceResponse], error) {
	return c.getPreference.CallUnary(ctx, req)
}

// GetPreferenceOptions calls
// platform.communication.v1alpha.PreferenceCenterService.GetPreferenceOptions.
func (c *preferenceCenterServiceClient) GetPreferenceOptions(ctx context.Context, req *connect.Request[v1alpha.GetPreferenceOptionsRequest]) (*connect.Response[v1alpha.GetPreferenceOptionsResponse], error) {
	return c.getPreferenceOptions.CallUnary(ctx, req)
}

// PreferenceCenterServiceHandler is an implementation of the
// platform.communication.v1alpha.PreferenceCenterService service.
type PreferenceCenterServiceHandler interface {
	// CreateOrUpdatePreference to our communications
	CreateOrUpdatePreference(context.Context, *connect.Request[v1alpha.CreateOrUpdatePreferenceRequest]) (*connect.Response[v1alpha.CreateOrUpdatePreferenceResponse], error)
	// DeletePreference from our communications
	DeletePreference(context.Context, *connect.Request[v1alpha.DeletePreferenceRequest]) (*connect.Response[v1alpha.DeletePreferenceResponse], error)
	// Get Communication Preferences
	GetPreference(context.Context, *connect.Request[v1alpha.GetPreferenceRequest]) (*connect.Response[v1alpha.GetPreferenceResponse], error)
	// Get Preference Options
	GetPreferenceOptions(context.Context, *connect.Request[v1alpha.GetPreferenceOptionsRequest]) (*connect.Response[v1alpha.GetPreferenceOptionsResponse], error)
}

// NewPreferenceCenterServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPreferenceCenterServiceHandler(svc PreferenceCenterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	preferenceCenterServiceMethods := v1alpha.File_platform_communication_v1alpha_preference_center_proto.Services().ByName("PreferenceCenterService").Methods()
	preferenceCenterServiceCreateOrUpdatePreferenceHandler := connect.NewUnaryHandler(
		PreferenceCenterServiceCreateOrUpdatePreferenceProcedure,
		svc.CreateOrUpdatePreference,
		connect.WithSchema(preferenceCenterServiceMethods.ByName("CreateOrUpdatePreference")),
		connect.WithHandlerOptions(opts...),
	)
	preferenceCenterServiceDeletePreferenceHandler := connect.NewUnaryHandler(
		PreferenceCenterServiceDeletePreferenceProcedure,
		svc.DeletePreference,
		connect.WithSchema(preferenceCenterServiceMethods.ByName("DeletePreference")),
		connect.WithHandlerOptions(opts...),
	)
	preferenceCenterServiceGetPreferenceHandler := connect.NewUnaryHandler(
		PreferenceCenterServiceGetPreferenceProcedure,
		svc.GetPreference,
		connect.WithSchema(preferenceCenterServiceMethods.ByName("GetPreference")),
		connect.WithHandlerOptions(opts...),
	)
	preferenceCenterServiceGetPreferenceOptionsHandler := connect.NewUnaryHandler(
		PreferenceCenterServiceGetPreferenceOptionsProcedure,
		svc.GetPreferenceOptions,
		connect.WithSchema(preferenceCenterServiceMethods.ByName("GetPreferenceOptions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.communication.v1alpha.PreferenceCenterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PreferenceCenterServiceCreateOrUpdatePreferenceProcedure:
			preferenceCenterServiceCreateOrUpdatePreferenceHandler.ServeHTTP(w, r)
		case PreferenceCenterServiceDeletePreferenceProcedure:
			preferenceCenterServiceDeletePreferenceHandler.ServeHTTP(w, r)
		case PreferenceCenterServiceGetPreferenceProcedure:
			preferenceCenterServiceGetPreferenceHandler.ServeHTTP(w, r)
		case PreferenceCenterServiceGetPreferenceOptionsProcedure:
			preferenceCenterServiceGetPreferenceOptionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPreferenceCenterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPreferenceCenterServiceHandler struct{}

func (UnimplementedPreferenceCenterServiceHandler) CreateOrUpdatePreference(context.Context, *connect.Request[v1alpha.CreateOrUpdatePreferenceRequest]) (*connect.Response[v1alpha.CreateOrUpdatePreferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.communication.v1alpha.PreferenceCenterService.CreateOrUpdatePreference is not implemented"))
}

func (UnimplementedPreferenceCenterServiceHandler) DeletePreference(context.Context, *connect.Request[v1alpha.DeletePreferenceRequest]) (*connect.Response[v1alpha.DeletePreferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.communication.v1alpha.PreferenceCenterService.DeletePreference is not implemented"))
}

func (UnimplementedPreferenceCenterServiceHandler) GetPreference(context.Context, *connect.Request[v1alpha.GetPreferenceRequest]) (*connect.Response[v1alpha.GetPreferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.communication.v1alpha.PreferenceCenterService.GetPreference is not implemented"))
}

func (UnimplementedPreferenceCenterServiceHandler) GetPreferenceOptions(context.Context, *connect.Request[v1alpha.GetPreferenceOptionsRequest]) (*connect.Response[v1alpha.GetPreferenceOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.communication.v1alpha.PreferenceCenterService.GetPreferenceOptions is not implemented"))
}
