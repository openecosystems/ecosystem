// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/configuration/v2alpha/configuration.proto

package configurationv2alphapbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha "libs/public/go/protobuf/gen/platform/configuration/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "platform.configuration.v2alpha.ConfigurationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigurationServiceCreateConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's CreateConfiguration RPC.
	ConfigurationServiceCreateConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/CreateConfiguration"
	// ConfigurationServiceListConfigurationsProcedure is the fully-qualified name of the
	// ConfigurationService's ListConfigurations RPC.
	ConfigurationServiceListConfigurationsProcedure = "/platform.configuration.v2alpha.ConfigurationService/ListConfigurations"
	// ConfigurationServiceGetConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's GetConfiguration RPC.
	ConfigurationServiceGetConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/GetConfiguration"
	// ConfigurationServiceUpdateConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's UpdateConfiguration RPC.
	ConfigurationServiceUpdateConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/UpdateConfiguration"
	// ConfigurationServiceLoadConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's LoadConfiguration RPC.
	ConfigurationServiceLoadConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/LoadConfiguration"
	// ConfigurationServiceDeleteConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's DeleteConfiguration RPC.
	ConfigurationServiceDeleteConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/DeleteConfiguration"
	// ConfigurationServicePublishConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's PublishConfiguration RPC.
	ConfigurationServicePublishConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/PublishConfiguration"
	// ConfigurationServiceArchiveConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's ArchiveConfiguration RPC.
	ConfigurationServiceArchiveConfigurationProcedure = "/platform.configuration.v2alpha.ConfigurationService/ArchiveConfiguration"
)

// ConfigurationServiceClient is a client for the
// platform.configuration.v2alpha.ConfigurationService service.
type ConfigurationServiceClient interface {
	// Create a configuration that manages an ecosystem
	CreateConfiguration(context.Context, *connect.Request[v2alpha.CreateConfigurationRequest]) (*connect.Response[v2alpha.CreateConfigurationResponse], error)
	// List configurations for this ecosystem
	ListConfigurations(context.Context, *connect.Request[v2alpha.ListConfigurationsRequest]) (*connect.Response[v2alpha.ListConfigurationsResponse], error)
	// Get configuration for an ecosystem
	GetConfiguration(context.Context, *connect.Request[v2alpha.GetConfigurationRequest]) (*connect.Response[v2alpha.GetConfigurationResponse], error)
	// Update configuration for an ecosystem
	UpdateConfiguration(context.Context, *connect.Request[v2alpha.UpdateConfigurationRequest]) (*connect.Response[v2alpha.UpdateConfigurationResponse], error)
	// Load configuration for an ecosystem
	LoadConfiguration(context.Context, *connect.Request[v2alpha.LoadConfigurationRequest]) (*connect.Response[v2alpha.LoadConfigurationResponse], error)
	// Delete configuration for an ecosystem
	DeleteConfiguration(context.Context, *connect.Request[v2alpha.DeleteConfigurationRequest]) (*connect.Response[v2alpha.DeleteConfigurationResponse], error)
	// Publish configuration for an ecosystem
	PublishConfiguration(context.Context, *connect.Request[v2alpha.PublishConfigurationRequest]) (*connect.Response[v2alpha.PublishConfigurationResponse], error)
	// Archive configuration for an ecosystem
	ArchiveConfiguration(context.Context, *connect.Request[v2alpha.ArchiveConfigurationRequest]) (*connect.Response[v2alpha.ArchiveConfigurationResponse], error)
}

// NewConfigurationServiceClient constructs a client for the
// platform.configuration.v2alpha.ConfigurationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configurationServiceMethods := v2alpha.File_platform_configuration_v2alpha_configuration_proto.Services().ByName("ConfigurationService").Methods()
	return &configurationServiceClient{
		createConfiguration: connect.NewClient[v2alpha.CreateConfigurationRequest, v2alpha.CreateConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceCreateConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("CreateConfiguration")),
			connect.WithClientOptions(opts...),
		),
		listConfigurations: connect.NewClient[v2alpha.ListConfigurationsRequest, v2alpha.ListConfigurationsResponse](
			httpClient,
			baseURL+ConfigurationServiceListConfigurationsProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("ListConfigurations")),
			connect.WithClientOptions(opts...),
		),
		getConfiguration: connect.NewClient[v2alpha.GetConfigurationRequest, v2alpha.GetConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceGetConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetConfiguration")),
			connect.WithClientOptions(opts...),
		),
		updateConfiguration: connect.NewClient[v2alpha.UpdateConfigurationRequest, v2alpha.UpdateConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceUpdateConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdateConfiguration")),
			connect.WithClientOptions(opts...),
		),
		loadConfiguration: connect.NewClient[v2alpha.LoadConfigurationRequest, v2alpha.LoadConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceLoadConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("LoadConfiguration")),
			connect.WithClientOptions(opts...),
		),
		deleteConfiguration: connect.NewClient[v2alpha.DeleteConfigurationRequest, v2alpha.DeleteConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceDeleteConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("DeleteConfiguration")),
			connect.WithClientOptions(opts...),
		),
		publishConfiguration: connect.NewClient[v2alpha.PublishConfigurationRequest, v2alpha.PublishConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServicePublishConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("PublishConfiguration")),
			connect.WithClientOptions(opts...),
		),
		archiveConfiguration: connect.NewClient[v2alpha.ArchiveConfigurationRequest, v2alpha.ArchiveConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceArchiveConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("ArchiveConfiguration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	createConfiguration  *connect.Client[v2alpha.CreateConfigurationRequest, v2alpha.CreateConfigurationResponse]
	listConfigurations   *connect.Client[v2alpha.ListConfigurationsRequest, v2alpha.ListConfigurationsResponse]
	getConfiguration     *connect.Client[v2alpha.GetConfigurationRequest, v2alpha.GetConfigurationResponse]
	updateConfiguration  *connect.Client[v2alpha.UpdateConfigurationRequest, v2alpha.UpdateConfigurationResponse]
	loadConfiguration    *connect.Client[v2alpha.LoadConfigurationRequest, v2alpha.LoadConfigurationResponse]
	deleteConfiguration  *connect.Client[v2alpha.DeleteConfigurationRequest, v2alpha.DeleteConfigurationResponse]
	publishConfiguration *connect.Client[v2alpha.PublishConfigurationRequest, v2alpha.PublishConfigurationResponse]
	archiveConfiguration *connect.Client[v2alpha.ArchiveConfigurationRequest, v2alpha.ArchiveConfigurationResponse]
}

// CreateConfiguration calls
// platform.configuration.v2alpha.ConfigurationService.CreateConfiguration.
func (c *configurationServiceClient) CreateConfiguration(ctx context.Context, req *connect.Request[v2alpha.CreateConfigurationRequest]) (*connect.Response[v2alpha.CreateConfigurationResponse], error) {
	return c.createConfiguration.CallUnary(ctx, req)
}

// ListConfigurations calls platform.configuration.v2alpha.ConfigurationService.ListConfigurations.
func (c *configurationServiceClient) ListConfigurations(ctx context.Context, req *connect.Request[v2alpha.ListConfigurationsRequest]) (*connect.Response[v2alpha.ListConfigurationsResponse], error) {
	return c.listConfigurations.CallUnary(ctx, req)
}

// GetConfiguration calls platform.configuration.v2alpha.ConfigurationService.GetConfiguration.
func (c *configurationServiceClient) GetConfiguration(ctx context.Context, req *connect.Request[v2alpha.GetConfigurationRequest]) (*connect.Response[v2alpha.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// UpdateConfiguration calls
// platform.configuration.v2alpha.ConfigurationService.UpdateConfiguration.
func (c *configurationServiceClient) UpdateConfiguration(ctx context.Context, req *connect.Request[v2alpha.UpdateConfigurationRequest]) (*connect.Response[v2alpha.UpdateConfigurationResponse], error) {
	return c.updateConfiguration.CallUnary(ctx, req)
}

// LoadConfiguration calls platform.configuration.v2alpha.ConfigurationService.LoadConfiguration.
func (c *configurationServiceClient) LoadConfiguration(ctx context.Context, req *connect.Request[v2alpha.LoadConfigurationRequest]) (*connect.Response[v2alpha.LoadConfigurationResponse], error) {
	return c.loadConfiguration.CallUnary(ctx, req)
}

// DeleteConfiguration calls
// platform.configuration.v2alpha.ConfigurationService.DeleteConfiguration.
func (c *configurationServiceClient) DeleteConfiguration(ctx context.Context, req *connect.Request[v2alpha.DeleteConfigurationRequest]) (*connect.Response[v2alpha.DeleteConfigurationResponse], error) {
	return c.deleteConfiguration.CallUnary(ctx, req)
}

// PublishConfiguration calls
// platform.configuration.v2alpha.ConfigurationService.PublishConfiguration.
func (c *configurationServiceClient) PublishConfiguration(ctx context.Context, req *connect.Request[v2alpha.PublishConfigurationRequest]) (*connect.Response[v2alpha.PublishConfigurationResponse], error) {
	return c.publishConfiguration.CallUnary(ctx, req)
}

// ArchiveConfiguration calls
// platform.configuration.v2alpha.ConfigurationService.ArchiveConfiguration.
func (c *configurationServiceClient) ArchiveConfiguration(ctx context.Context, req *connect.Request[v2alpha.ArchiveConfigurationRequest]) (*connect.Response[v2alpha.ArchiveConfigurationResponse], error) {
	return c.archiveConfiguration.CallUnary(ctx, req)
}

// ConfigurationServiceHandler is an implementation of the
// platform.configuration.v2alpha.ConfigurationService service.
type ConfigurationServiceHandler interface {
	// Create a configuration that manages an ecosystem
	CreateConfiguration(context.Context, *connect.Request[v2alpha.CreateConfigurationRequest]) (*connect.Response[v2alpha.CreateConfigurationResponse], error)
	// List configurations for this ecosystem
	ListConfigurations(context.Context, *connect.Request[v2alpha.ListConfigurationsRequest]) (*connect.Response[v2alpha.ListConfigurationsResponse], error)
	// Get configuration for an ecosystem
	GetConfiguration(context.Context, *connect.Request[v2alpha.GetConfigurationRequest]) (*connect.Response[v2alpha.GetConfigurationResponse], error)
	// Update configuration for an ecosystem
	UpdateConfiguration(context.Context, *connect.Request[v2alpha.UpdateConfigurationRequest]) (*connect.Response[v2alpha.UpdateConfigurationResponse], error)
	// Load configuration for an ecosystem
	LoadConfiguration(context.Context, *connect.Request[v2alpha.LoadConfigurationRequest]) (*connect.Response[v2alpha.LoadConfigurationResponse], error)
	// Delete configuration for an ecosystem
	DeleteConfiguration(context.Context, *connect.Request[v2alpha.DeleteConfigurationRequest]) (*connect.Response[v2alpha.DeleteConfigurationResponse], error)
	// Publish configuration for an ecosystem
	PublishConfiguration(context.Context, *connect.Request[v2alpha.PublishConfigurationRequest]) (*connect.Response[v2alpha.PublishConfigurationResponse], error)
	// Archive configuration for an ecosystem
	ArchiveConfiguration(context.Context, *connect.Request[v2alpha.ArchiveConfigurationRequest]) (*connect.Response[v2alpha.ArchiveConfigurationResponse], error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configurationServiceMethods := v2alpha.File_platform_configuration_v2alpha_configuration_proto.Services().ByName("ConfigurationService").Methods()
	configurationServiceCreateConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceCreateConfigurationProcedure,
		svc.CreateConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("CreateConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceListConfigurationsHandler := connect.NewUnaryHandler(
		ConfigurationServiceListConfigurationsProcedure,
		svc.ListConfigurations,
		connect.WithSchema(configurationServiceMethods.ByName("ListConfigurations")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceGetConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetConfigurationProcedure,
		svc.GetConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("GetConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdateConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceUpdateConfigurationProcedure,
		svc.UpdateConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("UpdateConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceLoadConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceLoadConfigurationProcedure,
		svc.LoadConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("LoadConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceDeleteConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceDeleteConfigurationProcedure,
		svc.DeleteConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("DeleteConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServicePublishConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServicePublishConfigurationProcedure,
		svc.PublishConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("PublishConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceArchiveConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceArchiveConfigurationProcedure,
		svc.ArchiveConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("ArchiveConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.configuration.v2alpha.ConfigurationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigurationServiceCreateConfigurationProcedure:
			configurationServiceCreateConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServiceListConfigurationsProcedure:
			configurationServiceListConfigurationsHandler.ServeHTTP(w, r)
		case ConfigurationServiceGetConfigurationProcedure:
			configurationServiceGetConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdateConfigurationProcedure:
			configurationServiceUpdateConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServiceLoadConfigurationProcedure:
			configurationServiceLoadConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServiceDeleteConfigurationProcedure:
			configurationServiceDeleteConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServicePublishConfigurationProcedure:
			configurationServicePublishConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServiceArchiveConfigurationProcedure:
			configurationServiceArchiveConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) CreateConfiguration(context.Context, *connect.Request[v2alpha.CreateConfigurationRequest]) (*connect.Response[v2alpha.CreateConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.CreateConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) ListConfigurations(context.Context, *connect.Request[v2alpha.ListConfigurationsRequest]) (*connect.Response[v2alpha.ListConfigurationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.ListConfigurations is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) GetConfiguration(context.Context, *connect.Request[v2alpha.GetConfigurationRequest]) (*connect.Response[v2alpha.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.GetConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdateConfiguration(context.Context, *connect.Request[v2alpha.UpdateConfigurationRequest]) (*connect.Response[v2alpha.UpdateConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.UpdateConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) LoadConfiguration(context.Context, *connect.Request[v2alpha.LoadConfigurationRequest]) (*connect.Response[v2alpha.LoadConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.LoadConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) DeleteConfiguration(context.Context, *connect.Request[v2alpha.DeleteConfigurationRequest]) (*connect.Response[v2alpha.DeleteConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.DeleteConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) PublishConfiguration(context.Context, *connect.Request[v2alpha.PublishConfigurationRequest]) (*connect.Response[v2alpha.PublishConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.PublishConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) ArchiveConfiguration(context.Context, *connect.Request[v2alpha.ArchiveConfigurationRequest]) (*connect.Response[v2alpha.ArchiveConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.configuration.v2alpha.ConfigurationService.ArchiveConfiguration is not implemented"))
}
