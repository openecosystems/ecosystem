// Code generated by protoc-gen-platform go/multiplexer-v2beta. DO NOT EDIT.
// source: platform/cryptography/v2alpha/certificate.proto

package cryptographyv2alphapb

import (
	"connectrpc.com/connect"
	"errors"

	"github.com/nats-io/nats.go/jetstream"
	optionv2pb "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/options/v2"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/bindings/nats"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/bindings/opentelemetry"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/bindings/protovalidate"
	"github.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/bindings/zap"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/protobuf/proto"

	"github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"

	_ "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"
	_ "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/type/v2"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"

	"context"
)

// CertificateServiceHandler is the domain level implementation of the server API for mutations of the CertificateService service
type CertificateServiceHandler struct{}

func (s *CertificateServiceHandler) GetVerifyCertificateConfiguration() *natsnodev1.ListenerConfiguration {

	return &natsnodev1.ListenerConfiguration{
		Entity:     &CertificateSpecEntity{},
		Procedure:  "VerifyCertificate",
		CQRS:       optionv2pb.CQRSType_CQRS_TYPE_MUTATION_UPDATE,
		Topic:      CommandDataCertificateTopic,
		StreamType: natsnodev1.NewInboundStream(),
		JetstreamConfiguration: &jetstream.ConsumerConfig{
			Durable:       "cryptography-certificate-verifyCertificate",
			AckPolicy:     jetstream.AckExplicitPolicy,
			MemoryStorage: false,
		},
	}
}

func (s *CertificateServiceHandler) VerifyCertificate(ctx context.Context, req *connect.Request[VerifyCertificateRequest]) (*connect.Response[VerifyCertificateResponse], error) {

	tracer := *opentelemetryv1.Bound.Tracer
	log := *zaploggerv1.Bound.Logger

	// Executes top level validation, no business domain validation
	validationCtx, validationSpan := tracer.Start(ctx, "request-validation", trace.WithSpanKind(trace.SpanKindInternal))
	v := *protovalidatev0.Bound.Validator
	if err := v.Validate(req.Msg); err != nil {
		return nil, sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(err)
	}
	validationSpan.End()

	// Spec Propagation
	specCtx, specSpan := tracer.Start(validationCtx, "spec-propagation", trace.WithSpanKind(trace.SpanKindInternal))
	spec, ok := ctx.Value(sdkv2betalib.SpecContextKey).(*specv2pb.Spec)
	if !ok {
		return nil, sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(errors.New("Cannot propagate spec to context"))
	}
	specSpan.End()

	// Validate field mask
	if spec.SpecData.FieldMask != nil && len(spec.SpecData.FieldMask.Paths) > 0 {
		spec.SpecData.FieldMask.Normalize()
		if !spec.SpecData.FieldMask.IsValid(&VerifyCertificateResponse{}) {
			log.Error("Invalid field mask")
			return nil, sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(errors.New("Invalid field mask"))
		}
	}

	// Distributed Domain Handler
	handlerCtx, handlerSpan := tracer.Start(specCtx, "event-generation", trace.WithSpanKind(trace.SpanKindInternal))

	config := s.GetVerifyCertificateConfiguration()
	reply, err2 := natsnodev1.Bound.MultiplexCommandSync(handlerCtx, spec, &natsnodev1.SpecCommand{
		Request:        req.Msg,
		Stream:         config.StreamType,
		Procedure:      config.Procedure,
		CommandName:    "",
		CommandTopic:   config.Topic,
		EntityTypeName: config.Entity.TypeName(),
	})
	if err2 != nil {
		log.Error(err2.Error())
		return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
	}

	var dd VerifyCertificateResponse
	err3 := proto.Unmarshal(reply.Data, &dd)
	if err3 != nil {
		log.Error(err3.Error())
		return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
	}

	handlerSpan.End()

	return connect.NewResponse(&dd), nil

}

func (s *CertificateServiceHandler) GetSignCertificateConfiguration() *natsnodev1.ListenerConfiguration {

	return &natsnodev1.ListenerConfiguration{
		Entity:     &CertificateSpecEntity{},
		Procedure:  "SignCertificate",
		CQRS:       optionv2pb.CQRSType_CQRS_TYPE_MUTATION_UPDATE,
		Topic:      CommandDataCertificateTopic,
		StreamType: natsnodev1.NewInboundStream(),
		JetstreamConfiguration: &jetstream.ConsumerConfig{
			Durable:       "cryptography-certificate-signCertificate",
			AckPolicy:     jetstream.AckExplicitPolicy,
			MemoryStorage: false,
		},
	}
}

func (s *CertificateServiceHandler) SignCertificate(ctx context.Context, req *connect.Request[SignCertificateRequest]) (*connect.Response[SignCertificateResponse], error) {

	tracer := *opentelemetryv1.Bound.Tracer
	log := *zaploggerv1.Bound.Logger

	// Executes top level validation, no business domain validation
	validationCtx, validationSpan := tracer.Start(ctx, "request-validation", trace.WithSpanKind(trace.SpanKindInternal))
	v := *protovalidatev0.Bound.Validator
	if err := v.Validate(req.Msg); err != nil {
		return nil, sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(err)
	}
	validationSpan.End()

	// Spec Propagation
	specCtx, specSpan := tracer.Start(validationCtx, "spec-propagation", trace.WithSpanKind(trace.SpanKindInternal))
	spec, ok := ctx.Value(sdkv2betalib.SpecContextKey).(*specv2pb.Spec)
	if !ok {
		return nil, sdkv2betalib.ErrServerInternal.WithInternalErrorDetail(errors.New("Cannot propagate spec to context"))
	}
	specSpan.End()

	// Validate field mask
	if spec.SpecData.FieldMask != nil && len(spec.SpecData.FieldMask.Paths) > 0 {
		spec.SpecData.FieldMask.Normalize()
		if !spec.SpecData.FieldMask.IsValid(&SignCertificateResponse{}) {
			log.Error("Invalid field mask")
			return nil, sdkv2betalib.ErrServerPreconditionFailed.WithInternalErrorDetail(errors.New("Invalid field mask"))
		}
	}

	// Distributed Domain Handler
	handlerCtx, handlerSpan := tracer.Start(specCtx, "event-generation", trace.WithSpanKind(trace.SpanKindInternal))

	config := s.GetSignCertificateConfiguration()
	reply, err2 := natsnodev1.Bound.MultiplexCommandSync(handlerCtx, spec, &natsnodev1.SpecCommand{
		Request:        req.Msg,
		Stream:         config.StreamType,
		Procedure:      config.Procedure,
		CommandName:    "",
		CommandTopic:   config.Topic,
		EntityTypeName: config.Entity.TypeName(),
	})
	if err2 != nil {
		log.Error(err2.Error())
		return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
	}

	var dd SignCertificateResponse
	err3 := proto.Unmarshal(reply.Data, &dd)
	if err3 != nil {
		log.Error(err3.Error())
		return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
	}

	handlerSpan.End()

	return connect.NewResponse(&dd), nil

}
