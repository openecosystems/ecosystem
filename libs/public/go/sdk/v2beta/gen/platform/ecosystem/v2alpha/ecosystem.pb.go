// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: platform/ecosystem/v2alpha/ecosystem.proto

package ecosystemv2alphapb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/options/v2"
	v2 "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported ecosystem type
type EcosystemType int32

const (
	EcosystemType_ECOSYSTEM_TYPE_UNSPECIFIED EcosystemType = 0
	EcosystemType_ECOSYSTEM_TYPE_PUBLIC      EcosystemType = 1
	EcosystemType_ECOSYSTEM_TYPE_PRIVATE     EcosystemType = 2
	EcosystemType_ECOSYSTEM_TYPE_PATIENT     EcosystemType = 3
)

// Enum value maps for EcosystemType.
var (
	EcosystemType_name = map[int32]string{
		0: "ECOSYSTEM_TYPE_UNSPECIFIED",
		1: "ECOSYSTEM_TYPE_PUBLIC",
		2: "ECOSYSTEM_TYPE_PRIVATE",
		3: "ECOSYSTEM_TYPE_PATIENT",
	}
	EcosystemType_value = map[string]int32{
		"ECOSYSTEM_TYPE_UNSPECIFIED": 0,
		"ECOSYSTEM_TYPE_PUBLIC":      1,
		"ECOSYSTEM_TYPE_PRIVATE":     2,
		"ECOSYSTEM_TYPE_PATIENT":     3,
	}
)

func (x EcosystemType) Enum() *EcosystemType {
	p := new(EcosystemType)
	*p = x
	return p
}

func (x EcosystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[0].Descriptor()
}

func (EcosystemType) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[0]
}

func (x EcosystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemType.Descriptor instead.
func (EcosystemType) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{0}
}

// The current status of a ecosystem
type EcosystemStatus int32

const (
	EcosystemStatus_ECOSYSTEM_STATUS_UNSPECIFIED EcosystemStatus = 0
	EcosystemStatus_ECOSYSTEM_STATUS_CREATING    EcosystemStatus = 1
	EcosystemStatus_ECOSYSTEM_STATUS_ACTIVE      EcosystemStatus = 2
	EcosystemStatus_ECOSYSTEM_STATUS_INACTIVE    EcosystemStatus = 3
	EcosystemStatus_ECOSYSTEM_STATUS_UPDATING    EcosystemStatus = 4
	EcosystemStatus_ECOSYSTEM_STATUS_DELETING    EcosystemStatus = 5
	EcosystemStatus_ECOSYSTEM_STATUS_ERROR       EcosystemStatus = 6
)

// Enum value maps for EcosystemStatus.
var (
	EcosystemStatus_name = map[int32]string{
		0: "ECOSYSTEM_STATUS_UNSPECIFIED",
		1: "ECOSYSTEM_STATUS_CREATING",
		2: "ECOSYSTEM_STATUS_ACTIVE",
		3: "ECOSYSTEM_STATUS_INACTIVE",
		4: "ECOSYSTEM_STATUS_UPDATING",
		5: "ECOSYSTEM_STATUS_DELETING",
		6: "ECOSYSTEM_STATUS_ERROR",
	}
	EcosystemStatus_value = map[string]int32{
		"ECOSYSTEM_STATUS_UNSPECIFIED": 0,
		"ECOSYSTEM_STATUS_CREATING":    1,
		"ECOSYSTEM_STATUS_ACTIVE":      2,
		"ECOSYSTEM_STATUS_INACTIVE":    3,
		"ECOSYSTEM_STATUS_UPDATING":    4,
		"ECOSYSTEM_STATUS_DELETING":    5,
		"ECOSYSTEM_STATUS_ERROR":       6,
	}
)

func (x EcosystemStatus) Enum() *EcosystemStatus {
	p := new(EcosystemStatus)
	*p = x
	return p
}

func (x EcosystemStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[1].Descriptor()
}

func (EcosystemStatus) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[1]
}

func (x EcosystemStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemStatus.Descriptor instead.
func (EcosystemStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{1}
}

// The current billing status of a ecosystem
type EcosystemBillingStatus int32

const (
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_UNSPECIFIED EcosystemBillingStatus = 0
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_ACTIVE      EcosystemBillingStatus = 1
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_INACTIVE    EcosystemBillingStatus = 2
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_WARNING     EcosystemBillingStatus = 3
	EcosystemBillingStatus_ECOSYSTEM_BILLING_STATUS_ERROR       EcosystemBillingStatus = 4
)

// Enum value maps for EcosystemBillingStatus.
var (
	EcosystemBillingStatus_name = map[int32]string{
		0: "ECOSYSTEM_BILLING_STATUS_UNSPECIFIED",
		1: "ECOSYSTEM_BILLING_STATUS_ACTIVE",
		2: "ECOSYSTEM_BILLING_STATUS_INACTIVE",
		3: "ECOSYSTEM_BILLING_STATUS_WARNING",
		4: "ECOSYSTEM_BILLING_STATUS_ERROR",
	}
	EcosystemBillingStatus_value = map[string]int32{
		"ECOSYSTEM_BILLING_STATUS_UNSPECIFIED": 0,
		"ECOSYSTEM_BILLING_STATUS_ACTIVE":      1,
		"ECOSYSTEM_BILLING_STATUS_INACTIVE":    2,
		"ECOSYSTEM_BILLING_STATUS_WARNING":     3,
		"ECOSYSTEM_BILLING_STATUS_ERROR":       4,
	}
)

func (x EcosystemBillingStatus) Enum() *EcosystemBillingStatus {
	p := new(EcosystemBillingStatus)
	*p = x
	return p
}

func (x EcosystemBillingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemBillingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[2].Descriptor()
}

func (EcosystemBillingStatus) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[2]
}

func (x EcosystemBillingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemBillingStatus.Descriptor instead.
func (EcosystemBillingStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{2}
}

type EcosystemCommands int32

const (
	EcosystemCommands_ECOSYSTEM_COMMANDS_UNSPECIFIED EcosystemCommands = 0
	EcosystemCommands_ECOSYSTEM_COMMANDS_CREATE      EcosystemCommands = 1
	EcosystemCommands_ECOSYSTEM_COMMANDS_UPDATE      EcosystemCommands = 2
	EcosystemCommands_ECOSYSTEM_COMMANDS_DELETE      EcosystemCommands = 3
)

// Enum value maps for EcosystemCommands.
var (
	EcosystemCommands_name = map[int32]string{
		0: "ECOSYSTEM_COMMANDS_UNSPECIFIED",
		1: "ECOSYSTEM_COMMANDS_CREATE",
		2: "ECOSYSTEM_COMMANDS_UPDATE",
		3: "ECOSYSTEM_COMMANDS_DELETE",
	}
	EcosystemCommands_value = map[string]int32{
		"ECOSYSTEM_COMMANDS_UNSPECIFIED": 0,
		"ECOSYSTEM_COMMANDS_CREATE":      1,
		"ECOSYSTEM_COMMANDS_UPDATE":      2,
		"ECOSYSTEM_COMMANDS_DELETE":      3,
	}
)

func (x EcosystemCommands) Enum() *EcosystemCommands {
	p := new(EcosystemCommands)
	*p = x
	return p
}

func (x EcosystemCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[3].Descriptor()
}

func (EcosystemCommands) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[3]
}

func (x EcosystemCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemCommands.Descriptor instead.
func (EcosystemCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{3}
}

type EcosystemEvents int32

const (
	EcosystemEvents_ECOSYSTEM_EVENTS_UNSPECIFIED EcosystemEvents = 0
	EcosystemEvents_ECOSYSTEM_EVENTS_CREATED     EcosystemEvents = 1
	EcosystemEvents_ECOSYSTEM_EVENTS_UPDATED     EcosystemEvents = 2
	EcosystemEvents_ECOSYSTEM_EVENTS_DELETED     EcosystemEvents = 3
	EcosystemEvents_ECOSYSTEM_EVENTS_ERRORED     EcosystemEvents = 4
)

// Enum value maps for EcosystemEvents.
var (
	EcosystemEvents_name = map[int32]string{
		0: "ECOSYSTEM_EVENTS_UNSPECIFIED",
		1: "ECOSYSTEM_EVENTS_CREATED",
		2: "ECOSYSTEM_EVENTS_UPDATED",
		3: "ECOSYSTEM_EVENTS_DELETED",
		4: "ECOSYSTEM_EVENTS_ERRORED",
	}
	EcosystemEvents_value = map[string]int32{
		"ECOSYSTEM_EVENTS_UNSPECIFIED": 0,
		"ECOSYSTEM_EVENTS_CREATED":     1,
		"ECOSYSTEM_EVENTS_UPDATED":     2,
		"ECOSYSTEM_EVENTS_DELETED":     3,
		"ECOSYSTEM_EVENTS_ERRORED":     4,
	}
)

func (x EcosystemEvents) Enum() *EcosystemEvents {
	p := new(EcosystemEvents)
	*p = x
	return p
}

func (x EcosystemEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcosystemEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[4].Descriptor()
}

func (EcosystemEvents) Type() protoreflect.EnumType {
	return &file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes[4]
}

func (x EcosystemEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcosystemEvents.Descriptor instead.
func (EcosystemEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{4}
}

type EcosystemConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Closed        bool                   `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcosystemConfiguration) Reset() {
	*x = EcosystemConfiguration{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcosystemConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcosystemConfiguration) ProtoMessage() {}

func (x *EcosystemConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcosystemConfiguration.ProtoReflect.Descriptor instead.
func (*EcosystemConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{0}
}

func (x *EcosystemConfiguration) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

// Supported fields to create a ecosystem
type CreateEcosystemRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Globally unique slug for this ecosystem
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	// What type of ecosystem is this?
	Type EcosystemType `protobuf:"varint,3,opt,name=type,proto3,enum=platform.ecosystem.v2alpha.EcosystemType" json:"type,omitempty"`
	Name string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Give your ecosystem a short description
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Describe your ecosystem in detail
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Cidr          string `protobuf:"bytes,7,opt,name=cidr,proto3" json:"cidr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEcosystemRequest) Reset() {
	*x = CreateEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEcosystemRequest) ProtoMessage() {}

func (x *CreateEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEcosystemRequest.ProtoReflect.Descriptor instead.
func (*CreateEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEcosystemRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateEcosystemRequest) GetType() EcosystemType {
	if x != nil {
		return x.Type
	}
	return EcosystemType_ECOSYSTEM_TYPE_UNSPECIFIED
}

func (x *CreateEcosystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEcosystemRequest) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *CreateEcosystemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEcosystemRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type CreateEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// REMOVE THIS
	Ecosystem *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	TestEcosystem *Ecosystem `protobuf:"bytes,3,opt,name=test_ecosystem,json=testEcosystem,proto3" json:"test_ecosystem,omitempty"`
	LiveEcosystem *Ecosystem `protobuf:"bytes,4,opt,name=live_ecosystem,json=liveEcosystem,proto3" json:"live_ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEcosystemResponse) Reset() {
	*x = CreateEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEcosystemResponse) ProtoMessage() {}

func (x *CreateEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEcosystemResponse.ProtoReflect.Descriptor instead.
func (*CreateEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *CreateEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

func (x *CreateEcosystemResponse) GetTestEcosystem() *Ecosystem {
	if x != nil {
		return x.TestEcosystem
	}
	return nil
}

func (x *CreateEcosystemResponse) GetLiveEcosystem() *Ecosystem {
	if x != nil {
		return x.LiveEcosystem
	}
	return nil
}

type GetEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug          string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEcosystemRequest) Reset() {
	*x = GetEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEcosystemRequest) ProtoMessage() {}

func (x *GetEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEcosystemRequest.ProtoReflect.Descriptor instead.
func (*GetEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{3}
}

func (x *GetEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEcosystemResponse) Reset() {
	*x = GetEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEcosystemResponse) ProtoMessage() {}

func (x *GetEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEcosystemResponse.ProtoReflect.Descriptor instead.
func (*GetEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{4}
}

func (x *GetEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *GetEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type ListEcosystemsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How many records would you like returned within one page?
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token provided in the response
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEcosystemsRequest) Reset() {
	*x = ListEcosystemsRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEcosystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEcosystemsRequest) ProtoMessage() {}

func (x *ListEcosystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEcosystemsRequest.ProtoReflect.Descriptor instead.
func (*ListEcosystemsRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{5}
}

func (x *ListEcosystemsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEcosystemsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListEcosystemsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	// Total count of ecosystems
	TotalSize int32 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// Token to retrieve the next page
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of ecosystems
	Ecosystems    []*Ecosystem `protobuf:"bytes,4,rep,name=ecosystems,proto3" json:"ecosystems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEcosystemsResponse) Reset() {
	*x = ListEcosystemsResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEcosystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEcosystemsResponse) ProtoMessage() {}

func (x *ListEcosystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEcosystemsResponse.ProtoReflect.Descriptor instead.
func (*ListEcosystemsResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{6}
}

func (x *ListEcosystemsResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *ListEcosystemsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListEcosystemsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEcosystemsResponse) GetEcosystems() []*Ecosystem {
	if x != nil {
		return x.Ecosystems
	}
	return nil
}

type EcosystemsFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Filter        string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcosystemsFilter) Reset() {
	*x = EcosystemsFilter{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcosystemsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcosystemsFilter) ProtoMessage() {}

func (x *EcosystemsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcosystemsFilter.ProtoReflect.Descriptor instead.
func (*EcosystemsFilter) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{7}
}

func (x *EcosystemsFilter) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type UpdateEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Give your ecosystem a short description
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Describe your ecosystem in detail
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEcosystemRequest) Reset() {
	*x = UpdateEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEcosystemRequest) ProtoMessage() {}

func (x *UpdateEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEcosystemRequest.ProtoReflect.Descriptor instead.
func (*UpdateEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *UpdateEcosystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEcosystemRequest) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *UpdateEcosystemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEcosystemResponse) Reset() {
	*x = UpdateEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEcosystemResponse) ProtoMessage() {}

func (x *UpdateEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEcosystemResponse.ProtoReflect.Descriptor instead.
func (*UpdateEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *UpdateEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type DeleteEcosystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique slug for this ecosystem
	Slug          string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEcosystemRequest) Reset() {
	*x = DeleteEcosystemRequest{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEcosystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEcosystemRequest) ProtoMessage() {}

func (x *DeleteEcosystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEcosystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteEcosystemRequest) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteEcosystemRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type DeleteEcosystemResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext *v2.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Ecosystem     *Ecosystem `protobuf:"bytes,2,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEcosystemResponse) Reset() {
	*x = DeleteEcosystemResponse{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEcosystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEcosystemResponse) ProtoMessage() {}

func (x *DeleteEcosystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEcosystemResponse.ProtoReflect.Descriptor instead.
func (*DeleteEcosystemResponse) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteEcosystemResponse) GetSpecContext() *v2.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *DeleteEcosystemResponse) GetEcosystem() *Ecosystem {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type Ecosystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug           string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SourceId string `protobuf:"bytes,6,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Type EcosystemType `protobuf:"varint,7,opt,name=type,proto3,enum=platform.ecosystem.v2alpha.EcosystemType" json:"type,omitempty"`
	Status EcosystemStatus `protobuf:"varint,8,opt,name=status,proto3,enum=platform.ecosystem.v2alpha.EcosystemStatus" json:"status,omitempty"`
	StatusDetails string `protobuf:"bytes,9,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	ShortDescription string `protobuf:"bytes,11,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	Description   string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Cidr          string `protobuf:"bytes,13,opt,name=cidr,proto3" json:"cidr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ecosystem) Reset() {
	*x = Ecosystem{}
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ecosystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ecosystem) ProtoMessage() {}

func (x *Ecosystem) ProtoReflect() protoreflect.Message {
	mi := &file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ecosystem.ProtoReflect.Descriptor instead.
func (*Ecosystem) Descriptor() ([]byte, []int) {
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP(), []int{12}
}

func (x *Ecosystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ecosystem) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Ecosystem) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Ecosystem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ecosystem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Ecosystem) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Ecosystem) GetType() EcosystemType {
	if x != nil {
		return x.Type
	}
	return EcosystemType_ECOSYSTEM_TYPE_UNSPECIFIED
}

func (x *Ecosystem) GetStatus() EcosystemStatus {
	if x != nil {
		return x.Status
	}
	return EcosystemStatus_ECOSYSTEM_STATUS_UNSPECIFIED
}

func (x *Ecosystem) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

func (x *Ecosystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ecosystem) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *Ecosystem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ecosystem) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

var File_platform_ecosystem_v2alpha_ecosystem_proto protoreflect.FileDescriptor

const file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc = "" +
	"\n" +
	"*platform/ecosystem/v2alpha/ecosystem.proto\x12\x1aplatform.ecosystem.v2alpha\x1a%platform/options/v2/annotations.proto\x1a\x1bplatform/spec/v2/spec.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bbuf/validate/validate.proto\"b\n" +
	"\x16EcosystemConfiguration\x12H\n" +
	"\x06closed\x18\x01 \x01(\bB0ҷ\x18,\n" +
	"*\x1a&Is this ecosystem open to connections?(\x01R\x06closed\"\xe7\x03\n" +
	"\x16CreateEcosystemRequest\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12\x96\x01\n" +
	"\x04slug\x18\x02 \x01(\tB\x81\x01\xbaH~\xba\x01{\n" +
	"\vslug_format\x12Gslug must be 3 - 24 characters long and only contain letters and digits\x1a#this.matches('^[A-Za-z0-9]{3,24}$')R\x04slug\x12=\n" +
	"\x04type\x18\x03 \x01(\x0e2).platform.ecosystem.v2alpha.EcosystemTypeR\x04type\x12\x1d\n" +
	"\x04name\x18\x04 \x01(\tB\t\xbaH\x06r\x04\x10\x03\x18\x10R\x04name\x127\n" +
	"\x11short_description\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x05\x18\xff\x01R\x10shortDescription\x12,\n" +
	"\vdescription\x18\x06 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x05\x18\x80\bR\vdescription\x12>\n" +
	"\x04cidr\x18\a \x01(\tB*\xbaH'\xba\x01$\n" +
	"\fvalid_prefix\x12\x01.\x1a\x11this.isIpPrefix()R\x04cidr:\x06\xfa\xb6\x18\x02\b\x01\"\xcc\x02\n" +
	"\x17CreateEcosystemResponse\x12H\n" +
	"\fspec_context\x18\x01 \x01(\v2%.platform.spec.v2.SpecResponseContextR\vspecContext\x12C\n" +
	"\tecosystem\x18\x02 \x01(\v2%.platform.ecosystem.v2alpha.EcosystemR\tecosystem\x12L\n" +
	"\x0etest_ecosystem\x18\x03 \x01(\v2%.platform.ecosystem.v2alpha.EcosystemR\rtestEcosystem\x12L\n" +
	"\x0elive_ecosystem\x18\x04 \x01(\v2%.platform.ecosystem.v2alpha.EcosystemR\rliveEcosystem:\x06\xfa\xb6\x18\x02\b\x02\"\xb6\x01\n" +
	"\x13GetEcosystemRequest\x12\x96\x01\n" +
	"\x04slug\x18\x01 \x01(\tB\x81\x01\xbaH~\xba\x01{\n" +
	"\vslug_format\x12Gslug must be 3 - 24 characters long and only contain letters and digits\x1a#this.matches('^[A-Za-z0-9]{3,24}$')R\x04slug:\x06\xfa\xb6\x18\x02\b\x01\"\xad\x01\n" +
	"\x14GetEcosystemResponse\x12H\n" +
	"\fspec_context\x18\x01 \x01(\v2%.platform.spec.v2.SpecResponseContextR\vspecContext\x12C\n" +
	"\tecosystem\x18\x02 \x01(\v2%.platform.ecosystem.v2alpha.EcosystemR\tecosystem:\x06\xfa\xb6\x18\x02\b\x02\"f\n" +
	"\x15ListEcosystemsRequest\x12&\n" +
	"\tpage_size\x18\x01 \x01(\rB\t\xbaH\x06*\x04\x18\n" +
	" \x00R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken:\x06\xfa\xb6\x18\x02\b\x01\"\xf8\x01\n" +
	"\x16ListEcosystemsResponse\x12H\n" +
	"\fspec_context\x18\x01 \x01(\v2%.platform.spec.v2.SpecResponseContextR\vspecContext\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x05R\ttotalSize\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\x12E\n" +
	"\n" +
	"ecosystems\x18\x04 \x03(\v2%.platform.ecosystem.v2alpha.EcosystemR\n" +
	"ecosystems:\x06\xfa\xb6\x18\x02\b\x02\"2\n" +
	"\x10EcosystemsFilter\x12\x16\n" +
	"\x06filter\x18\x01 \x01(\tR\x06filter:\x06\xfa\xb6\x18\x02\b\x01\"\xbf\x02\n" +
	"\x16UpdateEcosystemRequest\x12\x96\x01\n" +
	"\x04slug\x18\x01 \x01(\tB\x81\x01\xbaH~\xba\x01{\n" +
	"\vslug_format\x12Gslug must be 3 - 24 characters long and only contain letters and digits\x1a#this.matches('^[A-Za-z0-9]{3,24}$')R\x04slug\x12\x1d\n" +
	"\x04name\x18\x04 \x01(\tB\t\xbaH\x06r\x04\x10\x03\x18\x10R\x04name\x127\n" +
	"\x11short_description\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x05\x18\xff\x01R\x10shortDescription\x12,\n" +
	"\vdescription\x18\x06 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x05\x18\x80\bR\vdescription:\x06\xfa\xb6\x18\x02\b\x01\"\xb0\x01\n" +
	"\x17UpdateEcosystemResponse\x12H\n" +
	"\fspec_context\x18\x01 \x01(\v2%.platform.spec.v2.SpecResponseContextR\vspecContext\x12C\n" +
	"\tecosystem\x18\x02 \x01(\v2%.platform.ecosystem.v2alpha.EcosystemR\tecosystem:\x06\xfa\xb6\x18\x02\b\x02\"\xb9\x01\n" +
	"\x16DeleteEcosystemRequest\x12\x96\x01\n" +
	"\x04slug\x18\x01 \x01(\tB\x81\x01\xbaH~\xba\x01{\n" +
	"\vslug_format\x12Gslug must be 3 - 24 characters long and only contain letters and digits\x1a#this.matches('^[A-Za-z0-9]{3,24}$')R\x04slug:\x06\xfa\xb6\x18\x02\b\x01\"\xb0\x01\n" +
	"\x17DeleteEcosystemResponse\x12H\n" +
	"\fspec_context\x18\x01 \x01(\v2%.platform.spec.v2.SpecResponseContextR\vspecContext\x12C\n" +
	"\tecosystem\x18\x02 \x01(\v2%.platform.ecosystem.v2alpha.EcosystemR\tecosystem:\x06\xfa\xb6\x18\x02\b\x02\"\x9d\x04\n" +
	"\tEcosystem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\x04slug\x18\x02 \x01(\tB\x06ʷ\x18\x02\b\x01R\x04slug\x12'\n" +
	"\x0forganization_id\x18\x03 \x01(\tR\x0eorganizationId\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1b\n" +
	"\tsource_id\x18\x06 \x01(\tR\bsourceId\x12=\n" +
	"\x04type\x18\a \x01(\x0e2).platform.ecosystem.v2alpha.EcosystemTypeR\x04type\x12C\n" +
	"\x06status\x18\b \x01(\x0e2+.platform.ecosystem.v2alpha.EcosystemStatusR\x06status\x12%\n" +
	"\x0estatus_details\x18\t \x01(\tR\rstatusDetails\x12\x12\n" +
	"\x04name\x18\n" +
	" \x01(\tR\x04name\x12+\n" +
	"\x11short_description\x18\v \x01(\tR\x10shortDescription\x12 \n" +
	"\vdescription\x18\f \x01(\tR\vdescription\x12\x12\n" +
	"\x04cidr\x18\r \x01(\tR\x04cidr:\x06\xfa\xb6\x18\x02\b\x02*\x82\x01\n" +
	"\rEcosystemType\x12\x1e\n" +
	"\x1aECOSYSTEM_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ECOSYSTEM_TYPE_PUBLIC\x10\x01\x12\x1a\n" +
	"\x16ECOSYSTEM_TYPE_PRIVATE\x10\x02\x12\x1a\n" +
	"\x16ECOSYSTEM_TYPE_PATIENT\x10\x03*\xe8\x01\n" +
	"\x0fEcosystemStatus\x12 \n" +
	"\x1cECOSYSTEM_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19ECOSYSTEM_STATUS_CREATING\x10\x01\x12\x1b\n" +
	"\x17ECOSYSTEM_STATUS_ACTIVE\x10\x02\x12\x1d\n" +
	"\x19ECOSYSTEM_STATUS_INACTIVE\x10\x03\x12\x1d\n" +
	"\x19ECOSYSTEM_STATUS_UPDATING\x10\x04\x12\x1d\n" +
	"\x19ECOSYSTEM_STATUS_DELETING\x10\x05\x12\x1a\n" +
	"\x16ECOSYSTEM_STATUS_ERROR\x10\x06*\xd8\x01\n" +
	"\x16EcosystemBillingStatus\x12(\n" +
	"$ECOSYSTEM_BILLING_STATUS_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fECOSYSTEM_BILLING_STATUS_ACTIVE\x10\x01\x12%\n" +
	"!ECOSYSTEM_BILLING_STATUS_INACTIVE\x10\x02\x12$\n" +
	" ECOSYSTEM_BILLING_STATUS_WARNING\x10\x03\x12\"\n" +
	"\x1eECOSYSTEM_BILLING_STATUS_ERROR\x10\x04*\x9c\x01\n" +
	"\x11EcosystemCommands\x12\"\n" +
	"\x1eECOSYSTEM_COMMANDS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19ECOSYSTEM_COMMANDS_CREATE\x10\x01\x12\x1d\n" +
	"\x19ECOSYSTEM_COMMANDS_UPDATE\x10\x02\x12\x1d\n" +
	"\x19ECOSYSTEM_COMMANDS_DELETE\x10\x03\x1a\x06\x92\xb8\x18\x02\b\x03*\xbb\x01\n" +
	"\x0fEcosystemEvents\x12 \n" +
	"\x1cECOSYSTEM_EVENTS_UNSPECIFIED\x10\x00\x12$\n" +
	"\x18ECOSYSTEM_EVENTS_CREATED\x10\x01\x1a\x06\xe2\xb8\x18\x02\b\x01\x12\x1c\n" +
	"\x18ECOSYSTEM_EVENTS_UPDATED\x10\x02\x12\x1c\n" +
	"\x18ECOSYSTEM_EVENTS_DELETED\x10\x03\x12\x1c\n" +
	"\x18ECOSYSTEM_EVENTS_ERRORED\x10\x04\x1a\x06\x92\xb8\x18\x02\b\x042\xdc\a\n" +
	"\x10EcosystemService\x12\xbf\x01\n" +
	"\x0fCreateEcosystem\x122.platform.ecosystem.v2alpha.CreateEcosystemRequest\x1a3.platform.ecosystem.v2alpha.CreateEcosystemResponse\"C\xa2\xb6\x18\f\b\x03\x10\x012\x06create\xaa\xb6\x18\x02\b\x02\xb2\xb6\x18\f\n" +
	"\x06create\x12\x02\xcb\x01\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/v2alpha/ecosystem\x12\xb5\x01\n" +
	"\x0eListEcosystems\x121.platform.ecosystem.v2alpha.ListEcosystemsRequest\x1a2.platform.ecosystem.v2alpha.ListEcosystemsResponse\"<\xa2\xb6\x18\n" +
	"\b\x03\x10\x012\x04list\xaa\xb6\x18\x02\b\b\xb2\xb6\x18\n" +
	"\n" +
	"\x04list\x12\x02\xcd\x01\x82\xd3\xe4\x93\x02\x14\x12\x12/v2alpha/ecosystem\x12\xb4\x01\n" +
	"\fGetEcosystem\x12/.platform.ecosystem.v2alpha.GetEcosystemRequest\x1a0.platform.ecosystem.v2alpha.GetEcosystemResponse\"A\xa2\xb6\x18\t\b\x03\x10\x012\x03get\xaa\xb6\x18\x02\b\n" +
	"\xb2\xb6\x18\t\n" +
	"\x03get\x12\x02\xcd\x01\x82\xd3\xe4\x93\x02\x1b\x12\x19/v2alpha/ecosystem/{slug}\x12\xc6\x01\n" +
	"\x0fUpdateEcosystem\x122.platform.ecosystem.v2alpha.UpdateEcosystemRequest\x1a3.platform.ecosystem.v2alpha.UpdateEcosystemResponse\"J\xa2\xb6\x18\f\b\x03\x10\x012\x06update\xaa\xb6\x18\x02\b\x03\xb2\xb6\x18\f\n" +
	"\x06update\x12\x02\xcd\x01\x82\xd3\xe4\x93\x02\x1e:\x01*\x1a\x19/v2alpha/ecosystem/{slug}\x12\xc3\x01\n" +
	"\x0fDeleteEcosystem\x122.platform.ecosystem.v2alpha.DeleteEcosystemRequest\x1a3.platform.ecosystem.v2alpha.DeleteEcosystemResponse\"G\xa2\xb6\x18\f\b\x03\x10\x012\x06delete\xaa\xb6\x18\x02\b\x04\xb2\xb6\x18\f\n" +
	"\x06delete\x12\x02\xcb\x01\x82\xd3\xe4\x93\x02\x1b*\x19/v2alpha/ecosystem/{slug}\x1a\bҵ\x18\x04\b\x03\x10\x01B\xb6\x01\x82\xc4\x13\x02\b\x03\x82\xb5\x18\x06\b\x03\x10\x01\x18\x02\x8a\xb5\x18 \n" +
	"\tecosystem\x12\n" +
	"ecosystems\"\x03jan(\x028\x01\x92\xb5\x18\x03\n" +
	"\x01\x03\x9a\xb5\x18\x00\xa2\xb5\x18\x02\b\x01Zogithub.com/openecosystems/ecosystem/libs/public/go/sdk/v2beta/gen/platform/ecosystem/v2alpha;ecosystemv2alphapbb\x06proto3"

var (
	file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescOnce sync.Once
	file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescData []byte
)

func file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescGZIP() []byte {
	file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescOnce.Do(func() {
		file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc), len(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc)))
	})
	return file_platform_ecosystem_v2alpha_ecosystem_proto_rawDescData
}

var file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_platform_ecosystem_v2alpha_ecosystem_proto_goTypes = []any{
	(EcosystemType)(0),              // 0: platform.ecosystem.v2alpha.EcosystemType
	(EcosystemStatus)(0),            // 1: platform.ecosystem.v2alpha.EcosystemStatus
	(EcosystemBillingStatus)(0),     // 2: platform.ecosystem.v2alpha.EcosystemBillingStatus
	(EcosystemCommands)(0),          // 3: platform.ecosystem.v2alpha.EcosystemCommands
	(EcosystemEvents)(0),            // 4: platform.ecosystem.v2alpha.EcosystemEvents
	(*EcosystemConfiguration)(nil),  // 5: platform.ecosystem.v2alpha.EcosystemConfiguration
	(*CreateEcosystemRequest)(nil),  // 6: platform.ecosystem.v2alpha.CreateEcosystemRequest
	(*CreateEcosystemResponse)(nil), // 7: platform.ecosystem.v2alpha.CreateEcosystemResponse
	(*GetEcosystemRequest)(nil),     // 8: platform.ecosystem.v2alpha.GetEcosystemRequest
	(*GetEcosystemResponse)(nil),    // 9: platform.ecosystem.v2alpha.GetEcosystemResponse
	(*ListEcosystemsRequest)(nil),   // 10: platform.ecosystem.v2alpha.ListEcosystemsRequest
	(*ListEcosystemsResponse)(nil),  // 11: platform.ecosystem.v2alpha.ListEcosystemsResponse
	(*EcosystemsFilter)(nil),        // 12: platform.ecosystem.v2alpha.EcosystemsFilter
	(*UpdateEcosystemRequest)(nil),  // 13: platform.ecosystem.v2alpha.UpdateEcosystemRequest
	(*UpdateEcosystemResponse)(nil), // 14: platform.ecosystem.v2alpha.UpdateEcosystemResponse
	(*DeleteEcosystemRequest)(nil),  // 15: platform.ecosystem.v2alpha.DeleteEcosystemRequest
	(*DeleteEcosystemResponse)(nil), // 16: platform.ecosystem.v2alpha.DeleteEcosystemResponse
	(*Ecosystem)(nil),               // 17: platform.ecosystem.v2alpha.Ecosystem
	(*v2.SpecResponseContext)(nil),  // 18: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),   // 19: google.protobuf.Timestamp
}
var file_platform_ecosystem_v2alpha_ecosystem_proto_depIdxs = []int32{
	0,  // 0: platform.ecosystem.v2alpha.CreateEcosystemRequest.type:type_name -> platform.ecosystem.v2alpha.EcosystemType
	18, // 1: platform.ecosystem.v2alpha.CreateEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 2: platform.ecosystem.v2alpha.CreateEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	17, // 3: platform.ecosystem.v2alpha.CreateEcosystemResponse.test_ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	17, // 4: platform.ecosystem.v2alpha.CreateEcosystemResponse.live_ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 5: platform.ecosystem.v2alpha.GetEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 6: platform.ecosystem.v2alpha.GetEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 7: platform.ecosystem.v2alpha.ListEcosystemsResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 8: platform.ecosystem.v2alpha.ListEcosystemsResponse.ecosystems:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 9: platform.ecosystem.v2alpha.UpdateEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 10: platform.ecosystem.v2alpha.UpdateEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	18, // 11: platform.ecosystem.v2alpha.DeleteEcosystemResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	17, // 12: platform.ecosystem.v2alpha.DeleteEcosystemResponse.ecosystem:type_name -> platform.ecosystem.v2alpha.Ecosystem
	19, // 13: platform.ecosystem.v2alpha.Ecosystem.created_at:type_name -> google.protobuf.Timestamp
	19, // 14: platform.ecosystem.v2alpha.Ecosystem.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 15: platform.ecosystem.v2alpha.Ecosystem.type:type_name -> platform.ecosystem.v2alpha.EcosystemType
	1,  // 16: platform.ecosystem.v2alpha.Ecosystem.status:type_name -> platform.ecosystem.v2alpha.EcosystemStatus
	6,  // 17: platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem:input_type -> platform.ecosystem.v2alpha.CreateEcosystemRequest
	10, // 18: platform.ecosystem.v2alpha.EcosystemService.ListEcosystems:input_type -> platform.ecosystem.v2alpha.ListEcosystemsRequest
	8,  // 19: platform.ecosystem.v2alpha.EcosystemService.GetEcosystem:input_type -> platform.ecosystem.v2alpha.GetEcosystemRequest
	13, // 20: platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem:input_type -> platform.ecosystem.v2alpha.UpdateEcosystemRequest
	15, // 21: platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem:input_type -> platform.ecosystem.v2alpha.DeleteEcosystemRequest
	7,  // 22: platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem:output_type -> platform.ecosystem.v2alpha.CreateEcosystemResponse
	11, // 23: platform.ecosystem.v2alpha.EcosystemService.ListEcosystems:output_type -> platform.ecosystem.v2alpha.ListEcosystemsResponse
	9,  // 24: platform.ecosystem.v2alpha.EcosystemService.GetEcosystem:output_type -> platform.ecosystem.v2alpha.GetEcosystemResponse
	14, // 25: platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem:output_type -> platform.ecosystem.v2alpha.UpdateEcosystemResponse
	16, // 26: platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem:output_type -> platform.ecosystem.v2alpha.DeleteEcosystemResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_platform_ecosystem_v2alpha_ecosystem_proto_init() }
func file_platform_ecosystem_v2alpha_ecosystem_proto_init() {
	if File_platform_ecosystem_v2alpha_ecosystem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc), len(file_platform_ecosystem_v2alpha_ecosystem_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_ecosystem_v2alpha_ecosystem_proto_goTypes,
		DependencyIndexes: file_platform_ecosystem_v2alpha_ecosystem_proto_depIdxs,
		EnumInfos:         file_platform_ecosystem_v2alpha_ecosystem_proto_enumTypes,
		MessageInfos:      file_platform_ecosystem_v2alpha_ecosystem_proto_msgTypes,
	}.Build()
	File_platform_ecosystem_v2alpha_ecosystem_proto = out.File
	file_platform_ecosystem_v2alpha_ecosystem_proto_goTypes = nil
	file_platform_ecosystem_v2alpha_ecosystem_proto_depIdxs = nil
}
