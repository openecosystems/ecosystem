// Code generated by protoc-gen-platform go/spec. DO NOT EDIT.
// source: platform/cryptography/v2alpha/certificate.proto

package cryptographyv2alphapb

type CertificateCommand int
type CertificateEvent int

const (
	CertificateTypeName                         string = "certificate"
	CertificateTypeNamePlural                   string = "certificates"
	CertificateTypeNameScreamingCamelCase       string = "CERTIFICATE"
	CertificateTypeNamePluralScreamingCamelCase string = "CERTIFICATES"
	CertificateTypeNameEventPrefix              string = "certificate."
)

const (
	CertificateCommandsUnspecified       CertificateCommand = iota
	CertificateCommandsVerifyCertificate CertificateCommand = iota
	CertificateCommandsSignCertificate   CertificateCommand = iota
	UnrecognizedCertificateCommand       CertificateCommand = -1
)

const (
	CertificateEventsUnspecified         CertificateEvent = iota
	CertificateEventsVerifiedCertificate CertificateEvent = iota
	CertificateEventsSignedCertificate   CertificateEvent = iota
	UnrecognizedCertificateEvent         CertificateEvent = -1
)

const (
	CommandDataCertificateTopic  string = "certificate.data.command"
	EventDataCertificateTopic    string = "certificate.data.event"
	RoutineDataCertificateTopic  string = "certificate.data.routine"
	UnrecognizedCertificateTopic string = "unrecognized"
)

func (c CertificateCommand) CommandName() string {

	switch c {

	case CertificateCommandsUnspecified:
		return "CertificateCommandsUnspecified"
	case CertificateCommandsVerifyCertificate:
		return "CertificateCommandsVerifyCertificate"
	case CertificateCommandsSignCertificate:
		return "CertificateCommandsSignCertificate"
	default:
		return "UnrecognizedCertificateCommand"
	}

}

func (e CertificateEvent) EventName() string {

	switch e {

	case CertificateEventsUnspecified:
		return "CertificateEventsUnspecified"
	case CertificateEventsVerifiedCertificate:
		return "CertificateEventsVerifiedCertificate"
	case CertificateEventsSignedCertificate:
		return "CertificateEventsSignedCertificate"
	default:
		return "UnrecognizedCertificateEvent"
	}

}

func (c CertificateCommand) CommandTopic() string {

	switch c {

	case CertificateCommandsUnspecified:
		return CommandDataCertificateTopic
	case CertificateCommandsVerifyCertificate:
		return CommandDataCertificateTopic
	case CertificateCommandsSignCertificate:
		return CommandDataCertificateTopic
	default:
		return UnrecognizedCertificateTopic
	}

}

func (e CertificateEvent) EventTopic() string {

	switch e {

	case CertificateEventsUnspecified:
		return EventDataCertificateTopic
	case CertificateEventsVerifiedCertificate:
		return EventDataCertificateTopic
	case CertificateEventsSignedCertificate:
		return EventDataCertificateTopic
	default:
		return UnrecognizedCertificateTopic
	}

}

func (c CertificateCommand) CommandTopicWildcard() string {
	return CertificateTypeNameEventPrefix + ">"
}

func (e CertificateEvent) EventTopicWildcard() string {
	return CertificateTypeNameEventPrefix + ">"
}

func GetCertificateCommand(command string) CertificateCommand {

	switch command {

	case "CertificateCommandsUnspecified":
		return CertificateCommandsUnspecified
	case "CertificateCommandsVerifyCertificate":
		return CertificateCommandsVerifyCertificate
	case "CertificateCommandsSignCertificate":
		return CertificateCommandsSignCertificate
	default:
		return UnrecognizedCertificateCommand
	}
}

func GetCertificateEvent(event string) CertificateEvent {

	switch event {

	case "CertificateEventsUnspecified":
		return CertificateEventsUnspecified
	case "CertificateEventsVerifiedCertificate":
		return CertificateEventsVerifiedCertificate
	case "CertificateEventsSignedCertificate":
		return CertificateEventsSignedCertificate
	default:
		return UnrecognizedCertificateEvent
	}
}
