// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: platform/cryptography/v2alpha/certificate.proto

package cryptographyv2alphapb

import (
	_ "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/options/v2"
	v21 "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/spec/v2"
	v2 "github.com/openecosystems/ecosystem/libs/protobuf/go/protobuf/gen/platform/type/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The current status of a certificate
type EventCertificateStatus int32

const (
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_UNSPECIFIED EventCertificateStatus = 0 // Unspecified or unknown status.
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_VERIFYING   EventCertificateStatus = 1 // Certificate is being verified.
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_SIGNING     EventCertificateStatus = 2 // Certificate is being signed.
	EventCertificateStatus_EVENT_CERTIFICATE_STATUS_ERROR       EventCertificateStatus = 3 // Error.
)

// Enum value maps for EventCertificateStatus.
var (
	EventCertificateStatus_name = map[int32]string{
		0: "EVENT_CERTIFICATE_STATUS_UNSPECIFIED",
		1: "EVENT_CERTIFICATE_STATUS_VERIFYING",
		2: "EVENT_CERTIFICATE_STATUS_SIGNING",
		3: "EVENT_CERTIFICATE_STATUS_ERROR",
	}
	EventCertificateStatus_value = map[string]int32{
		"EVENT_CERTIFICATE_STATUS_UNSPECIFIED": 0,
		"EVENT_CERTIFICATE_STATUS_VERIFYING":   1,
		"EVENT_CERTIFICATE_STATUS_SIGNING":     2,
		"EVENT_CERTIFICATE_STATUS_ERROR":       3,
	}
)

func (x EventCertificateStatus) Enum() *EventCertificateStatus {
	p := new(EventCertificateStatus)
	*p = x
	return p
}

func (x EventCertificateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCertificateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[0].Descriptor()
}

func (EventCertificateStatus) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[0]
}

func (x EventCertificateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCertificateStatus.Descriptor instead.
func (EventCertificateStatus) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{0}
}

type CertificateCommands int32

const (
	CertificateCommands_CERTIFICATE_COMMANDS_UNSPECIFIED        CertificateCommands = 0 // Unspecified or unknown command
	CertificateCommands_CERTIFICATE_COMMANDS_VERIFY_CERTIFICATE CertificateCommands = 1
	CertificateCommands_CERTIFICATE_COMMANDS_SIGN_CERTIFICATE   CertificateCommands = 2
)

// Enum value maps for CertificateCommands.
var (
	CertificateCommands_name = map[int32]string{
		0: "CERTIFICATE_COMMANDS_UNSPECIFIED",
		1: "CERTIFICATE_COMMANDS_VERIFY_CERTIFICATE",
		2: "CERTIFICATE_COMMANDS_SIGN_CERTIFICATE",
	}
	CertificateCommands_value = map[string]int32{
		"CERTIFICATE_COMMANDS_UNSPECIFIED":        0,
		"CERTIFICATE_COMMANDS_VERIFY_CERTIFICATE": 1,
		"CERTIFICATE_COMMANDS_SIGN_CERTIFICATE":   2,
	}
)

func (x CertificateCommands) Enum() *CertificateCommands {
	p := new(CertificateCommands)
	*p = x
	return p
}

func (x CertificateCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[1].Descriptor()
}

func (CertificateCommands) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[1]
}

func (x CertificateCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateCommands.Descriptor instead.
func (CertificateCommands) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{1}
}

type CertificateEvents int32

const (
	// Unspecified or unknown event.
	CertificateEvents_CERTIFICATE_EVENTS_UNSPECIFIED          CertificateEvents = 0
	CertificateEvents_CERTIFICATE_EVENTS_VERIFIED_CERTIFICATE CertificateEvents = 1
	CertificateEvents_CERTIFICATE_EVENTS_SIGNED_CERTIFICATE   CertificateEvents = 2
)

// Enum value maps for CertificateEvents.
var (
	CertificateEvents_name = map[int32]string{
		0: "CERTIFICATE_EVENTS_UNSPECIFIED",
		1: "CERTIFICATE_EVENTS_VERIFIED_CERTIFICATE",
		2: "CERTIFICATE_EVENTS_SIGNED_CERTIFICATE",
	}
	CertificateEvents_value = map[string]int32{
		"CERTIFICATE_EVENTS_UNSPECIFIED":          0,
		"CERTIFICATE_EVENTS_VERIFIED_CERTIFICATE": 1,
		"CERTIFICATE_EVENTS_SIGNED_CERTIFICATE":   2,
	}
)

func (x CertificateEvents) Enum() *CertificateEvents {
	p := new(CertificateEvents)
	*p = x
	return p
}

func (x CertificateEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_cryptography_v2alpha_certificate_proto_enumTypes[2].Descriptor()
}

func (CertificateEvents) Type() protoreflect.EnumType {
	return &file_platform_cryptography_v2alpha_certificate_proto_enumTypes[2]
}

func (x CertificateEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateEvents.Descriptor instead.
func (CertificateEvents) EnumDescriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{2}
}

type CertificateConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pki           string                 `protobuf:"bytes,1,opt,name=pki,proto3" json:"pki,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateConfiguration) Reset() {
	*x = CertificateConfiguration{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateConfiguration) ProtoMessage() {}

func (x *CertificateConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateConfiguration.ProtoReflect.Descriptor instead.
func (*CertificateConfiguration) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateConfiguration) GetPki() string {
	if x != nil {
		return x.Pki
	}
	return ""
}

// Request for VerifyCertificate
type VerifyCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificate   *v2.File               `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyCertificateRequest) Reset() {
	*x = VerifyCertificateRequest{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCertificateRequest) ProtoMessage() {}

func (x *VerifyCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCertificateRequest.ProtoReflect.Descriptor instead.
func (*VerifyCertificateRequest) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyCertificateRequest) GetCertificate() *v2.File {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Response to VerifyCertificate
type VerifyCertificateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext   *v21.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Certificate   *Certificate             `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyCertificateResponse) Reset() {
	*x = VerifyCertificateResponse{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCertificateResponse) ProtoMessage() {}

func (x *VerifyCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCertificateResponse.ProtoReflect.Descriptor instead.
func (*VerifyCertificateResponse) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyCertificateResponse) GetSpecContext() *v21.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *VerifyCertificateResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Request for SignCertificate
type SignCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificate   *v2.File               `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignCertificateRequest) Reset() {
	*x = SignCertificateRequest{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignCertificateRequest) ProtoMessage() {}

func (x *SignCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignCertificateRequest.ProtoReflect.Descriptor instead.
func (*SignCertificateRequest) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *SignCertificateRequest) GetCertificate() *v2.File {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Response to VerifyCertificate
type SignCertificateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response context
	SpecContext   *v21.SpecResponseContext `protobuf:"bytes,1,opt,name=spec_context,json=specContext,proto3" json:"spec_context,omitempty"`
	Certificate   *Certificate             `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignCertificateResponse) Reset() {
	*x = SignCertificateResponse{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignCertificateResponse) ProtoMessage() {}

func (x *SignCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignCertificateResponse.ProtoReflect.Descriptor instead.
func (*SignCertificateResponse) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{4}
}

func (x *SignCertificateResponse) GetSpecContext() *v21.SpecResponseContext {
	if x != nil {
		return x.SpecContext
	}
	return nil
}

func (x *SignCertificateResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier for this Certificate Authority
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp indicating when this event subscription was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when this event subscription was last updated.
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Duration      *durationpb.Duration   `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Certificate   *v2.File               `protobuf:"bytes,7,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_platform_cryptography_v2alpha_certificate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP(), []int{5}
}

func (x *Certificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Certificate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Certificate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Certificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certificate) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Certificate) GetCertificate() *v2.File {
	if x != nil {
		return x.Certificate
	}
	return nil
}

var File_platform_cryptography_v2alpha_certificate_proto protoreflect.FileDescriptor

var file_platform_cryptography_v2alpha_certificate_proto_rawDesc = string([]byte{
	0x0a, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2c, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6b, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6b, 0x69, 0x22, 0x5c,
	0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xbb, 0x01, 0x0a,
	0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x22, 0x5a, 0x0a, 0x16, 0x53, 0x69,
	0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x06,
	0xfa, 0xb6, 0x18, 0x02, 0x08, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02,
	0x08, 0x02, 0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xca, 0xb7, 0x18, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x06, 0xfa, 0xb6, 0x18, 0x02, 0x08, 0x02, 0x2a, 0xb4, 0x01,
	0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x2a, 0x9b, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x29, 0x0a, 0x25, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02,
	0x08, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x1a, 0x06, 0x92, 0xb8, 0x18, 0x02, 0x08, 0x04, 0x32, 0xaa, 0x03, 0x0a,
	0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0xa2, 0xb6,
	0x18, 0x08, 0x2a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0xc3, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xa2, 0xb6, 0x18, 0x06, 0x2a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0xaa, 0xb6, 0x18, 0x02, 0x08, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01,
	0x2a, 0x22, 0x26, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x42, 0xbb, 0x01, 0x82, 0xc4, 0x13, 0x02,
	0x08, 0x02, 0x82, 0xb5, 0x18, 0x06, 0x08, 0x03, 0x10, 0x01, 0x18, 0x06, 0x8a, 0xb5, 0x18, 0x24,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x03, 0x6a, 0x61, 0x6e,
	0x28, 0x02, 0x38, 0x01, 0x92, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x03, 0x9a, 0xb5, 0x18, 0x02, 0x08,
	0x01, 0xa2, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x64, 0x6b, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_platform_cryptography_v2alpha_certificate_proto_rawDescOnce sync.Once
	file_platform_cryptography_v2alpha_certificate_proto_rawDescData []byte
)

func file_platform_cryptography_v2alpha_certificate_proto_rawDescGZIP() []byte {
	file_platform_cryptography_v2alpha_certificate_proto_rawDescOnce.Do(func() {
		file_platform_cryptography_v2alpha_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_platform_cryptography_v2alpha_certificate_proto_rawDesc), len(file_platform_cryptography_v2alpha_certificate_proto_rawDesc)))
	})
	return file_platform_cryptography_v2alpha_certificate_proto_rawDescData
}

var file_platform_cryptography_v2alpha_certificate_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_platform_cryptography_v2alpha_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_platform_cryptography_v2alpha_certificate_proto_goTypes = []any{
	(EventCertificateStatus)(0),       // 0: platform.cryptography.v2alpha.EventCertificateStatus
	(CertificateCommands)(0),          // 1: platform.cryptography.v2alpha.CertificateCommands
	(CertificateEvents)(0),            // 2: platform.cryptography.v2alpha.CertificateEvents
	(*CertificateConfiguration)(nil),  // 3: platform.cryptography.v2alpha.CertificateConfiguration
	(*VerifyCertificateRequest)(nil),  // 4: platform.cryptography.v2alpha.VerifyCertificateRequest
	(*VerifyCertificateResponse)(nil), // 5: platform.cryptography.v2alpha.VerifyCertificateResponse
	(*SignCertificateRequest)(nil),    // 6: platform.cryptography.v2alpha.SignCertificateRequest
	(*SignCertificateResponse)(nil),   // 7: platform.cryptography.v2alpha.SignCertificateResponse
	(*Certificate)(nil),               // 8: platform.cryptography.v2alpha.Certificate
	(*v2.File)(nil),                   // 9: platform.type.v2.File
	(*v21.SpecResponseContext)(nil),   // 10: platform.spec.v2.SpecResponseContext
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 12: google.protobuf.Duration
}
var file_platform_cryptography_v2alpha_certificate_proto_depIdxs = []int32{
	9,  // 0: platform.cryptography.v2alpha.VerifyCertificateRequest.certificate:type_name -> platform.type.v2.File
	10, // 1: platform.cryptography.v2alpha.VerifyCertificateResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	8,  // 2: platform.cryptography.v2alpha.VerifyCertificateResponse.certificate:type_name -> platform.cryptography.v2alpha.Certificate
	9,  // 3: platform.cryptography.v2alpha.SignCertificateRequest.certificate:type_name -> platform.type.v2.File
	10, // 4: platform.cryptography.v2alpha.SignCertificateResponse.spec_context:type_name -> platform.spec.v2.SpecResponseContext
	8,  // 5: platform.cryptography.v2alpha.SignCertificateResponse.certificate:type_name -> platform.cryptography.v2alpha.Certificate
	11, // 6: platform.cryptography.v2alpha.Certificate.created_at:type_name -> google.protobuf.Timestamp
	11, // 7: platform.cryptography.v2alpha.Certificate.updated_at:type_name -> google.protobuf.Timestamp
	12, // 8: platform.cryptography.v2alpha.Certificate.duration:type_name -> google.protobuf.Duration
	9,  // 9: platform.cryptography.v2alpha.Certificate.certificate:type_name -> platform.type.v2.File
	4,  // 10: platform.cryptography.v2alpha.CertificateService.VerifyCertificate:input_type -> platform.cryptography.v2alpha.VerifyCertificateRequest
	6,  // 11: platform.cryptography.v2alpha.CertificateService.SignCertificate:input_type -> platform.cryptography.v2alpha.SignCertificateRequest
	5,  // 12: platform.cryptography.v2alpha.CertificateService.VerifyCertificate:output_type -> platform.cryptography.v2alpha.VerifyCertificateResponse
	7,  // 13: platform.cryptography.v2alpha.CertificateService.SignCertificate:output_type -> platform.cryptography.v2alpha.SignCertificateResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_platform_cryptography_v2alpha_certificate_proto_init() }
func file_platform_cryptography_v2alpha_certificate_proto_init() {
	if File_platform_cryptography_v2alpha_certificate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_platform_cryptography_v2alpha_certificate_proto_rawDesc), len(file_platform_cryptography_v2alpha_certificate_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_cryptography_v2alpha_certificate_proto_goTypes,
		DependencyIndexes: file_platform_cryptography_v2alpha_certificate_proto_depIdxs,
		EnumInfos:         file_platform_cryptography_v2alpha_certificate_proto_enumTypes,
		MessageInfos:      file_platform_cryptography_v2alpha_certificate_proto_msgTypes,
	}.Build()
	File_platform_cryptography_v2alpha_certificate_proto = out.File
	file_platform_cryptography_v2alpha_certificate_proto_goTypes = nil
	file_platform_cryptography_v2alpha_certificate_proto_depIdxs = nil
}
