// Code generated by protoc-gen-platform go/multiplexer. DO NOT EDIT.
// source: platform/cryptography/v2alpha/certificate_authority.proto

package cryptographyv2alphapbsrv

import (
	"connectrpc.com/connect"
	"errors"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/protobuf/proto"
	"libs/partner/go/nats/v2"
	"libs/partner/go/opentelemetry/v2"
	"libs/partner/go/protovalidate/v0"
	"libs/partner/go/zap/v1"
	"libs/public/go/model/gen/platform/cryptography/v2alpha"
	"libs/public/go/protobuf/gen/platform/cryptography/v2alpha"
	"libs/public/go/sdk/v2alpha"

	"libs/protobuf/go/protobuf/gen/platform/spec/v2"

	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "libs/protobuf/go/protobuf/gen/platform/spec/v2"
	_ "libs/protobuf/go/protobuf/gen/platform/type/v2"

	"context"
)

// CertificateAuthorityServiceHandler is the domain level implementation of the server API for mutations of the CertificateAuthorityService service
type CertificateAuthorityServiceHandler struct{}

func (s *CertificateAuthorityServiceHandler) CreateCertificateAuthority(ctx context.Context, req *connect.Request[cryptographyv2alphapb.CreateCertificateAuthorityRequest]) (*connect.Response[cryptographyv2alphapb.CreateCertificateAuthorityResponse], error) {

	tracer := *opentelemetryv2.Bound.Tracer
	log := *zaploggerv1.Bound.Logger

	// Executes top level validation, no business domain validation
	validationCtx, validationSpan := tracer.Start(ctx, "request-validation", trace.WithSpanKind(trace.SpanKindInternal))
	v := *protovalidatev0.Bound.Validator
	if err := v.Validate(req.Msg); err != nil {
		return nil, sdkv2alphalib.ErrServerPreconditionFailed.WithInternalErrorDetail(err)
	}
	validationSpan.End()

	// Spec Propagation
	specCtx, specSpan := tracer.Start(validationCtx, "spec-propagation", trace.WithSpanKind(trace.SpanKindInternal))
	spec, ok := ctx.Value(sdkv2alphalib.SpecContextKey).(*specv2pb.Spec)
	if !ok {
		return nil, sdkv2alphalib.ErrServerInternal.WithInternalErrorDetail(errors.New("Cannot propagate spec to context"))
	}
	specSpan.End()

	// Validate field mask
	if spec.SpecData.FieldMask != nil && len(spec.SpecData.FieldMask.Paths) > 0 {
		spec.SpecData.FieldMask.Normalize()
		if !spec.SpecData.FieldMask.IsValid(&cryptographyv2alphapb.CreateCertificateAuthorityResponse{}) {
			log.Error("Invalid field mask")
			return nil, sdkv2alphalib.ErrServerPreconditionFailed.WithInternalErrorDetail(errors.New("Invalid field mask"))
		}
	}

	// Distributed Domain Handler
	handlerCtx, handlerSpan := tracer.Start(specCtx, "event-generation", trace.WithSpanKind(trace.SpanKindInternal))

	entity := cryptographyv2alphapbmodel.CertificateAuthoritySpecEntity{}
	reply, err2 := natsnodev2.Bound.MultiplexCommandSync(handlerCtx, spec, &natsnodev2.SpecCommand{
		Request:        req.Msg,
		Stream:         natsnodev2.NewInboundStream(),
		CommandName:    "",
		CommandTopic:   cryptographyv2alphapbmodel.CommandDataCertificateAuthorityTopic,
		EntityTypeName: entity.TypeName(),
	})
	if err2 != nil {
		log.Error(err2.Error())
		return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
	}

	var dd cryptographyv2alphapb.CreateCertificateAuthorityResponse
	err3 := proto.Unmarshal(reply.Data, &dd)
	if err3 != nil {
		log.Error(err3.Error())
		return nil, connect.NewError(connect.CodeInternal, errors.New("internal error"))
	}

	handlerSpan.End()

	return connect.NewResponse(&dd), nil

}
