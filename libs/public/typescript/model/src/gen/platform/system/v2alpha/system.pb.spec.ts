// Code generated by protoc-gen-platform typescript/spec. DO NOT EDIT.
// source: platform/system/v2alpha/system.proto

export type SystemCommand = number;
export type SystemEvent = number;

// Constants for System Type Names
export const SystemTypeName = "system";
export const SystemTypeNamePlural = "systems";
export const SystemTypeNameScreamingCamelCase = "SYSTEM";
export const SystemTypeNamePluralScreamingCamelCase = "SYSTEMS";
export const SystemTypeNameEventPrefix = "system.";

// Enums for SystemCommands
export enum SystemCommands {
  
  SystemCommandsUnspecified = 0,
  SystemCommandsEnable = 1,
  SystemCommandsDisable = 2,
  UnrecognizedSystemCommand = -1,
}

// Enums for System Events
export enum SystemEvents {

  SystemEventsUnspecified = 0,
  SystemEventsEnabled = 1,
  SystemEventsDisabled = 2,
  UnrecognizedSystemEvent  = -1,
}

// Topics
export const CommandDataSystemTopic = "system.data.command";
export const EventDataSystemTopic = "system.data.event";
export const RoutineDataSystemTopic = "system.data.routine";
export const UnrecognizedSystemTopic = "unrecognized";

// Command Methods
export class SystemCommandHelper {
  static commandName(command: SystemCommands): string {
    switch (command) {
      case SystemCommands.SystemCommandsUnspecified:
        return "SystemCommandsUnspecified"
      case SystemCommands.SystemCommandsEnable:
        return "SystemCommandsEnable"
      case SystemCommands.SystemCommandsDisable:
        return "SystemCommandsDisable"
      default:
        return "UnrecognizedSystemCommand"
    }
  }

  static commandTopic(command: SystemCommands): string {
    switch (command) {
      case SystemCommands.SystemCommandsUnspecified:
      case SystemCommands.SystemCommandsEnable:
      case SystemCommands.SystemCommandsDisable:
        return CommandDataSystemTopic;
      default:
		    return UnrecognizedSystemTopic;
    }
  }

  static commandTopicWildcard(): string {
    return SystemTypeNameEventPrefix + ">";
  }

  static getSystemCommand(command: string): SystemCommands {
    switch (command) {
      case "SystemCommandsUnspecified":
        return SystemCommands.SystemCommandsUnspecified;
      case "SystemCommandsEnable":
        return SystemCommands.SystemCommandsEnable;
      case "SystemCommandsDisable":
        return SystemCommands.SystemCommandsDisable;
      default:
        return SystemCommands.UnrecognizedSystemCommand;
    }
  }
}

// Event Methods
export class SystemEventHelper {
  static eventName(event: SystemEvents): string {
    switch (event) {
      case SystemEvents.SystemEventsUnspecified:
        return "SystemEventsUnspecified";
      case SystemEvents.SystemEventsEnabled:
        return "SystemEventsEnabled";
      case SystemEvents.SystemEventsDisabled:
        return "SystemEventsDisabled";
      default:
        return "UnrecognizedSystemEvent";
    }
  }

  static eventTopic(event: SystemEvents): string {
    switch (event) {
      case SystemEvents.SystemEventsUnspecified:
      case SystemEvents.SystemEventsEnabled:
      case SystemEvents.SystemEventsDisabled:
        return EventDataSystemTopic;
      default:
        return UnrecognizedSystemTopic;
    }
  }

  static eventTopicWildcard(): string {
    return SystemTypeNameEventPrefix + ">";
  }

  static getSystemEvent(event: string): SystemEvents {
    switch (event) {
      case "SystemEventsUnspecified":
        return SystemEvents.SystemEventsUnspecified;
      case "SystemEventsEnabled":
        return SystemEvents.SystemEventsEnabled;
      case "SystemEventsDisabled":
        return SystemEvents.SystemEventsDisabled;
      default:
        return SystemEvents.UnrecognizedSystemEvent;
    }
  }
}

