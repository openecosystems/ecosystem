// Code generated by protoc-gen-platform typescript/spec. DO NOT EDIT.
// source: platform/iam/v2alpha/account_authority.proto

export type AccountAuthorityCommand = number;
export type AccountAuthorityEvent = number;

// Constants for AccountAuthority Type Names
export const AccountAuthorityTypeName = "accountAuthority";
export const AccountAuthorityTypeNamePlural = "accountAuthorities";
export const AccountAuthorityTypeNameScreamingCamelCase = "ACCOUNT_AUTHORITY";
export const AccountAuthorityTypeNamePluralScreamingCamelCase = "ACCOUNT_AUTHORITIES";
export const AccountAuthorityTypeNameEventPrefix = "accountAuthority.";

// Enums for AccountAuthorityCommands
export enum AccountAuthorityCommands {
  
  AccountAuthorityCommandsUnspecified = 0,
  AccountAuthorityCommandsCreateAccountAuthority = 1,
  UnrecognizedAccountAuthorityCommand = -1,
}

// Enums for AccountAuthority Events
export enum AccountAuthorityEvents {

  AccountAuthorityEventsUnspecified = 0,
  AccountAuthorityEventsCreatedAccountAuthority = 1,
  UnrecognizedAccountAuthorityEvent  = -1,
}

// Topics
export const CommandDataAccountAuthorityTopic = "accountAuthority.data.command";
export const EventDataAccountAuthorityTopic = "accountAuthority.data.event";
export const RoutineDataAccountAuthorityTopic = "accountAuthority.data.routine";
export const UnrecognizedAccountAuthorityTopic = "unrecognized";

// Command Methods
export class AccountAuthorityCommandHelper {
  static commandName(command: AccountAuthorityCommands): string {
    switch (command) {
      case AccountAuthorityCommands.AccountAuthorityCommandsUnspecified:
        return "AccountAuthorityCommandsUnspecified"
      case AccountAuthorityCommands.AccountAuthorityCommandsCreateAccountAuthority:
        return "AccountAuthorityCommandsCreateAccountAuthority"
      default:
        return "UnrecognizedAccountAuthorityCommand"
    }
  }

  static commandTopic(command: AccountAuthorityCommands): string {
    switch (command) {
      case AccountAuthorityCommands.AccountAuthorityCommandsUnspecified:
      case AccountAuthorityCommands.AccountAuthorityCommandsCreateAccountAuthority:
        return CommandDataAccountAuthorityTopic;
      default:
		    return UnrecognizedAccountAuthorityTopic;
    }
  }

  static commandTopicWildcard(): string {
    return AccountAuthorityTypeNameEventPrefix + ">";
  }

  static getAccountAuthorityCommand(command: string): AccountAuthorityCommands {
    switch (command) {
      case "AccountAuthorityCommandsUnspecified":
        return AccountAuthorityCommands.AccountAuthorityCommandsUnspecified;
      case "AccountAuthorityCommandsCreateAccountAuthority":
        return AccountAuthorityCommands.AccountAuthorityCommandsCreateAccountAuthority;
      default:
        return AccountAuthorityCommands.UnrecognizedAccountAuthorityCommand;
    }
  }
}

// Event Methods
export class AccountAuthorityEventHelper {
  static eventName(event: AccountAuthorityEvents): string {
    switch (event) {
      case AccountAuthorityEvents.AccountAuthorityEventsUnspecified:
        return "AccountAuthorityEventsUnspecified";
      case AccountAuthorityEvents.AccountAuthorityEventsCreatedAccountAuthority:
        return "AccountAuthorityEventsCreatedAccountAuthority";
      default:
        return "UnrecognizedAccountAuthorityEvent";
    }
  }

  static eventTopic(event: AccountAuthorityEvents): string {
    switch (event) {
      case AccountAuthorityEvents.AccountAuthorityEventsUnspecified:
      case AccountAuthorityEvents.AccountAuthorityEventsCreatedAccountAuthority:
        return EventDataAccountAuthorityTopic;
      default:
        return UnrecognizedAccountAuthorityTopic;
    }
  }

  static eventTopicWildcard(): string {
    return AccountAuthorityTypeNameEventPrefix + ">";
  }

  static getAccountAuthorityEvent(event: string): AccountAuthorityEvents {
    switch (event) {
      case "AccountAuthorityEventsUnspecified":
        return AccountAuthorityEvents.AccountAuthorityEventsUnspecified;
      case "AccountAuthorityEventsCreatedAccountAuthority":
        return AccountAuthorityEvents.AccountAuthorityEventsCreatedAccountAuthority;
      default:
        return AccountAuthorityEvents.UnrecognizedAccountAuthorityEvent;
    }
  }
}

