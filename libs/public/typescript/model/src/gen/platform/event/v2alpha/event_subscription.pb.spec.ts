// Code generated by protoc-gen-platform typescript/spec. DO NOT EDIT.
// source: platform/event/v2alpha/event_subscription.proto

export type EventSubscriptionCommand = number;
export type EventSubscriptionEvent = number;

// Constants for EventSubscription Type Names
export const EventSubscriptionTypeName = "eventSubscription";
export const EventSubscriptionTypeNamePlural = "eventSubscriptions";
export const EventSubscriptionTypeNameScreamingCamelCase = "EVENT_SUBSCRIPTION";
export const EventSubscriptionTypeNamePluralScreamingCamelCase = "EVENT_SUBSCRIPTIONS";
export const EventSubscriptionTypeNameEventPrefix = "eventSubscription.";

// Enums for EventSubscriptionCommands
export enum EventSubscriptionCommands {
  
  EventSubscriptionCommandsUnspecified = 0,
  EventSubscriptionCommandsSubscribe = 1,
  EventSubscriptionCommandsUnSubscribe = 2,
  UnrecognizedEventSubscriptionCommand = -1,
}

// Enums for EventSubscription Events
export enum EventSubscriptionEvents {

  EventSubscriptionEventsUnspecified = 0,
  EventSubscriptionEventsSubscribed = 1,
  EventSubscriptionEventsUnSubscribed = 2,
  UnrecognizedEventSubscriptionEvent  = -1,
}

// Topics
export const CommandDataEventSubscriptionTopic = "eventSubscription.data.command";
export const EventDataEventSubscriptionTopic = "eventSubscription.data.event";
export const RoutineDataEventSubscriptionTopic = "eventSubscription.data.routine";
export const UnrecognizedEventSubscriptionTopic = "unrecognized";

// Command Methods
export class EventSubscriptionCommandHelper {
  static commandName(command: EventSubscriptionCommands): string {
    switch (command) {
      case EventSubscriptionCommands.EventSubscriptionCommandsUnspecified:
        return "EventSubscriptionCommandsUnspecified"
      case EventSubscriptionCommands.EventSubscriptionCommandsSubscribe:
        return "EventSubscriptionCommandsSubscribe"
      case EventSubscriptionCommands.EventSubscriptionCommandsUnSubscribe:
        return "EventSubscriptionCommandsUnSubscribe"
      default:
        return "UnrecognizedEventSubscriptionCommand"
    }
  }

  static commandTopic(command: EventSubscriptionCommands): string {
    switch (command) {
      case EventSubscriptionCommands.EventSubscriptionCommandsUnspecified:
      case EventSubscriptionCommands.EventSubscriptionCommandsSubscribe:
      case EventSubscriptionCommands.EventSubscriptionCommandsUnSubscribe:
        return CommandDataEventSubscriptionTopic;
      default:
		    return UnrecognizedEventSubscriptionTopic;
    }
  }

  static commandTopicWildcard(): string {
    return EventSubscriptionTypeNameEventPrefix + ">";
  }

  static getEventSubscriptionCommand(command: string): EventSubscriptionCommands {
    switch (command) {
      case "EventSubscriptionCommandsUnspecified":
        return EventSubscriptionCommands.EventSubscriptionCommandsUnspecified;
      case "EventSubscriptionCommandsSubscribe":
        return EventSubscriptionCommands.EventSubscriptionCommandsSubscribe;
      case "EventSubscriptionCommandsUnSubscribe":
        return EventSubscriptionCommands.EventSubscriptionCommandsUnSubscribe;
      default:
        return EventSubscriptionCommands.UnrecognizedEventSubscriptionCommand;
    }
  }
}

// Event Methods
export class EventSubscriptionEventHelper {
  static eventName(event: EventSubscriptionEvents): string {
    switch (event) {
      case EventSubscriptionEvents.EventSubscriptionEventsUnspecified:
        return "EventSubscriptionEventsUnspecified";
      case EventSubscriptionEvents.EventSubscriptionEventsSubscribed:
        return "EventSubscriptionEventsSubscribed";
      case EventSubscriptionEvents.EventSubscriptionEventsUnSubscribed:
        return "EventSubscriptionEventsUnSubscribed";
      default:
        return "UnrecognizedEventSubscriptionEvent";
    }
  }

  static eventTopic(event: EventSubscriptionEvents): string {
    switch (event) {
      case EventSubscriptionEvents.EventSubscriptionEventsUnspecified:
      case EventSubscriptionEvents.EventSubscriptionEventsSubscribed:
      case EventSubscriptionEvents.EventSubscriptionEventsUnSubscribed:
        return EventDataEventSubscriptionTopic;
      default:
        return UnrecognizedEventSubscriptionTopic;
    }
  }

  static eventTopicWildcard(): string {
    return EventSubscriptionTypeNameEventPrefix + ">";
  }

  static getEventSubscriptionEvent(event: string): EventSubscriptionEvents {
    switch (event) {
      case "EventSubscriptionEventsUnspecified":
        return EventSubscriptionEvents.EventSubscriptionEventsUnspecified;
      case "EventSubscriptionEventsSubscribed":
        return EventSubscriptionEvents.EventSubscriptionEventsSubscribed;
      case "EventSubscriptionEventsUnSubscribed":
        return EventSubscriptionEvents.EventSubscriptionEventsUnSubscribed;
      default:
        return EventSubscriptionEvents.UnrecognizedEventSubscriptionEvent;
    }
  }
}

