// Code generated by protoc-gen-platform typescript/spec. DO NOT EDIT.
// source: platform/cryptography/v2alpha/certificate.proto

export type CertificateCommand = number;
export type CertificateEvent = number;

// Constants for Certificate Type Names
export const CertificateTypeName = "certificate";
export const CertificateTypeNamePlural = "certificates";
export const CertificateTypeNameScreamingCamelCase = "CERTIFICATE";
export const CertificateTypeNamePluralScreamingCamelCase = "CERTIFICATES";
export const CertificateTypeNameEventPrefix = "certificate.";

// Enums for CertificateCommands
export enum CertificateCommands {
  
  CertificateCommandsUnspecified = 0,
  CertificateCommandsVerifyCertificate = 1,
  CertificateCommandsSignCertificate = 2,
  UnrecognizedCertificateCommand = -1,
}

// Enums for Certificate Events
export enum CertificateEvents {

  CertificateEventsUnspecified = 0,
  CertificateEventsVerifiedCertificate = 1,
  CertificateEventsSignedCertificate = 2,
  UnrecognizedCertificateEvent  = -1,
}

// Topics
export const CommandDataCertificateTopic = "certificate.data.command";
export const EventDataCertificateTopic = "certificate.data.event";
export const RoutineDataCertificateTopic = "certificate.data.routine";
export const UnrecognizedCertificateTopic = "unrecognized";

// Command Methods
export class CertificateCommandHelper {
  static commandName(command: CertificateCommands): string {
    switch (command) {
      case CertificateCommands.CertificateCommandsUnspecified:
        return "CertificateCommandsUnspecified"
      case CertificateCommands.CertificateCommandsVerifyCertificate:
        return "CertificateCommandsVerifyCertificate"
      case CertificateCommands.CertificateCommandsSignCertificate:
        return "CertificateCommandsSignCertificate"
      default:
        return "UnrecognizedCertificateCommand"
    }
  }

  static commandTopic(command: CertificateCommands): string {
    switch (command) {
      case CertificateCommands.CertificateCommandsUnspecified:
      case CertificateCommands.CertificateCommandsVerifyCertificate:
      case CertificateCommands.CertificateCommandsSignCertificate:
        return CommandDataCertificateTopic;
      default:
		    return UnrecognizedCertificateTopic;
    }
  }

  static commandTopicWildcard(): string {
    return CertificateTypeNameEventPrefix + ">";
  }

  static getCertificateCommand(command: string): CertificateCommands {
    switch (command) {
      case "CertificateCommandsUnspecified":
        return CertificateCommands.CertificateCommandsUnspecified;
      case "CertificateCommandsVerifyCertificate":
        return CertificateCommands.CertificateCommandsVerifyCertificate;
      case "CertificateCommandsSignCertificate":
        return CertificateCommands.CertificateCommandsSignCertificate;
      default:
        return CertificateCommands.UnrecognizedCertificateCommand;
    }
  }
}

// Event Methods
export class CertificateEventHelper {
  static eventName(event: CertificateEvents): string {
    switch (event) {
      case CertificateEvents.CertificateEventsUnspecified:
        return "CertificateEventsUnspecified";
      case CertificateEvents.CertificateEventsVerifiedCertificate:
        return "CertificateEventsVerifiedCertificate";
      case CertificateEvents.CertificateEventsSignedCertificate:
        return "CertificateEventsSignedCertificate";
      default:
        return "UnrecognizedCertificateEvent";
    }
  }

  static eventTopic(event: CertificateEvents): string {
    switch (event) {
      case CertificateEvents.CertificateEventsUnspecified:
      case CertificateEvents.CertificateEventsVerifiedCertificate:
      case CertificateEvents.CertificateEventsSignedCertificate:
        return EventDataCertificateTopic;
      default:
        return UnrecognizedCertificateTopic;
    }
  }

  static eventTopicWildcard(): string {
    return CertificateTypeNameEventPrefix + ">";
  }

  static getCertificateEvent(event: string): CertificateEvents {
    switch (event) {
      case "CertificateEventsUnspecified":
        return CertificateEvents.CertificateEventsUnspecified;
      case "CertificateEventsVerifiedCertificate":
        return CertificateEvents.CertificateEventsVerifiedCertificate;
      case "CertificateEventsSignedCertificate":
        return CertificateEvents.CertificateEventsSignedCertificate;
      default:
        return CertificateEvents.UnrecognizedCertificateEvent;
    }
  }
}

