// @generated by protoc-gen-es v2.2.3
// @generated from file platform/ecosystem/v2alpha/ecosystem.proto (package platform.ecosystem.v2alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { SpecResponseContext } from "../../spec/v2/spec_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file platform/ecosystem/v2alpha/ecosystem.proto.
 */
export declare const file_platform_ecosystem_v2alpha_ecosystem: GenFile;

/**
 * @generated from message platform.ecosystem.v2alpha.EcosystemConfiguration
 */
export declare type EcosystemConfiguration = Message<"platform.ecosystem.v2alpha.EcosystemConfiguration"> & {
  /**
   * @generated from field: bool closed = 1;
   */
  closed: boolean;
};

/**
 * Describes the message platform.ecosystem.v2alpha.EcosystemConfiguration.
 * Use `create(EcosystemConfigurationSchema)` to create a new message.
 */
export declare const EcosystemConfigurationSchema: GenMessage<EcosystemConfiguration>;

/**
 * Supported fields to create a ecosystem
 *
 * @generated from message platform.ecosystem.v2alpha.CreateEcosystemRequest
 */
export declare type CreateEcosystemRequest = Message<"platform.ecosystem.v2alpha.CreateEcosystemRequest"> & {
  /**
   * Globally unique slug for this ecosystem
   *
   * @generated from field: string slug = 1;
   */
  slug: string;

  /**
   * What type of ecosystem is this?
   *
   * @generated from field: platform.ecosystem.v2alpha.EcosystemType type = 3;
   */
  type: EcosystemType;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Give your ecosystem a short description
   *
   * @generated from field: string short_description = 5;
   */
  shortDescription: string;

  /**
   * Describe your ecosystem in detail
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * @generated from field: string cidr = 7;
   */
  cidr: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.CreateEcosystemRequest.
 * Use `create(CreateEcosystemRequestSchema)` to create a new message.
 */
export declare const CreateEcosystemRequestSchema: GenMessage<CreateEcosystemRequest>;

/**
 * @generated from message platform.ecosystem.v2alpha.CreateEcosystemResponse
 */
export declare type CreateEcosystemResponse = Message<"platform.ecosystem.v2alpha.CreateEcosystemResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * @generated from field: platform.ecosystem.v2alpha.Ecosystem ecosystem = 2;
   */
  ecosystem?: Ecosystem;
};

/**
 * Describes the message platform.ecosystem.v2alpha.CreateEcosystemResponse.
 * Use `create(CreateEcosystemResponseSchema)` to create a new message.
 */
export declare const CreateEcosystemResponseSchema: GenMessage<CreateEcosystemResponse>;

/**
 * @generated from message platform.ecosystem.v2alpha.GetEcosystemRequest
 */
export declare type GetEcosystemRequest = Message<"platform.ecosystem.v2alpha.GetEcosystemRequest"> & {
  /**
   * Globally unique slug for this ecosystem
   *
   * @generated from field: string slug = 1;
   */
  slug: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.GetEcosystemRequest.
 * Use `create(GetEcosystemRequestSchema)` to create a new message.
 */
export declare const GetEcosystemRequestSchema: GenMessage<GetEcosystemRequest>;

/**
 * @generated from message platform.ecosystem.v2alpha.GetEcosystemResponse
 */
export declare type GetEcosystemResponse = Message<"platform.ecosystem.v2alpha.GetEcosystemResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * @generated from field: platform.ecosystem.v2alpha.Ecosystem ecosystem = 2;
   */
  ecosystem?: Ecosystem;
};

/**
 * Describes the message platform.ecosystem.v2alpha.GetEcosystemResponse.
 * Use `create(GetEcosystemResponseSchema)` to create a new message.
 */
export declare const GetEcosystemResponseSchema: GenMessage<GetEcosystemResponse>;

/**
 * @generated from message platform.ecosystem.v2alpha.ListEcosystemsRequest
 */
export declare type ListEcosystemsRequest = Message<"platform.ecosystem.v2alpha.ListEcosystemsRequest"> & {
  /**
   * How many records would you like returned within one page?
   *
   * @generated from field: uint32 page_size = 1;
   */
  pageSize: number;

  /**
   * Page token provided in the response
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.ListEcosystemsRequest.
 * Use `create(ListEcosystemsRequestSchema)` to create a new message.
 */
export declare const ListEcosystemsRequestSchema: GenMessage<ListEcosystemsRequest>;

/**
 * @generated from message platform.ecosystem.v2alpha.ListEcosystemsResponse
 */
export declare type ListEcosystemsResponse = Message<"platform.ecosystem.v2alpha.ListEcosystemsResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * Total count of ecosystems
   *
   * @generated from field: int32 total_size = 2;
   */
  totalSize: number;

  /**
   * Token to retrieve the next page
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;

  /**
   * List of ecosystems
   *
   * @generated from field: repeated platform.ecosystem.v2alpha.Ecosystem ecosystems = 4;
   */
  ecosystems: Ecosystem[];
};

/**
 * Describes the message platform.ecosystem.v2alpha.ListEcosystemsResponse.
 * Use `create(ListEcosystemsResponseSchema)` to create a new message.
 */
export declare const ListEcosystemsResponseSchema: GenMessage<ListEcosystemsResponse>;

/**
 * @generated from message platform.ecosystem.v2alpha.EcosystemsFilter
 */
export declare type EcosystemsFilter = Message<"platform.ecosystem.v2alpha.EcosystemsFilter"> & {
  /**
   * @generated from field: string filter = 1;
   */
  filter: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.EcosystemsFilter.
 * Use `create(EcosystemsFilterSchema)` to create a new message.
 */
export declare const EcosystemsFilterSchema: GenMessage<EcosystemsFilter>;

/**
 * @generated from message platform.ecosystem.v2alpha.UpdateEcosystemRequest
 */
export declare type UpdateEcosystemRequest = Message<"platform.ecosystem.v2alpha.UpdateEcosystemRequest"> & {
  /**
   * Globally unique slug for this ecosystem
   *
   * @generated from field: string slug = 1;
   */
  slug: string;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Give your ecosystem a short description
   *
   * @generated from field: string short_description = 5;
   */
  shortDescription: string;

  /**
   * Describe your ecosystem in detail
   *
   * @generated from field: string description = 6;
   */
  description: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.UpdateEcosystemRequest.
 * Use `create(UpdateEcosystemRequestSchema)` to create a new message.
 */
export declare const UpdateEcosystemRequestSchema: GenMessage<UpdateEcosystemRequest>;

/**
 * @generated from message platform.ecosystem.v2alpha.UpdateEcosystemResponse
 */
export declare type UpdateEcosystemResponse = Message<"platform.ecosystem.v2alpha.UpdateEcosystemResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * @generated from field: platform.ecosystem.v2alpha.Ecosystem ecosystem = 2;
   */
  ecosystem?: Ecosystem;
};

/**
 * Describes the message platform.ecosystem.v2alpha.UpdateEcosystemResponse.
 * Use `create(UpdateEcosystemResponseSchema)` to create a new message.
 */
export declare const UpdateEcosystemResponseSchema: GenMessage<UpdateEcosystemResponse>;

/**
 * @generated from message platform.ecosystem.v2alpha.DeleteEcosystemRequest
 */
export declare type DeleteEcosystemRequest = Message<"platform.ecosystem.v2alpha.DeleteEcosystemRequest"> & {
  /**
   * Globally unique slug for this ecosystem
   *
   * @generated from field: string slug = 1;
   */
  slug: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.DeleteEcosystemRequest.
 * Use `create(DeleteEcosystemRequestSchema)` to create a new message.
 */
export declare const DeleteEcosystemRequestSchema: GenMessage<DeleteEcosystemRequest>;

/**
 * @generated from message platform.ecosystem.v2alpha.DeleteEcosystemResponse
 */
export declare type DeleteEcosystemResponse = Message<"platform.ecosystem.v2alpha.DeleteEcosystemResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * @generated from field: platform.ecosystem.v2alpha.Ecosystem ecosystem = 2;
   */
  ecosystem?: Ecosystem;
};

/**
 * Describes the message platform.ecosystem.v2alpha.DeleteEcosystemResponse.
 * Use `create(DeleteEcosystemResponseSchema)` to create a new message.
 */
export declare const DeleteEcosystemResponseSchema: GenMessage<DeleteEcosystemResponse>;

/**
 * @generated from message platform.ecosystem.v2alpha.Ecosystem
 */
export declare type Ecosystem = Message<"platform.ecosystem.v2alpha.Ecosystem"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string slug = 2;
   */
  slug: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string source_id = 5;
   */
  sourceId: string;

  /**
   * @generated from field: platform.ecosystem.v2alpha.EcosystemType type = 6;
   */
  type: EcosystemType;

  /**
   * @generated from field: platform.ecosystem.v2alpha.EcosystemStatus status = 7;
   */
  status: EcosystemStatus;

  /**
   * @generated from field: string status_details = 8;
   */
  statusDetails: string;

  /**
   * @generated from field: string name = 9;
   */
  name: string;

  /**
   * @generated from field: string short_description = 10;
   */
  shortDescription: string;

  /**
   * @generated from field: string description = 11;
   */
  description: string;

  /**
   * @generated from field: string cidr = 12;
   */
  cidr: string;
};

/**
 * Describes the message platform.ecosystem.v2alpha.Ecosystem.
 * Use `create(EcosystemSchema)` to create a new message.
 */
export declare const EcosystemSchema: GenMessage<Ecosystem>;

/**
 * @generated from enum platform.ecosystem.v2alpha.EcosystemPeerType
 */
export enum EcosystemPeerType {
  /**
   * @generated from enum value: ECOSYSTEM_PEER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ECOSYSTEM_PEER_TYPE_SERVICE_ACCOUNT = 1;
   */
  SERVICE_ACCOUNT = 1,

  /**
   * @generated from enum value: ECOSYSTEM_PEER_TYPE_EDGE = 2;
   */
  EDGE = 2,

  /**
   * @generated from enum value: ECOSYSTEM_PEER_TYPE_ECOSYSTEM_MULTIPLEXER = 3;
   */
  ECOSYSTEM_MULTIPLEXER = 3,

  /**
   * @generated from enum value: ECOSYSTEM_PEER_TYPE_CONNECTOR = 4;
   */
  CONNECTOR = 4,

  /**
   * @generated from enum value: ECOSYSTEM_PEER_TYPE_HOST = 5;
   */
  HOST = 5,
}

/**
 * Describes the enum platform.ecosystem.v2alpha.EcosystemPeerType.
 */
export declare const EcosystemPeerTypeSchema: GenEnum<EcosystemPeerType>;

/**
 * Supported ecosystem type
 *
 * @generated from enum platform.ecosystem.v2alpha.EcosystemType
 */
export enum EcosystemType {
  /**
   * @generated from enum value: ECOSYSTEM_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ECOSYSTEM_TYPE_PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * @generated from enum value: ECOSYSTEM_TYPE_PRIVATE = 2;
   */
  PRIVATE = 2,

  /**
   * @generated from enum value: ECOSYSTEM_TYPE_PATIENT = 3;
   */
  PATIENT = 3,
}

/**
 * Describes the enum platform.ecosystem.v2alpha.EcosystemType.
 */
export declare const EcosystemTypeSchema: GenEnum<EcosystemType>;

/**
 * The current status of a ecosystem
 *
 * @generated from enum platform.ecosystem.v2alpha.EcosystemStatus
 */
export enum EcosystemStatus {
  /**
   * @generated from enum value: ECOSYSTEM_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ECOSYSTEM_STATUS_CREATING = 1;
   */
  CREATING = 1,

  /**
   * @generated from enum value: ECOSYSTEM_STATUS_ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * @generated from enum value: ECOSYSTEM_STATUS_INACTIVE = 3;
   */
  INACTIVE = 3,

  /**
   * @generated from enum value: ECOSYSTEM_STATUS_UPDATING = 4;
   */
  UPDATING = 4,

  /**
   * @generated from enum value: ECOSYSTEM_STATUS_DELETING = 5;
   */
  DELETING = 5,

  /**
   * @generated from enum value: ECOSYSTEM_STATUS_ERROR = 6;
   */
  ERROR = 6,
}

/**
 * Describes the enum platform.ecosystem.v2alpha.EcosystemStatus.
 */
export declare const EcosystemStatusSchema: GenEnum<EcosystemStatus>;

/**
 * The current billing status of a ecosystem
 *
 * @generated from enum platform.ecosystem.v2alpha.EcosystemBillingStatus
 */
export enum EcosystemBillingStatus {
  /**
   * @generated from enum value: ECOSYSTEM_BILLING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ECOSYSTEM_BILLING_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: ECOSYSTEM_BILLING_STATUS_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * @generated from enum value: ECOSYSTEM_BILLING_STATUS_WARNING = 3;
   */
  WARNING = 3,

  /**
   * @generated from enum value: ECOSYSTEM_BILLING_STATUS_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum platform.ecosystem.v2alpha.EcosystemBillingStatus.
 */
export declare const EcosystemBillingStatusSchema: GenEnum<EcosystemBillingStatus>;

/**
 * @generated from enum platform.ecosystem.v2alpha.EcosystemCommands
 */
export enum EcosystemCommands {
  /**
   * @generated from enum value: ECOSYSTEM_COMMANDS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ECOSYSTEM_COMMANDS_CREATE = 1;
   */
  CREATE = 1,

  /**
   * @generated from enum value: ECOSYSTEM_COMMANDS_UPDATE = 2;
   */
  UPDATE = 2,

  /**
   * @generated from enum value: ECOSYSTEM_COMMANDS_DELETE = 3;
   */
  DELETE = 3,
}

/**
 * Describes the enum platform.ecosystem.v2alpha.EcosystemCommands.
 */
export declare const EcosystemCommandsSchema: GenEnum<EcosystemCommands>;

/**
 * @generated from enum platform.ecosystem.v2alpha.EcosystemEvents
 */
export enum EcosystemEvents {
  /**
   * @generated from enum value: ECOSYSTEM_EVENTS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ECOSYSTEM_EVENTS_CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: ECOSYSTEM_EVENTS_UPDATED = 2;
   */
  UPDATED = 2,

  /**
   * @generated from enum value: ECOSYSTEM_EVENTS_DELETED = 3;
   */
  DELETED = 3,

  /**
   * @generated from enum value: ECOSYSTEM_EVENTS_ERRORED = 4;
   */
  ERRORED = 4,
}

/**
 * Describes the enum platform.ecosystem.v2alpha.EcosystemEvents.
 */
export declare const EcosystemEventsSchema: GenEnum<EcosystemEvents>;

/**
 * @generated from service platform.ecosystem.v2alpha.EcosystemService
 */
export declare const EcosystemService: GenService<{
  /**
   * @generated from rpc platform.ecosystem.v2alpha.EcosystemService.CreateEcosystem
   */
  createEcosystem: {
    methodKind: "unary";
    input: typeof CreateEcosystemRequestSchema;
    output: typeof CreateEcosystemResponseSchema;
  },
  /**
   * @generated from rpc platform.ecosystem.v2alpha.EcosystemService.ListEcosystems
   */
  listEcosystems: {
    methodKind: "unary";
    input: typeof ListEcosystemsRequestSchema;
    output: typeof ListEcosystemsResponseSchema;
  },
  /**
   * @generated from rpc platform.ecosystem.v2alpha.EcosystemService.GetEcosystem
   */
  getEcosystem: {
    methodKind: "unary";
    input: typeof GetEcosystemRequestSchema;
    output: typeof GetEcosystemResponseSchema;
  },
  /**
   * @generated from rpc platform.ecosystem.v2alpha.EcosystemService.UpdateEcosystem
   */
  updateEcosystem: {
    methodKind: "unary";
    input: typeof UpdateEcosystemRequestSchema;
    output: typeof UpdateEcosystemResponseSchema;
  },
  /**
   * @generated from rpc platform.ecosystem.v2alpha.EcosystemService.DeleteEcosystem
   */
  deleteEcosystem: {
    methodKind: "unary";
    input: typeof DeleteEcosystemRequestSchema;
    output: typeof DeleteEcosystemResponseSchema;
  },
}>;

