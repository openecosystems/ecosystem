// @generated by protoc-gen-es v2.2.3
// @generated from file platform/cryptography/v2alpha/certificate.proto (package platform.cryptography.v2alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import type { SpecResponseContext } from "../../spec/v2/spec_pb";

/**
 * Describes the file platform/cryptography/v2alpha/certificate.proto.
 */
export declare const file_platform_cryptography_v2alpha_certificate: GenFile;

/**
 * @generated from message platform.cryptography.v2alpha.CertificateConfiguration
 */
export declare type CertificateConfiguration = Message<"platform.cryptography.v2alpha.CertificateConfiguration"> & {
  /**
   * @generated from field: string pki = 1;
   */
  pki: string;
};

/**
 * Describes the message platform.cryptography.v2alpha.CertificateConfiguration.
 * Use `create(CertificateConfigurationSchema)` to create a new message.
 */
export declare const CertificateConfigurationSchema: GenMessage<CertificateConfiguration>;

/**
 * Request for CreateCertificate
 *
 * @generated from message platform.cryptography.v2alpha.CreateCertificateRequest
 */
export declare type CreateCertificateRequest = Message<"platform.cryptography.v2alpha.CreateCertificateRequest"> & {
  /**
   * Name of the Certificate Authority. For example, 'Open Ecosystems, Inc.'
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;

  /**
   * Encrypt key with this passphrase and write out key in an encrypted format
   *
   * @generated from field: string encrypt_key_passphrase = 4;
   */
  encryptKeyPassphrase: string;
};

/**
 * Describes the message platform.cryptography.v2alpha.CreateCertificateRequest.
 * Use `create(CreateCertificateRequestSchema)` to create a new message.
 */
export declare const CreateCertificateRequestSchema: GenMessage<CreateCertificateRequest>;

/**
 * Response to CreateCertificate
 *
 * @generated from message platform.cryptography.v2alpha.CreateCertificateResponse
 */
export declare type CreateCertificateResponse = Message<"platform.cryptography.v2alpha.CreateCertificateResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * @generated from field: platform.cryptography.v2alpha.Certificate certificate = 2;
   */
  certificate?: Certificate;
};

/**
 * Describes the message platform.cryptography.v2alpha.CreateCertificateResponse.
 * Use `create(CreateCertificateResponseSchema)` to create a new message.
 */
export declare const CreateCertificateResponseSchema: GenMessage<CreateCertificateResponse>;

/**
 * Request for CreateAndSignCertificate
 *
 * @generated from message platform.cryptography.v2alpha.CreateAndSignCertificateRequest
 */
export declare type CreateAndSignCertificateRequest = Message<"platform.cryptography.v2alpha.CreateAndSignCertificateRequest"> & {
  /**
   * Name of the Certificate Authority. For example, 'Open Ecosystems, Inc.'
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;

  /**
   * Encrypt key with this passphrase and write out key in an encrypted format
   *
   * @generated from field: string encrypt_key_passphrase = 4;
   */
  encryptKeyPassphrase: string;
};

/**
 * Describes the message platform.cryptography.v2alpha.CreateAndSignCertificateRequest.
 * Use `create(CreateAndSignCertificateRequestSchema)` to create a new message.
 */
export declare const CreateAndSignCertificateRequestSchema: GenMessage<CreateAndSignCertificateRequest>;

/**
 * Response to CreateAndSignCertificate
 *
 * @generated from message platform.cryptography.v2alpha.CreateAndSignCertificateResponse
 */
export declare type CreateAndSignCertificateResponse = Message<"platform.cryptography.v2alpha.CreateAndSignCertificateResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * @generated from field: platform.cryptography.v2alpha.Certificate certificate = 2;
   */
  certificate?: Certificate;
};

/**
 * Describes the message platform.cryptography.v2alpha.CreateAndSignCertificateResponse.
 * Use `create(CreateAndSignCertificateResponseSchema)` to create a new message.
 */
export declare const CreateAndSignCertificateResponseSchema: GenMessage<CreateAndSignCertificateResponse>;

/**
 * @generated from message platform.cryptography.v2alpha.Certificate
 */
export declare type Certificate = Message<"platform.cryptography.v2alpha.Certificate"> & {
  /**
   * Identifier for this Certificate Authority
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Timestamp indicating when this event subscription was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * Timestamp indicating when this event subscription was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Duration duration = 6;
   */
  duration?: Duration;
};

/**
 * Describes the message platform.cryptography.v2alpha.Certificate.
 * Use `create(CertificateSchema)` to create a new message.
 */
export declare const CertificateSchema: GenMessage<Certificate>;

/**
 * Supported event type for subscription.
 *
 * @generated from enum platform.cryptography.v2alpha.CertificateType
 */
export enum CertificateType {
  /**
   * Unspecified or unknown subscription type.
   *
   * @generated from enum value: CERTIFICATE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Certificate for an organization.
   *
   * @generated from enum value: CERTIFICATE_TYPE_ORGANIZATION = 1;
   */
  ORGANIZATION = 1,

  /**
   * Certificate for an ecosystem
   *
   * @generated from enum value: CERTIFICATE_TYPE_ECOSYSTEM = 2;
   */
  ECOSYSTEM = 2,

  /**
   * Certificate for a user.
   *
   * @generated from enum value: CERTIFICATE_TYPE_USER = 3;
   */
  USER = 3,
}

/**
 * Describes the enum platform.cryptography.v2alpha.CertificateType.
 */
export declare const CertificateTypeSchema: GenEnum<CertificateType>;

/**
 * The current status of a event
 *
 * @generated from enum platform.cryptography.v2alpha.EventCertificateStatus
 */
export enum EventCertificateStatus {
  /**
   * Unspecified or unknown status.
   *
   * @generated from enum value: EVENT_CERTIFICATE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Certificate is being created.
   *
   * @generated from enum value: EVENT_CERTIFICATE_STATUS_CREATING = 1;
   */
  CREATING = 1,

  /**
   * Error.
   *
   * @generated from enum value: EVENT_CERTIFICATE_STATUS_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum platform.cryptography.v2alpha.EventCertificateStatus.
 */
export declare const EventCertificateStatusSchema: GenEnum<EventCertificateStatus>;

/**
 * @generated from enum platform.cryptography.v2alpha.CertificateCommands
 */
export enum CertificateCommands {
  /**
   * Unspecified or unknown command
   *
   * @generated from enum value: CERTIFICATE_COMMANDS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CERTIFICATE_COMMANDS_CREATE_CERTIFICATE = 1;
   */
  CREATE_CERTIFICATE = 1,
}

/**
 * Describes the enum platform.cryptography.v2alpha.CertificateCommands.
 */
export declare const CertificateCommandsSchema: GenEnum<CertificateCommands>;

/**
 * @generated from enum platform.cryptography.v2alpha.CertificateEvents
 */
export enum CertificateEvents {
  /**
   * Unspecified or unknown event.
   *
   * @generated from enum value: CERTIFICATE_EVENTS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Event Certificate complete.
   *
   * @generated from enum value: CERTIFICATE_EVENTS_CREATED_CERTIFICATE = 1;
   */
  CREATED_CERTIFICATE = 1,
}

/**
 * Describes the enum platform.cryptography.v2alpha.CertificateEvents.
 */
export declare const CertificateEventsSchema: GenEnum<CertificateEvents>;

/**
 * @generated from service platform.cryptography.v2alpha.CertificateService
 */
export declare const CertificateService: GenService<{
  /**
   * Method to CreateCertificate to events based on scopes
   *
   * @generated from rpc platform.cryptography.v2alpha.CertificateService.CreateCertificate
   */
  createCertificate: {
    methodKind: "server_streaming";
    input: typeof CreateCertificateRequestSchema;
    output: typeof CreateCertificateResponseSchema;
  },
  /**
   * Method to CreateAndSignCertificate to events based on scopes
   *
   * @generated from rpc platform.cryptography.v2alpha.CertificateService.CreateAndSignCertificate
   */
  createAndSignCertificate: {
    methodKind: "unary";
    input: typeof CreateAndSignCertificateRequestSchema;
    output: typeof CreateAndSignCertificateResponseSchema;
  },
}>;

