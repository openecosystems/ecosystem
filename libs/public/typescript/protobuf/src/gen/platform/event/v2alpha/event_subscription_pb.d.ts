// @generated by protoc-gen-es v2.2.3
// @generated from file platform/event/v2alpha/event_subscription.proto (package platform.event.v2alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { SpecPublic, SpecResponseContext } from "../../spec/v2/spec_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file platform/event/v2alpha/event_subscription.proto.
 */
export declare const file_platform_event_v2alpha_event_subscription: GenFile;

/**
 * @generated from message platform.event.v2alpha.EventSubscriptionConfiguration
 */
export declare type EventSubscriptionConfiguration = Message<"platform.event.v2alpha.EventSubscriptionConfiguration"> & {
  /**
   * @generated from field: string config_one = 1;
   */
  configOne: string;

  /**
   * @generated from field: bool config_two = 2;
   */
  configTwo: boolean;

  /**
   * @generated from field: int64 config_three = 3;
   */
  configThree: bigint;
};

/**
 * Describes the message platform.event.v2alpha.EventSubscriptionConfiguration.
 * Use `create(EventSubscriptionConfigurationSchema)` to create a new message.
 */
export declare const EventSubscriptionConfigurationSchema: GenMessage<EventSubscriptionConfiguration>;

/**
 * Request for Subscribe
 *
 * @generated from message platform.event.v2alpha.SubscribeRequest
 */
export declare type SubscribeRequest = Message<"platform.event.v2alpha.SubscribeRequest"> & {
  /**
   * Must be either Organization, Workspace, or User Subscription type. Cannot be Unspecified.
   *
   * @generated from field: platform.event.v2alpha.SubscriptionType type = 2;
   */
  type: SubscriptionType;
};

/**
 * Describes the message platform.event.v2alpha.SubscribeRequest.
 * Use `create(SubscribeRequestSchema)` to create a new message.
 */
export declare const SubscribeRequestSchema: GenMessage<SubscribeRequest>;

/**
 * Response to Subscribe
 *
 * @generated from message platform.event.v2alpha.SubscribeResponse
 */
export declare type SubscribeResponse = Message<"platform.event.v2alpha.SubscribeResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * The event subscription.
   *
   * @generated from field: platform.event.v2alpha.EventSubscription event_subscription = 2;
   */
  eventSubscription?: EventSubscription;
};

/**
 * Describes the message platform.event.v2alpha.SubscribeResponse.
 * Use `create(SubscribeResponseSchema)` to create a new message.
 */
export declare const SubscribeResponseSchema: GenMessage<SubscribeResponse>;

/**
 * Request for a UnSubscribe
 *
 * @generated from message platform.event.v2alpha.UnSubscribeRequest
 */
export declare type UnSubscribeRequest = Message<"platform.event.v2alpha.UnSubscribeRequest"> & {
};

/**
 * Describes the message platform.event.v2alpha.UnSubscribeRequest.
 * Use `create(UnSubscribeRequestSchema)` to create a new message.
 */
export declare const UnSubscribeRequestSchema: GenMessage<UnSubscribeRequest>;

/**
 * Response for a UnSubscribe.
 *
 * @generated from message platform.event.v2alpha.UnSubscribeResponse
 */
export declare type UnSubscribeResponse = Message<"platform.event.v2alpha.UnSubscribeResponse"> & {
  /**
   * The response context
   *
   * @generated from field: platform.spec.v2.SpecResponseContext spec_context = 1;
   */
  specContext?: SpecResponseContext;

  /**
   * The un-subscribed event subscription.
   *
   * @generated from field: platform.event.v2alpha.EventSubscription event_subscription = 2;
   */
  eventSubscription?: EventSubscription;
};

/**
 * Describes the message platform.event.v2alpha.UnSubscribeResponse.
 * Use `create(UnSubscribeResponseSchema)` to create a new message.
 */
export declare const UnSubscribeResponseSchema: GenMessage<UnSubscribeResponse>;

/**
 * The event subscription data.
 *
 * @generated from message platform.event.v2alpha.EventSubscription
 */
export declare type EventSubscription = Message<"platform.event.v2alpha.EventSubscription"> & {
  /**
   * Identifier for this event subscription.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Timestamp indicating when this event subscription was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * Timestamp indicating when this event subscription was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  /**
   * Status of this event subscription
   *
   * @generated from field: platform.event.v2alpha.EventSubscriptionStatus status = 5;
   */
  status: EventSubscriptionStatus;

  /**
   * Details of the current status.
   *
   * @generated from field: string status_details = 6;
   */
  statusDetails: string;

  /**
   * Type of event
   *
   * @generated from field: platform.event.v2alpha.SubscriptionType type = 7;
   */
  type: SubscriptionType;

  /**
   * Data for the event subscription.
   *
   * @generated from field: platform.spec.v2.SpecPublic data = 8;
   */
  data?: SpecPublic;
};

/**
 * Describes the message platform.event.v2alpha.EventSubscription.
 * Use `create(EventSubscriptionSchema)` to create a new message.
 */
export declare const EventSubscriptionSchema: GenMessage<EventSubscription>;

/**
 * Supported event type for subscription.
 *
 * @generated from enum platform.event.v2alpha.SubscriptionType
 */
export enum SubscriptionType {
  /**
   * Unspecified or unknown subscription type.
   *
   * @generated from enum value: SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Subscription for an organization.
   *
   * @generated from enum value: SUBSCRIPTION_TYPE_ORGANIZATION = 1;
   */
  ORGANIZATION = 1,

  /**
   * Subscription for a workspace
   *
   * @generated from enum value: SUBSCRIPTION_TYPE_WORKSPACE = 2;
   */
  WORKSPACE = 2,

  /**
   * Subscription for a user.
   *
   * @generated from enum value: SUBSCRIPTION_TYPE_USER = 3;
   */
  USER = 3,
}

/**
 * Describes the enum platform.event.v2alpha.SubscriptionType.
 */
export declare const SubscriptionTypeSchema: GenEnum<SubscriptionType>;

/**
 * The current status of a event
 *
 * @generated from enum platform.event.v2alpha.EventSubscriptionStatus
 */
export enum EventSubscriptionStatus {
  /**
   * Unspecified or unknown status.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Subscription is being subscribed.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_STATUS_SUBSCRIBING = 1;
   */
  SUBSCRIBING = 1,

  /**
   * Subscription is listening for events.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_STATUS_LISTENING = 2;
   */
  LISTENING = 2,

  /**
   * Subscription is being un-subscribed.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_STATUS_UN_SUBSCRIBING = 3;
   */
  UN_SUBSCRIBING = 3,

  /**
   * Error in event subscription.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_STATUS_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum platform.event.v2alpha.EventSubscriptionStatus.
 */
export declare const EventSubscriptionStatusSchema: GenEnum<EventSubscriptionStatus>;

/**
 * Event Subscription Commands
 *
 * @generated from enum platform.event.v2alpha.EventSubscriptionCommands
 */
export enum EventSubscriptionCommands {
  /**
   * Unspecified or unknown command
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_COMMANDS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Subscribe Command
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_COMMANDS_SUBSCRIBE = 1;
   */
  SUBSCRIBE = 1,

  /**
   * Un-subscribe command.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_COMMANDS_UN_SUBSCRIBE = 2;
   */
  UN_SUBSCRIBE = 2,
}

/**
 * Describes the enum platform.event.v2alpha.EventSubscriptionCommands.
 */
export declare const EventSubscriptionCommandsSchema: GenEnum<EventSubscriptionCommands>;

/**
 * Event subscription events
 *
 * @generated from enum platform.event.v2alpha.EventSubscriptionEvents
 */
export enum EventSubscriptionEvents {
  /**
   * Unspecified or unknown event subscription event.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_EVENTS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Event Subscription complete.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_EVENTS_SUBSCRIBED = 1;
   */
  SUBSCRIBED = 1,

  /**
   * Event un-subscription complete.
   *
   * @generated from enum value: EVENT_SUBSCRIPTION_EVENTS_UN_SUBSCRIBED = 2;
   */
  UN_SUBSCRIBED = 2,
}

/**
 * Describes the enum platform.event.v2alpha.EventSubscriptionEvents.
 */
export declare const EventSubscriptionEventsSchema: GenEnum<EventSubscriptionEvents>;

/**
 * Event Subscription Service Interface
 *
 * @generated from service platform.event.v2alpha.EventSubscriptionService
 */
export declare const EventSubscriptionService: GenService<{
  /**
   * Method to Subscribe to events based on scopes
   *
   * @generated from rpc platform.event.v2alpha.EventSubscriptionService.Subscribe
   */
  subscribe: {
    methodKind: "unary";
    input: typeof SubscribeRequestSchema;
    output: typeof SubscribeResponseSchema;
  },
  /**
   * Method to Unsubscribe to an event scope
   *
   * @generated from rpc platform.event.v2alpha.EventSubscriptionService.UnSubscribe
   */
  unSubscribe: {
    methodKind: "unary";
    input: typeof UnSubscribeRequestSchema;
    output: typeof UnSubscribeResponseSchema;
  },
}>;

