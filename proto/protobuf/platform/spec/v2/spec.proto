syntax = "proto3";

package platform.spec.v2;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "platform/options/v2/annotations.proto";
import "platform/type/v2/jurisdiction.proto";
import "platform/type/v2/validation.proto";
import "platform/type/v2/mask.proto";
import "google/protobuf/field_mask.proto";
import "google/rpc/status.proto";

option (platform.options.v2.graphql) = {
  enabled: true
};

option go_package = "github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta/gen/platform/spec/v2;specv2pb";

enum SpecEventType {
  SPEC_EVENT_TYPE_UNSPECIFIED = 0;
  SPEC_EVENT_TYPE_COMMAND = 1;
  SPEC_EVENT_TYPE_EVENT = 2;
  SPEC_EVENT_TYPE_ROUTINE = 3;
  SPEC_EVENT_TYPE_ML = 4;
  SPEC_EVENT_TYPE_STREAM = 5;
  SPEC_EVENT_TYPE_DB = 6;
  SPEC_EVENT_TYPE_PROFILE = 7;
  SPEC_EVENT_TYPE_ETL = 8;
  SPEC_EVENT_TYPE_LOG = 9;
}

// Spec principal types
enum SpecPrincipalType {
  // A principal can be:
  SPEC_PRINCIPAL_TYPE_UNSPECIFIED = 0;

  SPEC_PRINCIPAL_TYPE_ANONYMOUS = 1;

  // A Platform Account (for end users)
  SPEC_PRINCIPAL_TYPE_USER = 2;

  // A service account (for applications and compute workloads)
  SPEC_PRINCIPAL_TYPE_SERVICE_ACCOUNT = 3;

  // Group
  SPEC_PRINCIPAL_TYPE_GROUP = 4;

  // Domain that can access a resource
  SPEC_PRINCIPAL_TYPE_DOMAIN = 5;
}

//
message SpecKey {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //The organization associated with this context
  string organization_slug = 2;

  //The workspace associated with this context
  string workspace_slug = 3;

  //The workspace location associated with this context
  platform.type.v2.Jurisdiction workspace_jan = 4;

  string spec_type = 5;

  string id = 6;
}

//
message Spec {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  /*
  Spec Version is captured by:
  - Channel (Producer)
  */
  string spec_version = 1;

  /*
  Spec message id is generated by:
  - Channel (Producer)
  */
  string message_id = 2;

  /*
  Spec sent at is generated by:
  - Client
  */
  google.protobuf.Timestamp sent_at = 3;

  //
  google.protobuf.Timestamp received_at = 4;

  //
  google.protobuf.Timestamp completed_at = 5;

  //
  string spec_type = 6;

  //
  SpecEventType spec_event_type = 7;

  //
  string spec_event = 8;

  //
  SpecPrincipal principal = 9;

  //
  SpanContext span_context = 10;

  //
  SpecContext context = 11;

  //
  SpecRoutineContext routine_context = 12;

  //
  google.protobuf.Any data = 13;

  SpecData spec_data = 14;

  google.rpc.Status spec_error = 15;
}

//
message SpecPublic {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string spec_version = 1;

  //
  string message_id = 2;

  //
  google.protobuf.Timestamp sent_at = 3;

  //
  google.protobuf.Timestamp received_at = 4;

  //
  google.protobuf.Timestamp completed_at = 5;

  //
  string spec_type = 6;

  //
  string spec_event = 8;

  //
  google.protobuf.Any data = 9;

  //
}

//
message SpecContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // The organization associated with this context.
  string organization_id = 1;

  // The organization associated with this context.
  string organization_slug = 2;

  // The ecosystem associated with this context.
  string ecosystem_id = 3;

  // The ecosystem associated with this context.
  string ecosystem_slug = 4;

  // The ecosystem jan associated with this context.
  // Right now this is an enumeration with a finite number of items.
  platform.type.v2.Jurisdiction ecosystem_jan = 5;


  platform.options.v2.SpecRequestScope procedure_scope = 6;


  // The ip address of the requester. MUST meet RFC 791 or
  string ip = 100;

  // The locality that applies to values in the Spec Message. MUST meet [ISO 3166](https://www.iso.org/iso-3166-country-codes.html).
  string locale = 101;

  // The timezone where the transaction originated. MUST meet [ISO 8601 Time zone designator](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators)
  string timezone = 102;

  // Similar to the `User-Agent` header of a HTTP request. See [User-Agent - HTTP](developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) for guidance.
  string user_agent = 103;

  SpecValidation validation = 104;

  //
  SpecProducer producer = 105;

  //
  SpecDevice device = 106;

  //
  SpecLocation location = 107;

  //
  SpecNetwork network = 108;

  // The Operating System that was used to send the transaction.
  SpecOS os = 109;

  // SpecConfiguration

  // SpecFields
}

//
message SpanContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string trace_id = 1;

  //
  string span_id = 2;

  //
  string parent_span_id = 3;

  //
  string trace_flags = 4;
}

//
message SpecRoutineContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //The routine associated with this spec event
  string routine_id = 1;

  map<string, google.protobuf.Any> routine_data = 3;
}

message SpecPrincipal {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  SpecPrincipalType type = 1;

  string anonymous_id = 2;

  //
  string principal_id = 3;

  // The identity of a principal is an email address associated with a user, service account, or group; or a domain name
  string principal_email = 4;

  // The connection id used to authenticate
  string connection_id = 5;

  repeated platform.options.v2.AuthRole auth_roles = 6;

}

//
message SpecValidation {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  bool validate_only = 1;

}

//
message SpecProducer {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string name = 1;

  //
  string version = 2;

  //
  string build = 3;

  //
  string namespace = 4;
}

// Describes the device that was used to initiate the transaction.
message SpecDevice {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string id = 1;

  //
  string type = 2;

  //
  string advertising_id = 3;

  //
  string manufacturer = 4;

  //
  string model = 5;

  //
  string name = 6;

  //
  string token = 7;
}

// Describes the geographical location where the transaction was initiated.
message SpecLocation {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // The name of the city where the transaction was initiated.

  string city = 1;

  // The country where the transaction was initiated.
  string country = 2;

  // The latitude part of the location's GPS coordinates.
  double latitude = 3;

  // The longitude part of the location's GPS coordinates.
  double longitude = 4;

  // Unknown. <!-- issue -->
  string speed = 5;
}

// Contains information about which types of network were used to transport the Spec Message.
message SpecNetwork {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // `True` if bluetooth was used.
  bool bluetooth = 1;

  // `True` if a cellular network was used.
  bool cellular = 2;

  // `True` if WiFi was used.
  bool wifi = 3;

  // The name of the carrier when a cellular network was used.
  string carrier = 4;
}

// Describes the OS that was used to initiate the transaction.
message SpecOS {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // The name of the OS.
  string name = 1;

  // The version of the OS.
  string version = 2;
}

// Describes the Data object for this spec event
message SpecData {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  google.protobuf.Any configuration = 1;

  google.protobuf.Any data = 2;

  google.protobuf.FieldMask field_mask = 3;
}

//
message SpecResponseContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_OUTPUT
  };

  //Whether this request is a validate only request
  platform.type.v2.ResponseValidation response_validation = 1;

  // How we have masked the response based on requested masking and policy masking
  platform.type.v2.ResponseMask response_mask = 2;

  string ecosystem_slug = 3;

  //The organization associated with this response
  string organization_slug = 50;

  //The workspace location associated with this response
  platform.type.v2.Jurisdiction ecosystem_jan = 52;

  string routine_id = 53;

  string correlation_id = 54;
}

message SpecWrapper {

}