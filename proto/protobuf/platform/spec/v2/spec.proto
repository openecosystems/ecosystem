syntax = "proto3";

package platform.spec.v2;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "platform/options/v2/annotations.proto";
import "platform/type/v2/jurisdiction.proto";
import "platform/type/v2/validation.proto";
import "platform/type/v2/mask.proto";
import "google/protobuf/field_mask.proto";
import "google/rpc/status.proto";

option (platform.options.v2.graphql) = {
  enabled: true
};

option go_package = "github.com/openecosystems/ecosystem/go/oeco-sdk/v2beta/gen/platform/spec/v2;specv2pb";

enum SpecEventType {
  SPEC_EVENT_TYPE_UNSPECIFIED = 0;
  SPEC_EVENT_TYPE_COMMAND = 1;
  SPEC_EVENT_TYPE_EVENT = 2;
  SPEC_EVENT_TYPE_ROUTINE = 3;
  SPEC_EVENT_TYPE_ML = 4;
  SPEC_EVENT_TYPE_STREAM = 5;
  SPEC_EVENT_TYPE_DB = 6;
  SPEC_EVENT_TYPE_PROFILE = 7;
  SPEC_EVENT_TYPE_ETL = 8;
  SPEC_EVENT_TYPE_LOG = 9;
}

// Spec principal types
enum SpecPrincipalType {
  // A principal can be:
  SPEC_PRINCIPAL_TYPE_UNSPECIFIED = 0;

  SPEC_PRINCIPAL_TYPE_ANONYMOUS = 1;

  // A Platform Account (for end users)
  SPEC_PRINCIPAL_TYPE_USER = 2;

  // A service account (for applications and compute workloads)
  SPEC_PRINCIPAL_TYPE_SERVICE_ACCOUNT = 3;

  // Group
  SPEC_PRINCIPAL_TYPE_GROUP = 4;

  // Domain that can access a resource
  SPEC_PRINCIPAL_TYPE_DOMAIN = 5;
}

//
message SpecKey {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //The organization associated with this context
  string organization_slug = 20;

  //The workspace associated with this context
  string workspace_slug = 30;

  //The workspace location associated with this context
  platform.type.v2.Jurisdiction jan = 40;

  string spec_type = 50;

  string id = 60;
}

//
message Spec {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  /*
  Spec Version is captured by:
  - Channel (Producer)
  */
  string spec_version = 10;

  /*
  Spec message id is generated by:
  - Channel (Producer)
  */
  string message_id = 20;

  string request_id = 21;

  /*
  Spec sent at is generated by:
  - Client
  */
  google.protobuf.Timestamp sent_at = 30;

  //
  google.protobuf.Timestamp received_at = 40;

  //
  google.protobuf.Timestamp completed_at = 50;

  // The Spec Entity Type for the message
  string spec_type = 60;

  // Is this a command, event, routine, profile update, ML run or other type of event
  SpecEventType spec_event_type = 70;

  //
  string spec_event = 80;

  //
  SpecPrincipal principal = 90;

  //
  SpanContext span_context = 100;

  //
  SpecContext context = 110;

  //
  SpecRoutineContext routine_context = 120;

  //
  google.protobuf.Any data = 130;

  SpecData spec_data = 140;

  google.rpc.Status spec_error = 150;
}

//
message SpecPublic {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string spec_version = 10;

  //
  string message_id = 20;

  //
  google.protobuf.Timestamp sent_at = 30;

  //
  google.protobuf.Timestamp received_at = 40;

  //
  google.protobuf.Timestamp completed_at = 50;

  //
  string spec_type = 60;

  //
  string spec_event = 80;

  //
  google.protobuf.Any data = 90;

  //
}

//
message SpecContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // The organization associated with this context.
  string organization_id = 10;

  // The organization associated with this context.
  string organization_slug = 20;

  // The ecosystem associated with this context.
  string ecosystem_id = 30;

  // The ecosystem associated with this context.
  string ecosystem_slug = 40;

  // The ecosystem jan associated with this context.
  // Right now this is an enumeration with a finite number of items.
  platform.type.v2.Jurisdiction jan = 50;


  platform.options.v2.SpecRequestScope procedure_scope = 60;


  // The ip address of the requester. MUST meet RFC 791 or
  string ip = 70;

  // The locality that applies to values in the Spec Message. MUST meet [ISO 3166](https://www.iso.org/iso-3166-country-codes.html).
  string locale = 80;

  // The timezone where the transaction originated. MUST meet [ISO 8601 Time zone designator](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators)
  string timezone = 90;

  // Similar to the `User-Agent` header of a HTTP request. See [User-Agent - HTTP](developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) for guidance.
  string user_agent = 100;

  SpecValidation validation = 110;

  //
  SpecProducer producer = 120;

  //
  SpecDevice device = 130;

  //
  SpecLocation location = 140;

  //
  SpecNetwork network = 150;

  // The Operating System that was used to send the transaction.
  SpecOS os = 160;

  // SpecConfiguration

  // SpecFields
}

//
message SpanContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string trace_id = 10;

  //
  string span_id = 20;

  //
  string parent_span_id = 30;

  //
  string trace_flags = 40;
}

//
message SpecRoutineContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //The routine associated with this spec event
  string routine_id = 10;

  map<string, google.protobuf.Any> routine_data = 30;
}

message SpecPrincipal {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  SpecPrincipalType type = 10;

  string anonymous_id = 20;

  //
  string principal_id = 30;

  // The identity of a principal is an email address associated with a user, service account, or group; or a domain name
  string principal_email = 40;

  // The connection id used to authenticate
  string connection_id = 50;

  repeated platform.options.v2.AuthRole auth_roles = 60;

}

//
message SpecValidation {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  bool validate_only = 10;

}

//
message SpecProducer {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string name = 10;

  //
  string version = 20;

  //
  string build = 30;

  //
  string namespace = 40;
}

// Describes the device that was used to initiate the transaction.
message SpecDevice {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string id = 10;

  //
  string type = 20;

  //
  string advertising_id = 30;

  //
  string manufacturer = 40;

  //
  string model = 50;

  //
  string name = 60;

  //
  string token = 70;
}

// Describes the geographical location where the transaction was initiated.
message SpecLocation {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };


  // Continent of the incoming request, for example, "NA"
  string continent = 10;

  // The country where the transaction was initiated.
  string country = 20;

  // Did this originate from an EU country
  bool is_eu_country = 30;

  // The name of the city where the transaction was initiated.
  string city = 40;

  // If known, the ISO 3166-2 name for the first level region associated with the IP address of the incoming request, for example, "Georgia".
  string region = 50;

  // If known, the ISO 3166-2 code for the first-level region associated with the IP address of the incoming request, for example, "GA".
  string region_code = 60;

  // The latitude part of the location's GPS coordinates.
  double latitude = 70;

  // The longitude part of the location's GPS coordinates.
  double longitude = 80;

  // Postal code of the incoming request, for example, "78701".
  string postal_code = 90;

  // Metro code (DMA) of the incoming request, for example, "635".
  string metro_code = 100;

  string speed = 110;
}

// Contains information about which types of network were used to transport the Spec Message.
message SpecNetwork {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // `True` if bluetooth was used.
  bool bluetooth = 10;

  // `True` if a cellular network was used.
  bool cellular = 20;

  // `True` if WiFi was used.
  bool wifi = 30;

  // The name of the carrier when a cellular network was used.
  string carrier = 40;

  // Autonomous System Numbers (ASN) of the incoming request, for example, 395747
  string asn = 50;

  // The organization which owns the ASN of the incoming request, for example, Google Cloud
  string asn_organization = 60;
}

// Describes the OS that was used to initiate the transaction.
message SpecOS {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  // The name of the OS.
  string name = 10;

  // The version of the OS.
  string version = 20;
}

// Describes the Data object for this spec event
message SpecData {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  google.protobuf.Any configuration = 10;

  google.protobuf.Any data = 20;

  google.protobuf.FieldMask field_mask = 30;
}

//
message SpecResponseContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_OUTPUT
  };

  //Whether this request is a validate only request
  platform.type.v2.ResponseValidation response_validation = 10;

  // How we have masked the response based on requested masking and policy masking
  platform.type.v2.ResponseMask response_mask = 20;

  string ecosystem_slug = 30;

  //The organization associated with this response
  string organization_slug = 40;

  //The workspace location associated with this response
  platform.type.v2.Jurisdiction jan = 50;

  string routine_id = 60;

  string correlation_id = 70;
}

message SpecWrapper {

}