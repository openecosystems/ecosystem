syntax = "proto3";

package platform.spec.v2;

import "platform/options/v2/annotations.proto";
import "platform/type/v2/transport.proto";
import "platform/type/v2/protocol.proto";
import "platform/type/v2/git_repository.proto";
import "platform/type/v2/header.proto";

option go_package = "libs/protobuf/go/protobuf/gen/platform/spec/v2;specv2pb";

message Pki {
  string ca = 1;
  string cert = 2;
  string key = 3;
}

message StaticHostMap {
  repeated string map = 2;
}

message Punchy {
  bool punch = 1;
  bool respond = 2;
  string delay = 3;
  string respond_delay = 4;
}

message Lighthouse {
  repeated string hosts = 1;
  uint32 interval = 2;
}

//
message SpecClientSettings {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string name = 1;

  //
  string description = 2;

  SpecClientPlatform platform = 3;

  SpecClientContext context = 4;

  SpecSystemConfiguration systems = 5;

}

message SpecClientPlatform {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  string endpoint = 1;

  bool insecure = 2;

  Pki pki = 3;

  Punchy punchy = 4;

  Lighthouse lighthouse = 5;

  map<string, StaticHostMap> static_host_map = 6;

}

message SpecClientContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //The API key associated with this request
  string api_key = 1;

}

message SpecSystemConfiguration {

  ReferenceConfiguration reference = 1;

  OrganizationConfiguration organization = 2;

  ConfigurationConfiguration configuration = 3;

}

message ReferenceConfiguration {

  repeated platform.type.v2.Transport transports = 1;

  string retry = 2;

  string version = 3;

}

message OrganizationConfiguration {

  repeated platform.type.v2.Transport transports = 1;

  string retry = 2;

  string version = 3;

}

message ConfigurationConfiguration {

  repeated platform.type.v2.Transport transports = 1;

  string retry = 2;

  string version = 3;

}



//
message SpecSettings {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //
  string name = 1;

  string version = 2;

  //
  string description = 3;

  SpecSettingsPlatform platform = 4;

  SpecSettingsContext context = 5;

  repeated SpecSystem systems2 = 6;

}

message SpecSettingsPlatform {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  string endpoint = 1;

  bool insecure = 2;

  Pki pki = 3;

  Punchy punchy = 4;

  Lighthouse lighthouse = 5;

  map<string, StaticHostMap> static_host_map = 6;

  bool dynamic_config_reload = 7;

}

message SpecSettingsContext {
  option (platform.options.v2.graph) = {
    type: GRAPH_TYPE_INPUT
  };

  //The API key associated with this request
  string api_key = 1;

  repeated platform.type.v2.Header headers = 2;

}

message DependencyRegistry {
  platform.type.v2.GitRepository git = 1;

  string path = 2;

  string registry = 3;
}

message SpecSystem {

  string name = 1;

  string version = 2;

  repeated platform.type.v2.Protocol protocols = 3;

  DependencyRegistry registry = 4;

}
