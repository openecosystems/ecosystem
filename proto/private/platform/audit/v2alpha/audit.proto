syntax = "proto3";

package platform.audit.v2alpha;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "platform/options/v2/annotations.proto";
import "platform/spec/v2/spec.proto";
import "platform/type/v2/jurisdiction.proto";

option (platform.options.v2.network_file) = {type: NETWORK_TYPE_UNDERLAY;};
option (platform.options.v2.language) = {languages: [LANGUAGE_TYPE_GOLANG]};
option (platform.options.v2.configuration) = {enabled: true,};
option (platform.options.v2.graphql) = {enabled: true};
option (platform.options.v2.api_file) = {
  type: API_TYPE_PRIVATE;
  cycle: API_LIFECYCLE_ALPHA;
  interface: API_INTERFACE_TYPE_OPERATIONAL;
};
option (platform.options.v2.entity) = {
  entity: "audit";
  entity_plural: "audits";
  type: ENTITY_TYPE_UNSPECIFIED;
  namespace: "jan";
  consistency: ENTITY_CONSISTENCY_EVENTUAL;
};

option go_package = "github.com/openecosystems/ecosystem/libs/private/go/sdk/gen/platform/audit/v2alpha;auditv2alphapb";

message AuditConfiguration {
  string id = 1 [(platform.options.v2.configuration_field) = {
    configuration: {
      description: "This is a audit id",
      enabled: true
    }
  }];
}

/**
 * Audit Service Interface
 */
service AuditService {
  // Method to search for an audit event.
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (platform.options.v2.api_method) = {shortname: "search"};
    option (platform.options.v2.cqrs) = {type: CQRS_TYPE_QUERY_LIST};
    option (google.api.http) = {
      post: "/v2/search"
      body: "*"
    };
  }
}

/**
 * Commands used with the Audit System
 */
enum AuditCommands {
  option (platform.options.v2.spec) = {type: SPEC_ENUM_TYPE_COMMANDS};

  AUDIT_COMMANDS_UNSPECIFIED = 0; // No command specified.
}

/**
 * Event associated with Audit System.
 */
enum AuditEvents {
  option (platform.options.v2.spec) = {type: SPEC_ENUM_TYPE_EVENTS};

  AUDIT_EVENTS_UNSPECIFIED = 0; // No event specified
  AUDIT_EVENTS_CREATED = 1 [(platform.options.v2.billing) = {// Billable Audit Event created.
    billable: true
  }];
}

/**
 * Message request for a search.
 */
message SearchRequest {
  option (platform.options.v2.graph) = {type: GRAPH_TYPE_INPUT};

  // Timestamp to begin searching.
  google.protobuf.Timestamp start_at = 2;

  // Timestamp to end searching
  google.protobuf.Timestamp end_at = 3;

  // Indicates the page size
  int32 page_size = 4;

  // Page token provided in the response
  string page_token = 5;
}

// Message response from a search.
message SearchResponse {
  option (platform.options.v2.graph) = {type: GRAPH_TYPE_OUTPUT};

  // The response context
  spec.v2.SpecResponseContext spec_context = 1;

  // Total count of audits
  int32 total_size = 2;

  // Token to retrieve the next page
  string next_page_token = 3;

  // List of audits
  repeated Audit audits = 4;
}

// Audit Entry
message AuditEntry {
  option (platform.options.v2.graph) = {type: GRAPH_TYPE_OUTPUT};

  // Data block recorded for Audit System
  google.protobuf.Any data = 1;
}

// Audit Message
message Audit {
  option (platform.options.v2.graph) = {type: GRAPH_TYPE_OUTPUT};

  // ID used to identify this message
  string id = 1 [(platform.options.v2.entity_field) = {key: true}];

  // Timestamp indicating when this message was created.
  google.protobuf.Timestamp created_at = 2;

  // Timestamp indicating when this message was last updated.
  google.protobuf.Timestamp updated_at = 3;

  // Audit Entry to record.
  AuditEntry entry = 4;

  platform.type.v2.Jurisdiction jurisdiction = 5;
}
