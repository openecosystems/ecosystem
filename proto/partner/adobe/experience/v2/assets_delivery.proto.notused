syntax = "proto3";

package assets_delivery;

import "google/api/annotations.proto";

import "google/protobuf/descriptor.proto";

import "google/protobuf/empty.proto";

option go_package = ".;assets_delivery";

message AssetId {
  string value = 1;
}

message FileContentDisposition {
  string value = 1;
}

message ProblemDetails {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;
}

message PlayerOutput {
  string value = 1;
}

message FileContentType {
  string value = 1;
}

message Dimensions {
  int32 width = 1;

  int32 height = 2;
}

message AssetRenditionsItem {
  string name = 1;

  string format = 2;

  int64 size = 3;

  Dimensions dimensions = 4;
}

message VideoManifestFormatParam {
  Value value = 1;

  enum Value {
    M3U8 = 0;

    MPD = 1;
  }
}

message VideoManifestOutput {
  string value = 1;
}

message RepositoryId {
  string value = 1;
}

message Repo:repositoryId {
  string value = 1;
}

message RepositoryMetadata {
  string aem:asset_state = 1;

  string aem:checked_out_by = 2;

  string dam:sha1 = 3;

  string dc:format = 4;

  string repo:create_date = 5;

  string repo:created_by = 6;

  string repo:modified_by = 7;

  string repo:modify_date = 8;

  string repo:name = 9;

  string repo:path = 10;

  int64 repo:size = 11;

  string repo:version = 12;

  int64 tiff:image_length = 13;

  int64 tiff:image_width = 14;

  Repo:repositoryId repo:repository_id = 15;

  repeated string repo:ancestors = 16;

  string repo:state = 17;

  string aem:published = 18;

  Repo:AssetClass repo:asset_class = 19;

  enum Repo:AssetClass {
    FILE = 0;

    DIRECTORY = 1;

    COLLECTION = 2;
  }
}

message Xcm:keywords {
  string value = 1;

  repeated string repo:ancestors = 2;

  string @lang = 3;
}

message Xcm:machineKeywords {
  string value = 1;

  double confidence = 2;

  string locale_code = 3;
}

message AssetMetadata {
  repeated Xcm:keywords xcm:keywords = 1;

  repeated string dc:creator = 2;

  string dc:description = 3;

  string dc:title = 4;

  string exif:gps_latitude = 5;

  string exif:gps_longitude = 6;

  float photoshop:_color_mode = 7;

  string photoshop:_date_created = 8;

  repeated Xcm:machineKeywords xcm:machine_keywords = 9;

  repeated int64 tiff:_bits_per_sample = 10;

  float tiff:_orientation = 11;

  string xmp:_create_date = 12;

  string xmp:_creator_tool = 13;

  string xmp:_modify_date = 14;
}

message Metadata {
  AssetId asset_id = 1;

  RepositoryMetadata repository_metadata = 2;

  AssetMetadata asset_metadata = 3;
}

message OrQuery {
  repeated CompositeQuery or = 1;
}

message AndQuery {
  repeated CompositeQuery and = 1;
}

message NotQuery {
  repeated CompositeQuery not = 1;
}

message MatchQueryAnchoredOperators {
  string text = 1;

  MatchQueryFields fields = 2;

  Operator operator = 3;

  enum Operator {
    STARTSWITH = 0;
  }
}

message MatchQueryUnanchoredOperators {
  string text = 1;

  MatchQueryFields fields = 2;

  Operator operator = 3;

  enum Operator {
    MATCHES = 0;
  }
}

message Match {
  string text = 1;

  MatchQueryFields fields = 2;

  Operator operator = 3;

  string text = 4;

  MatchQueryFields fields = 5;

  Operator operator = 6;

  enum Operator {
    STARTSWITH = 0;
  }

  enum Operator {
    MATCHES = 0;
  }
}

message MatchQuery {
  Match match = 1;
}

message TermAdditionalProperties {
  string value = 1;

  string value = 2;

  float value = 3;
}

message Term {
}

message TermQuery {
  Term term = 1;
}

message RangeAdditionalProperties {
  string gt = 1;

  string gte = 2;

  string lt = 3;

  string lte = 4;
}

message Range {
  map<string, RangeAdditionalProperties> additional_properties = 1;
}

message RangeQuery {
  Range range = 1;
}

message CompositeQuery {
  repeated CompositeQuery or = 1;

  repeated CompositeQuery and = 2;

  repeated CompositeQuery not = 3;

  Match match = 4;

  Term term = 5;

  Range range = 6;
}

message MatchQueryFields {
  repeated string value = 1;
}

message OrderBy {
  string value = 1;
}

message Limit {
  int32 value = 1;
}

message Cursor {
  string value = 1;
}

message SearchOperation {
  repeated CompositeQuery query = 1;

  OrderBy order_by = 2;

  Limit limit = 3;

  Cursor cursor = 4;
}

message Hits {
  repeated Metadata results = 1;
}

message TotalCount {
  int64 total = 1;

  Relation relation = 2;

  enum Relation {
    EQ = 0;

    GTE = 1;
  }
}

message SearchMetadata {
  int64 count = 1;

  TotalCount total_count = 2;

  int64 search_duration = 3;
}

message SearchOperationResponse {
  Hits hits = 1;

  Cursor cursor = 2;

  SearchMetadata search_metadata = 3;
}

message CollectionId {
  string value = 1;
}

message BaseRepositoryMetadata {
  Repo:repositoryId repo:repository_id = 1;

  string repo:create_date = 2;

  string repo:created_by = 3;

  string repo:modified_by = 4;

  string repo:modify_date = 5;
}

message CollectionMetadata {
  string title = 1;

  string description = 2;
}

message CollectionMetadata {
  CollectionId id = 1;

  BaseRepositoryMetadata repository_metadata = 2;

  CollectionMetadata collection_metadata = 3;
}

message CollectionItem {
  string id = 1;

  Repo:repositoryId repo:repository_id = 2;

  Type type = 3;

  enum Type {
    ASSET = 0;

    COLLECTION = 1;
  }
}

message Items {
  string id = 1;

  Repo:repositoryId repo:repository_id = 2;

  Type type = 3;

  enum Type {
    ASSET = 0;

    COLLECTION = 1;
  }
}

message CollectionCreationRequest {
  string title = 1;

  string description = 2;

  repeated Items items = 3;
}

message CollectionMetadataUpdateRequest {
  string title = 1;

  string description = 2;
}

message CollectionOperation {
  Op op = 1;

  string id = 2;

  Repo:repositoryId repo:repository_id = 3;

  Type type = 4;

  enum Op {
    ADD = 0;

    REMOVE = 1;
  }

  enum Type {
    ASSET = 0;

    COLLECTION = 1;
  }
}

message CommandResultMessage {
  string type = 1;

  string title = 2;

  string detail = 3;
}

message Data {
}

message CommandResult {
  string operation = 1;

  int32 status = 2;

  string description = 3;

  Data data = 4;

  repeated CommandResultMessage errors = 5;

  repeated CommandResultMessage warnings = 6;
}

message CollectionJobStatus {
  string operation = 1;

  int32 status = 2;

  string description = 3;

  Data data = 4;

  repeated CommandResultMessage errors = 5;

  repeated CommandResultMessage warnings = 6;

  Operation operation = 7;

  Data data = 8;

  enum Operation {
    AEM.ASSETS.COLLECTIONS.CREATECOLLECTION = 0;

    AEM.ASSETS.COLLECTIONS.DELETECOLLECTION = 1;

    AEM.ASSETS.COLLECTIONS.ADDTOCOLLECTION = 2;

    AEM.ASSETS.COLLECTIONS.REMOVEFROMCOLLECTION = 3;
  }
}

message LinkShareMetadataResponse {
  string id = 1;

  string title = 2;

  Access access = 3;

  int64 shared_items_count = 4;

  string expiry_time = 5;

  string owner = 6;

  enum Access {
    PUBLIC = 0;

    RESTRICTED = 1;
  }
}

message LinkShareMetadataRequest {
  string title = 1;

  Access access = 2;

  string expiry_time = 3;

  enum Access {
    PUBLIC = 0;

    RESTRICTED = 1;
  }
}

message Collections {
  CollectionId collection_id = 1;

  Repo:repositoryId repo:repository_id = 2;
}

message Assets {
  AssetId asset_id = 1;

  Repo:repositoryId repo:repository_id = 2;
}

message ShareItem {
  repeated Collections collections = 1;

  repeated Assets assets = 2;
}

message ShareToken {
  string token = 1;

  string expiry_time = 2;
}

message ShareItemsResponse {
  repeated Collections collections = 1;

  repeated Assets assets = 2;
}

message SearchTokenRequest {
  repeated Indexes indexes = 1;

  OperationType operation_type = 2;

  enum Indexes {
    ASSETS = 0;

    COLLECTIONS = 1;

    LINKSHARES = 2;

    QUERYSUGGESTIONS = 3;
  }

  enum OperationType {
    SEARCH = 0;

    ANALYTICS = 1;

    SETTINGS = 2;
  }
}

message SearchTokenResponse {
  string token = 1;

  string expiry_time = 2;

  string app_id = 3;
}

message ArchiveFormat {
  Value value = 1;

  enum Value {
    ZIP = 0;
  }
}

message CreateArchiveRequest {
  repeated Items items = 1;

  ArchiveFormat format = 2;

  string name_prefix = 3;
}

message ArchiveId {
  string value = 1;
}

message ArchiveMetadata {
  ArchiveId id = 1;

  ArchiveFormat format = 2;

  string submitted_by = 3;

  string submitted_date = 4;
}

message ArchiveStatus {
  string operation = 1;

  int32 status = 2;

  string description = 3;

  Data data = 4;

  repeated CommandResultMessage errors = 5;

  repeated CommandResultMessage warnings = 6;

  Operation operation = 7;

  Data data = 8;

  enum Operation {
    AEM.ASSETS.ARCHIVES.CREATEARCHIVE = 0;
  }
}

message CloudEvents_3rdParty {
  string id = 1;

  string source = 2;

  Specversion specversion = 3;

  string type = 4;

  Datacontenttype datacontenttype = 5;

  string dataschema = 6;

  string time = 7;

  Data data = 8;

  enum Specversion {
    "1.0" = 0;
  }

  enum Datacontenttype {
    APPLICATION/JSON = 0;
  }
}

message EventAssetMetadata {
  repeated Xcm:machineKeywords xcm:machine_keywords = 1;

  string pur:expiration_date = 2;

  string dc:title = 3;
}

message EventMetadata {
  AssetId asset_id = 1;

  RepositoryMetadata repository_metadata = 2;

  EventAssetMetadata asset_metadata = 3;
}

message IfNoneMatch {
  string if__none__match = 1;
}

message SEOName {
  string seo_name = 1;
}

message Format {
  Format format = 1;

  enum Format {
    GIF = 0;

    PNG = 1;

    PNG8 = 2;

    JPG = 3;

    PJPG = 4;

    BJPG = 5;

    WEBP = 6;

    WEBPLL = 7;

    WEBPLY = 8;
  }
}

message Rotate {
  Rotate rotate = 1;

  enum Rotate {
    90 = 0;

    180 = 1;

    270 = 2;
  }
}

message Crop {
  repeated string value = 1;

  repeated int64 value = 2;
}

message Crop {
  Crop crop = 1;
}

message Flip {
  Flip flip = 1;

  enum Flip {
    H = 0;

    V = 1;

    HV = 2;
  }
}

message Size {
  repeated int64 size = 1;
}

message Width {
  int64 width = 1;
}

message Height {
  int64 height = 1;
}

message Quality {
  int64 quality = 1;
}

message Smartcrop {
  string smartcrop = 1;
}

message RenditionName {
  string rendition_name = 1;
}

message Attachment {
  Attachment attachment = 1;

  enum Attachment {
    "TRUE" = 0;

    "1" = 1;

    "FALSE" = 2;

    "0" = 3;
  }
}

message AssetID {
  string asset_id = 1;
}

message XAdobeAcceptExperimental {
  X-Adobe-Accept-Experimental x__adobe__accept__experimental = 1;

  enum X-Adobe-Accept-Experimental {
    1 = 0;
  }
}

message IfMatch {
  string if__match = 1;
}

message LinkId {
  string link_id = 1;
}

message 400BadRequestapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  int64 status = 6;

  string title = 7;
}

message 401UnauthorizedapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  int64 status = 6;

  string title = 7;
}

message 403ForbiddenapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  int64 status = 6;

  string title = 7;
}

message 404NotFoundapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  int64 status = 6;

  string title = 7;
}

message 500InternalServerErrorapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  int64 status = 6;

  string title = 7;
}

message 412PreconditionFailedapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  string title = 6;

  int64 status = 7;
}

message 428PreconditionRequiredapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  string title = 6;

  int64 status = 7;
}

message 415UnsupportedMediaTypeapplicationProblem+json {
  string type = 1;

  string title = 2;

  int64 status = 3;

  string detail = 4;

  string request_id = 5;

  string title = 6;

  int64 status = 7;
}

//GetAssetSeoFormatParameters holds parameters to GetAssetSeoFormat
message GetAssetSeoFormatRequest {
  IfNoneMatch if__none__match = 1;

  AssetId asset_id = 2;

  SEOName seo_name = 3;

  Format format = 4;

  Rotate rotate = 5;

  Crop crop = 6;

  Flip flip = 7;

  Size size = 8;

  Width width = 9;

  Height height = 10;

  Quality quality = 11;

  Smartcrop smartcrop = 12;
}

//GetAssetParameters holds parameters to GetAsset
message GetAssetRequest {
  AssetId asset_id = 1;

  IfNoneMatch if__none__match = 2;
}

//VideoPlayerDeliveryParameters holds parameters to VideoPlayerDelivery
message VideoPlayerDeliveryRequest {
  AssetId asset_id = 1;
}

//GetAssetOriginalParameters holds parameters to GetAssetOriginal
message GetAssetOriginalRequest {
  AssetId asset_id = 1;

  SEOName seo_name = 2;

  IfNoneMatch if__none__match = 3;
}

//GetAssetRenditionParameters holds parameters to GetAssetRendition
message GetAssetRenditionRequest {
  AssetId asset_id = 1;

  RenditionName rendition_name = 2;

  SEOName seo_name = 3;

  IfNoneMatch if__none__match = 4;

  Attachment attachment = 5;
}

//GetAssetRenditionsParameters holds parameters to GetAssetRenditions
message GetAssetRenditionsRequest {
  AssetId asset_id = 1;

  IfNoneMatch if__none__match = 2;
}

message GetAssetRenditionsOK {
  AssetId asset_id = 1;

  string repo:name = 2;

  repeated Items items = 3;
}

//HeadAssetRenditionsParameters holds parameters to HeadAssetRenditions
message HeadAssetRenditionsRequest {
  AssetId asset_id = 1;
}

//VideoManifestDeliveryParameters holds parameters to VideoManifestDelivery
message VideoManifestDeliveryRequest {
  AssetId asset_id = 1;

  VideoManifestFormatParam format = 2;
}

//GetAssetMetadataParameters holds parameters to GetAssetMetadata
message GetAssetMetadataRequest {
  IfNoneMatch if__none__match = 1;
}

//GetAssetOriginalLegacyParameters holds parameters to GetAssetOriginalLegacy
message GetAssetOriginalLegacyRequest {
  AssetId asset_id = 1;

  SEOName seo_name = 2;

  IfNoneMatch if__none__match = 3;
}

//GetAllCollectionsParameters holds parameters to GetAllCollections
message GetAllCollectionsRequest {
  Limit limit = 1;

  Cursor cursor = 2;
}

message GetAllCollectionsOK {
  Cursor cursor = 1;

  repeated Items items = 2;
}

//CreateCollectionParameters holds parameters to CreateCollection
message CreateCollectionRequest {
  CollectionCreationRequest collection_creation_request = 1;
}

message CreateCollectionCreated {
  CollectionId id = 1;

  BaseRepositoryMetadata repository_metadata = 2;

  CollectionMetadata collection_metadata = 3;
}

//GetCollectionParameters holds parameters to GetCollection
message GetCollectionRequest {
  IfNoneMatch if__none__match = 1;

  CollectionId collection_id = 2;

  XAdobeAcceptExperimental x__adobe__accept__experimental = 3;
}

message GetCollectionOK {
  CollectionId id = 1;

  BaseRepositoryMetadata repository_metadata = 2;

  CollectionMetadata collection_metadata = 3;
}

//UpdateCollectionMetadataParameters holds parameters to UpdateCollectionMetadata
message UpdateCollectionMetadataRequest {
  CollectionId collection_id = 1;

  IfMatch if__match = 2;

  CollectionMetadataUpdateRequest _patch+json = 3;
}

//DeleteCollectionParameters holds parameters to DeleteCollection
message DeleteCollectionRequest {
  CollectionId collection_id = 1;

  IfMatch if__match = 2;
}

//HeadCollectionMetadataParameters holds parameters to HeadCollectionMetadata
message HeadCollectionMetadataRequest {
  CollectionId collection_id = 1;
}

//GetCollectionItemsParameters holds parameters to GetCollectionItems
message GetCollectionItemsRequest {
  IfNoneMatch if__none__match = 1;

  CollectionId collection_id = 2;

  Limit limit = 3;

  Cursor cursor = 4;

  XAdobeAcceptExperimental x__adobe__accept__experimental = 5;
}

message SelfItems {
  CollectionId id = 1;

  BaseRepositoryMetadata repository_metadata = 2;

  CollectionMetadata collection_metadata = 3;
}

message Self {
  SelfItems items = 1;
}

message GetCollectionItemsOK {
  Cursor cursor = 1;

  Self self = 2;

  repeated Items items = 3;
}

message UpdateCollectionItemsRequestBody {
  Op op = 1;

  string id = 2;

  Repo:repositoryId repo:repository_id = 3;

  Type type = 4;

  enum Op {
    ADD = 0;

    REMOVE = 1;
  }

  enum Type {
    ASSET = 0;

    COLLECTION = 1;
  }
}

//UpdateCollectionItemsParameters holds parameters to UpdateCollectionItems
message UpdateCollectionItemsRequest {
  CollectionId collection_id = 1;

  IfMatch if__match = 2;

  UpdateCollectionItemsRequestBody update_collection_items_request_body = 3;
}

//HeadCollectionParameters holds parameters to HeadCollection
message HeadCollectionRequest {
  CollectionId collection_id = 1;

  Limit limit = 2;

  Cursor cursor = 3;
}

//GetCollectionStatusParameters holds parameters to GetCollectionStatus
message GetCollectionStatusRequest {
  string job_id = 1;

  XAdobeAcceptExperimental x__adobe__accept__experimental = 2;
}

message GetCollectionStatusOK {
  string operation = 1;

  int32 status = 2;

  string description = 3;

  Data data = 4;

  repeated CommandResultMessage errors = 5;

  repeated CommandResultMessage warnings = 6;

  Operation operation = 7;

  Data data = 8;

  enum Operation {
    AEM.ASSETS.COLLECTIONS.CREATECOLLECTION = 0;

    AEM.ASSETS.COLLECTIONS.DELETECOLLECTION = 1;

    AEM.ASSETS.COLLECTIONS.ADDTOCOLLECTION = 2;

    AEM.ASSETS.COLLECTIONS.REMOVEFROMCOLLECTION = 3;
  }
}

//CreateArchiveParameters holds parameters to CreateArchive
message CreateArchiveRequest {
  CreateArchiveRequest create_archive_request = 1;
}

message CreateArchiveAccepted {
  ArchiveId id = 1;

  ArchiveFormat format = 2;

  string submitted_by = 3;

  string submitted_date = 4;
}

//GetArchiveStatusParameters holds parameters to GetArchiveStatus
message GetArchiveStatusRequest {
  ArchiveId archive_id = 1;
}

message GetArchiveStatusOK {
  string operation = 1;

  int32 status = 2;

  string description = 3;

  Data data = 4;

  repeated CommandResultMessage errors = 5;

  repeated CommandResultMessage warnings = 6;

  Operation operation = 7;

  Data data = 8;

  enum Operation {
    AEM.ASSETS.ARCHIVES.CREATEARCHIVE = 0;
  }
}

//DownloadArchiveParameters holds parameters to DownloadArchive
message DownloadArchiveRequest {
  ArchiveId archive_id = 1;

  string file_name = 2;

  string token = 3;
}

service Assets_delivery {
  rpc GetAssetSeoFormat ( GetAssetSeoFormatRequest ) returns ( google.protobuf.Empty ) {
    option (google.api.http) = { get:"/{assetId}/as/{seoName}.{format}"  };
  }

  rpc GetAsset ( GetAssetRequest ) returns ( google.protobuf.Empty ) {
    option (google.api.http) = { get:"/{assetId}"  };
  }

  rpc VideoPlayerDelivery ( VideoPlayerDeliveryRequest ) returns ( PlayerOutput ) {
    option (google.api.http) = { get:"/{assetId}/play"  };
  }

  rpc GetAssetOriginal ( GetAssetOriginalRequest ) returns ( google.protobuf.Empty ) {
    option (google.api.http) = { get:"/{assetId}/original/as/{seoName}"  };
  }

  rpc GetAssetRendition ( GetAssetRenditionRequest ) returns ( google.protobuf.Empty ) {
    option (google.api.http) = { get:"/{assetId}/renditions/{renditionName}/as/{seoName}"  };
  }

  rpc GetAssetRenditions ( GetAssetRenditionsRequest ) returns ( GetAssetRenditionsOK ) {
    option (google.api.http) = { get:"/{assetId}/renditions"  };
  }

  rpc HeadAssetRenditions ( HeadAssetRenditionsRequest ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = {  };
  }

  rpc VideoManifestDelivery ( VideoManifestDeliveryRequest ) returns ( VideoManifestOutput ) {
    option (google.api.http) = { get:"/{assetId}/manifest.{format}"  };
  }

  rpc GetAssetMetadata ( GetAssetMetadataRequest ) returns ( Metadata ) {
    option (google.api.http) = { get:"/{assetId}/metadata"  };
  }

  rpc HeadAssetMetadata ( google.protobuf.Empty ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = {  };
  }

  rpc GetAssetOriginalLegacy ( GetAssetOriginalLegacyRequest ) returns ( google.protobuf.Empty ) {
    option (google.api.http) = { get:"/deliver/{assetId}/{seoName}"  };
  }

  rpc GetAllCollections ( GetAllCollectionsRequest ) returns ( GetAllCollectionsOK ) {
    option (google.api.http) = { get:"/collections"  };
  }

  rpc CreateCollection ( CreateCollectionRequest ) returns ( CreateCollectionCreated ) {
    option (google.api.http) = { post:"/collections" body:"collection_creation_request"  };
  }

  rpc GetCollection ( GetCollectionRequest ) returns ( GetCollectionOK ) {
    option (google.api.http) = { get:"/collections/{collectionId}"  };
  }

  rpc UpdateCollectionMetadata ( UpdateCollectionMetadataRequest ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = { post:"/collections/{collectionId}" body:"_patch+json"  };
  }

  rpc DeleteCollection ( DeleteCollectionRequest ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = { delete:"/collections/{collectionId}"  };
  }

  rpc HeadCollectionMetadata ( HeadCollectionMetadataRequest ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = {  };
  }

  rpc GetCollectionItems ( GetCollectionItemsRequest ) returns ( GetCollectionItemsOK ) {
    option (google.api.http) = { get:"/collections/{collectionId}/items"  };
  }

  rpc UpdateCollectionItems ( UpdateCollectionItemsRequest ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = { post:"/collections/{collectionId}/items" body:"update_collection_items_request_body"  };
  }

  rpc HeadCollection ( HeadCollectionRequest ) returns ( 400BadRequestapplicationProblem+json ) {
    option (google.api.http) = {  };
  }

  rpc GetCollectionStatus ( GetCollectionStatusRequest ) returns ( GetCollectionStatusOK ) {
    option (google.api.http) = { get:"/collections/jobs/{jobId}/status"  };
  }

  rpc CreateArchive ( CreateArchiveRequest ) returns ( CreateArchiveAccepted ) {
    option (google.api.http) = { post:"/archives" body:"create_archive_request"  };
  }

  rpc GetArchiveStatus ( GetArchiveStatusRequest ) returns ( GetArchiveStatusOK ) {
    option (google.api.http) = { get:"/archives/{archiveId}/status"  };
  }

  rpc DownloadArchive ( DownloadArchiveRequest ) returns ( 404NotFoundapplicationProblem+json ) {
    option (google.api.http) = { get:"/archives/{archiveId}/files/{fileName}"  };
  }
}

