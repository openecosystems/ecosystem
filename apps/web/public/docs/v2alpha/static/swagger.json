{
    "openapi": "3.0.3",
    "info": {
        "title": "Assets Delivery API",
        "version": "2024.11"
    },
    "servers": [
        {
            "url": "https://{bucket}.adobeaemcloud.com/adobe/assets",
            "variables": {
                "bucket": {
                    "default": "",
                    "description": "The bucket to use for this request, e.g. author-p12345-e123456"
                }
            }
        }
    ],
    "security": [
        {
            "bearerAuth": []
        }
    ],
    "tags": [
        {
            "name": "Assets",
            "description": "APIs for working with asset binaries"
        },
        {
            "name": "Metadata",
            "description": "APIs for working with asset metadata"
        },
        {
            "name": "Videos",
            "description": "APIs for working with videos"
        },
        {
            "name": "Collections",
            "description": "APIs for working with asset collections"
        },
        {
            "name": "Link Shares",
            "description": "APIs for working with assets link shares"
        },
        {
            "name": "Events",
            "description": "Events generated by assets delivery tier"
        },
        {
            "name": "Archives",
            "description": "APIs for generating archives containing binaries (one or more assets, with one or more renditions) in one of the supported archival formats (e.g., `zip`)."
        }
    ],
    "paths": {
        "/{assetId}/as/{seoName}.{format}": {
            "get": {
                "summary": "Returns web-optimized binary representation of the asset in the requested output format",
                "description": "The `seo-name` doesn't have a functional impact on the image, but is provided to allow for adding SEO value to\nasset URLs.  The `assetId` is an opaque string defined by the content repository that can be used to target\nthe asset resource.\n\nIn the URL construction, an SEO name and an output image format must be provided.\nAdditionally, following transforms can optionally be specified as query parameters:\n  * `rotate`\n  * `crop`\n  * `flip`\n  * `size`\n  * `preferwebp`\n  * `height`\n  * `width`\n  * `quality`\n  * `smartcrop`\n\nThese are applied the order mentioned above, irrespective of where they appear in the URL.\nSyntax and examples for supported parameters is captured elsewhere in this document.\n",
                "operationId": "getAssetSeoFormat",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    },
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SEOName"
                    },
                    {
                        "$ref": "#/components/parameters/Format"
                    },
                    {
                        "$ref": "#/components/parameters/Rotate"
                    },
                    {
                        "$ref": "#/components/parameters/Crop"
                    },
                    {
                        "$ref": "#/components/parameters/Flip"
                    },
                    {
                        "$ref": "#/components/parameters/Size"
                    },
                    {
                        "$ref": "#/components/parameters/Width"
                    },
                    {
                        "$ref": "#/components/parameters/Height"
                    },
                    {
                        "$ref": "#/components/parameters/Quality"
                    },
                    {
                        "$ref": "#/components/parameters/Smartcrop"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Web-optimized version of the asset",
                        "content": {
                            "image/gif": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/png": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/jpeg": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/webp": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/svg+xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentDisposition"
                                }
                            },
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}": {
            "get": {
                "x-delivery": true,
                "summary": "Returns a web-optimized binary representation of the asset",
                "description": "This is a convenience API for `/adobe/assets/{assetId}/as/{seoname}.{format}?...` that applies following defaults:\n  * `format` => `jpeg`/`webp` (auto-determined via server-driven-content-negotiation, based on agent-declared capabilities)\n  * `quality` => `65`\n  * `width` => `1024`\n",
                "operationId": "getAsset",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Web-optimized version of the asset",
                        "content": {
                            "image/jpeg": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/webp": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/svg+xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentDisposition"
                                }
                            },
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}/play": {
            "get": {
                "summary": "Delivers the Player container for specified Video asset.",
                "description": "The Delivery API accepts an assetId, and if the ID corresponds to a video asset, delivers Player for video streaming.\nThe asset ID is an opaque string defined by the content repository. The entity composing the Delivery URLs must know them apriori.\n",
                "operationId": "videoPlayerDelivery",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Videos"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response Video in Player.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerOutput"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}/original/as/{seoName}": {
            "get": {
                "summary": "Returns the originally uploaded binary for the asset",
                "description": "The Original Asset Delivery API accepts an asset ID corresponding to the asset and delivers the bitstream as-is (as it was uploaded). This is a convenience API for `/adobe/assets/{assetId}/renditions/{renditionName}/as/{seoname}` with `renditionName` defaulting to `original`.",
                "operationId": "getAssetOriginal",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SEOName"
                    },
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Original binary of the asset",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentDisposition"
                                }
                            },
                            "Content-Type": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentType"
                                }
                            },
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}/renditions/{renditionName}/as/{seoName}": {
            "get": {
                "summary": "Returns a pre-generated (on AEM Assets authoring environment) rendition of the asset",
                "description": "The Asset Rendition Delivery API accepts an asset ID corresponding to the asset and the rendition name, and delivers the selected asset's specified rendition's bitstream as-is (as present on AEM Assets authoring environment).",
                "operationId": "getAssetRendition",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/RenditionName"
                    },
                    {
                        "$ref": "#/components/parameters/SEOName"
                    },
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/components/parameters/Attachment"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Binary of the specified rendition for the selected asset",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentDisposition"
                                }
                            },
                            "Content-Type": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentType"
                                }
                            },
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}/renditions": {
            "get": {
                "summary": "Returns a list of static renditions of an asset",
                "description": "The List Renditions API accepts an asset ID and returns the static renditions associated with the asset. A success response includes list of available renditions and their attributes.",
                "operationId": "getAssetRenditions",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available renditions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "assetId": {
                                            "$ref": "#/components/schemas/AssetId"
                                        },
                                        "repo:name": {
                                            "type": "string",
                                            "description": "The name of the asset in the repository"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/AssetRenditionsItem"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": ["assetId", "items", "repo:name"]
                                }
                            }
                        },
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            },
            "head": {
                "summary": "Head request for list of static renditions of an asset",
                "description": "Returns headers, including an ETag for the specified asset, which can be a lighter method of checking for the change in list of static renditions, without sending a full GET request.",
                "operationId": "headAssetRenditions",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}/manifest.{format}": {
            "get": {
                "summary": "Delivers the playback manifests for specified Video asset in the selected output format.",
                "description": "The Delivery API accepts an asset ID, and if the ID corresponds to a video asset, delivers the playback manifest in the requested protocol.\nThe asset ID is an opaque string defined by the content repository. The entity composing the Delivery URLs must know them apriori.\nIf the asset is not a video asset, client gets a 404 response.\n",
                "tags": ["Videos"],
                "operationId": "videoManifestDelivery",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "in": "path",
                        "name": "format",
                        "description": "Desired Playback manifest format",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/VideoManifestFormatParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response Video Manifests in selected format",
                        "content": {
                            "application/vnd.apple.mpegurl": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoManifestOutput"
                                }
                            },
                            "application/dash+xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoManifestOutput"
                                }
                            }
                        },
                        "headers": {
                            "ETag": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/{assetId}/metadata": {
            "parameters": [
                {
                    "$ref": "#/components/parameters/AssetID"
                }
            ],
            "head": {
                "summary": "Head request for asset metadata",
                "description": "Returns headers, including an ETag for the specified asset metadata, which can be a lighter method of checking for the existence of, or validating a cached version of an asset's metadata without sending a full GET request.",
                "operationId": "headAssetMetadata",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Metadata"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            },
            "get": {
                "summary": "Delivers the specified asset's metadata",
                "description": "Asset metadata contains those metadata values that have been extracted from the asset, configured by the user, or derived from the asset during asset processing.  Repository metadata contains metadata properties that are set and maintained by the repository during system operations.",
                "operationId": "getAssetMetadata",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Metadata"],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metadata for the specified asset",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metadata"
                                }
                            }
                        },
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/deliver/{assetId}/{seoName}": {
            "get": {
                "deprecated": true,
                "summary": "Returns the originally uploaded binary for the asset.",
                "description": "The Original Asset Delivery API accepts an asset ID corresponding to the asset and delivers the\nbitstream as-is (as it was uploaded). \n\nThis API is deprecated, please use `/adobe/assets/{assetId}/original/as/{seo-name}`\n",
                "operationId": "getAssetOriginalLegacy",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "tags": ["Assets"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AssetId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/SEOName"
                    },
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Original binary of the asset",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentDisposition"
                                }
                            },
                            "Content-Type": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContentType"
                                }
                            },
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/collections": {
            "post": {
                "summary": "Create a collection",
                "description": "Creates a collection that represents a group of Asset(s) and/or Collection(s).\n",
                "operationId": "createCollection",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionCreationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns information on the recently created collection, including its metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/CollectionMetadata"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    }
                }
            },
            "get": {
                "summary": "List all Collections",
                "description": "Retrieves all the Collections available in the repository.\n",
                "operationId": "getAllCollections",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "$ref": "#/components/schemas/Limit"
                        }
                    },
                    {
                        "in": "query",
                        "name": "cursor",
                        "schema": {
                            "$ref": "#/components/schemas/Cursor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collections retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "cursor": {
                                            "$ref": "#/components/schemas/Cursor"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/CollectionMetadata"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    }
                }
            }
        },
        "/collections/{collectionId}": {
            "get": {
                "summary": "Retrieve a Collection's Metadata",
                "description": "Retrieves collection metadata for a given collection id along with Etag representing the current state of the collection.\n",
                "operationId": "getCollection",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/X-Adobe-Accept-Experimental"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection Metadata Retrieved successfully",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/CollectionMetadata"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            },
            "head": {
                "summary": "Head request for a collection metadata",
                "description": "Returns headers, including an ETag for the specified collection, which can be a lighter method of checking for the existence of, or validating a cached version of an collection without sending a full GET request.",
                "operationId": "headCollectionMetadata",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    }
                ],
                "tags": ["Collections"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            },
            "delete": {
                "summary": "Delete a Collection",
                "description": "Deletes a collection for a given collection id. If the delete operation requires more than a few\nseconds to complete, a status link with the jobId is returned in the response header that can be used to\ncheck the status.\n",
                "operationId": "deleteCollection",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/If-Match"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        }
                    },
                    "204": {
                        "description": "Collection deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    },
                    "412": {
                        "$ref": "#/components/responses/412_PreconditionFailed"
                    },
                    "428": {
                        "$ref": "#/components/responses/428_PreconditionRequired"
                    }
                }
            },
            "post": {
                "summary": "Update a collection's metadata",
                "description": "Updates the metadata for a given collection id.\n",
                "operationId": "updateCollectionMetadata",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "ID of the Collection",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/If-Match"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CollectionMetadataUpdateRequest"
                            },
                            "examples": {
                                "UpdateMetadataOperation": {
                                    "value": {
                                        "title": "New Title",
                                        "description": "New Description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    },
                    "412": {
                        "$ref": "#/components/responses/412_PreconditionFailed"
                    },
                    "428": {
                        "$ref": "#/components/responses/428_PreconditionRequired"
                    }
                }
            }
        },
        "/collections/{collectionId}/items": {
            "get": {
                "summary": "Get collection items",
                "description": "Retrieve a paginated list of the items in the specified collection.\n",
                "operationId": "getCollectionItems",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/If-None-Match"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "$ref": "#/components/schemas/Limit"
                        }
                    },
                    {
                        "in": "query",
                        "name": "cursor",
                        "schema": {
                            "$ref": "#/components/schemas/Cursor"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/X-Adobe-Accept-Experimental"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection Retrieved successfully",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "cursor": {
                                            "$ref": "#/components/schemas/Cursor"
                                        },
                                        "self": {
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/CollectionMetadata"
                                                    }
                                                ]
                                            }
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/CollectionItem"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "304": {
                        "$ref": "#/components/responses/304_NotModified"
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            },
            "head": {
                "summary": "Head request for collection items",
                "description": "Returns headers, including an ETag for the specified assets collection, which can be a lighter method of checking for the existence of, or validating a cached version of an collection without sending a full GET request.",
                "operationId": "headCollection",
                "security": [
                    {},
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "$ref": "#/components/schemas/Limit"
                        }
                    },
                    {
                        "in": "query",
                        "name": "cursor",
                        "schema": {
                            "$ref": "#/components/schemas/Cursor"
                        }
                    }
                ],
                "tags": ["Collections"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            },
            "post": {
                "summary": "Update collection items",
                "description": "If the update operation requires more than a few seconds to complete, response includes a `Location` header which contains the URL to poll for status of this operation.\n",
                "operationId": "updateCollectionItems",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "collectionId",
                        "in": "path",
                        "required": true,
                        "description": "ID of the Collection",
                        "schema": {
                            "$ref": "#/components/schemas/CollectionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/If-Match"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/CollectionOperation"
                                        }
                                    ]
                                }
                            },
                            "examples": {
                                "MultipleOperations": {
                                    "value": [
                                        {
                                            "op": "remove",
                                            "id": "urn:aaid:aem:fc472a53-4ef1-4fdb-8ebb-f9b1ee75985w",
                                            "type": "asset"
                                        },
                                        {
                                            "op": "add",
                                            "id": "urn:aaid:aem:fc472a53-4ef1-4fdb-8ebb-f9b1ee75985w",
                                            "type": "asset"
                                        }
                                    ]
                                },
                                "AddOperation": {
                                    "value": [
                                        {
                                            "op": "add",
                                            "id": "urn:aaid:aem:fc472a53-4ef1-4fdb-8ebb-f9b1ee75985w",
                                            "type": "asset"
                                        }
                                    ]
                                },
                                "RemoveOperation": {
                                    "value": [
                                        {
                                            "op": "remove",
                                            "id": "urn:aaid:aem:fc472a53-4ef1-4fdb-8ebb-f9b1ee75985w",
                                            "type": "asset"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "headers": {
                            "ETag": {
                                "$ref": "#/components/headers/ETag"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    },
                    "412": {
                        "$ref": "#/components/responses/412_PreconditionFailed"
                    },
                    "428": {
                        "$ref": "#/components/responses/428_PreconditionRequired"
                    }
                }
            }
        },
        "/collections/jobs/{jobId}/status": {
            "get": {
                "summary": "Retrieve a collection's job async status",
                "description": "Retrieves the current job's status for a collection.\n",
                "operationId": "getCollectionStatus",
                "tags": ["Collections"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/X-Adobe-Accept-Experimental"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of a task being processed",
                        "headers": {
                            "Retry-After": {
                                "$ref": "#/components/headers/Retry-After"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/CollectionJobStatus"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    }
                }
            }
        },
        "/archives": {
            "post": {
                "summary": "Archival Request API",
                "description": "Request creation of an archive for the asset references specified in the request payload. The response contains an identifier and metadata pertaining to the archive request.\nThe result of the operation will be one or more archives. The API may use various factors to determine the number of archives required to complete the operation. For example, very large archive request might be split into multiple files.\nConsumers of this API should use the response `Location` header to poll for the status of the archive creation request. The polling interval should be determined by the `Retry-After` header value.\nInvalid assets specified for inclusion in the archive will not fail the overall creation process. Instead, the API will create a archive containing the assets it could find, with invalid asset references appearing as warnings in the final status response.\n",
                "operationId": "createArchive",
                "tags": ["Archives"],
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateArchiveRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ArchiveMetadata"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400_BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "415": {
                        "$ref": "#/components/responses/415_UnsupportedMediaType"
                    },
                    "500": {
                        "$ref": "#/components/responses/500_InternalServerError"
                    }
                }
            }
        },
        "/archives/{archiveId}/status": {
            "get": {
                "summary": "Archival Request Status API",
                "description": "Get the status of the archive creation request\n",
                "operationId": "getArchiveStatus",
                "tags": ["Archives"],
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "archiveId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ArchiveId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "headers": {
                            "Retry-After": {
                                "$ref": "#/components/headers/Retry-After"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ArchiveStatus"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/401_Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403_Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500_InternalServerError"
                    }
                }
            }
        },
        "/archives/{archiveId}/files/{fileName}": {
            "get": {
                "summary": "Archive File Download API",
                "description": "For a given `archiveId`, one or more archive files can be created.\nArchival Request Status API provides the list of archive files available for the `archiveId`. This API enables download of any/all of those files.\n",
                "operationId": "downloadArchive",
                "tags": ["Archives"],
                "security": [
                    {},
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "archiveId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ArchiveId"
                        }
                    },
                    {
                        "name": "fileName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the archive file to retrieve. Archive files available for download against this `archiveId` can be retrieved through the Archival Request Status API.",
                            "example": "assets.zip"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "a time limited token allowing anonymous retrieval of the archive file. The token will be included in the URLs presented in `Archival Request Status API` response for requests that have their status as `COMPLETED`.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "headers": {
                            "Location": {
                                "$ref": "#/components/headers/Location"
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/404_NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500_InternalServerError"
                    }
                }
            }
        }
    },
    "x-webhooks": {
        "asset_removed_from_delivery": {
            "post": {
                "operationId": "asset_removed_from_delivery",
                "summary": "Asset delivery disabled event",
                "description": "Event triggered when an asset can no longer be rendered through new DM APIs. This is used by applications when processing of asset(s) in delivery\ntier takes a long time, for example, video assets or assets going through any ML pipeline.\n",
                "tags": ["Events"],
                "security": [{}],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CloudEvents_3rdParty"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "object",
                                                "properties": {
                                                    "assetId": {
                                                        "$ref": "#/components/schemas/AssetId"
                                                    }
                                                }
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": ["aem.assets.asset.removed_from_delivery"]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Asset delivery disabled event data is received successfully\n"
                    }
                }
            }
        },
        "asset_ready_for_delivery": {
            "post": {
                "operationId": "asset_ready_for_delivery",
                "summary": "Asset delivery ready event",
                "description": "Event triggered when an asset is ready for delivery through new DM APIs. This is used by applications when processing of asset(s) in delivery tier\ntakes a long time, for example, video assets or assets going through any ML pipeline.\n",
                "tags": ["Events"],
                "security": [{}],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CloudEvents_3rdParty"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "$ref": "#/components/schemas/EventMetadata"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": ["aem.assets.asset.ready_for_delivery"]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Asset delivery ready event data is received successfully\n"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "X-Api-Key"
            },
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "parameters": {
            "If-None-Match": {
                "name": "If-None-Match",
                "description": "The `If-None-Match` header field makes the request method conditional on a recipient cache or origin server either\nnot having any current representation of the target resource, when the field value is \"*\", or having a selected\nrepresentation with an entity tag that does not match any of those listed in the field value.\n\nFor more details, please head over to [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-if-none-match).\n",
                "in": "header",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "SEOName": {
                "in": "path",
                "name": "seoName",
                "description": "any url-encoded or alphanumeric, non-whitespace set of characters. may contain hyphens and dots",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "([%.\\w-]+)"
                },
                "examples": {
                    "seo-name": {
                        "value": "banner"
                    }
                }
            },
            "Format": {
                "in": "path",
                "name": "format",
                "description": "output format",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": ["gif", "png", "png8", "jpg", "pjpg", "bjpg", "webp", "webpll", "webply"],
                    "example": "jpg"
                }
            },
            "Rotate": {
                "in": "query",
                "name": "rotate",
                "description": "rotation. can be either of '90', '180', '270'",
                "schema": {
                    "type": "integer",
                    "enum": [90, 180, 270],
                    "example": 90
                }
            },
            "Crop": {
                "in": "query",
                "name": "crop",
                "description": "can be one of:\n* four comma-separated values, each a number with up to two digits after the decimal point, followed by `p`: specify relative (percent) dimensions for the crop.\n  First two specify the origin (top, left) of the desired cropped region as percentages of width and height, respectively. Last two specify the size of the cropped region relative to original dimensions of the asset.\n  A valid crop region MUST meet both of the following constraints:\n      * `<x-origin> + <crop-region-width>  <= 100`\n      * `<y-origin> + <crop-region-height> <=100`\n  Requests which don't meet aforementioned constraints will fail.\n* four comma-separated integers: **Deprecated: Use relative crop values instead**\n",
                "explode": false,
                "schema": {
                    "oneOf": [
                        {
                            "type": "array",
                            "minItems": 4,
                            "maxItems": 4,
                            "items": {
                                "type": "string",
                                "pattern": "\\d+((\\.\\d+)?p){0,1}"
                            }
                        },
                        {
                            "type": "array",
                            "minItems": 4,
                            "maxItems": 4,
                            "items": {
                                "type": "integer"
                            },
                            "deprecated": true
                        }
                    ]
                },
                "examples": {
                    "sample-relative-crop": {
                        "value": ["10p", "10p", "50p", "50p"]
                    }
                }
            },
            "Flip": {
                "in": "query",
                "name": "flip",
                "description": "horizontal or vertical flipping",
                "schema": {
                    "type": "string",
                    "enum": ["h", "v", "hv"],
                    "example": "h"
                }
            },
            "Size": {
                "in": "query",
                "name": "size",
                "description": "comma separated integers specifying width and height of output",
                "explode": false,
                "schema": {
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                        "type": "integer",
                        "minimum": 1
                    }
                },
                "examples": {
                    "sample-size": {
                        "value": [400, 200]
                    }
                }
            },
            "Width": {
                "in": "query",
                "name": "width",
                "description": "'width' (horizontal dimension) of the output image.\n\nIf 'height' is also specified, then horizontal dimension of the output may smaller than requested to preserve original aspect ratio.\n",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 400
                }
            },
            "Height": {
                "in": "query",
                "name": "height",
                "description": "'height' (vertical dimension) of the output image.\n\nIf 'width' is also specified, then vertical dimension of the output may smaller than requested to preserve original aspect ratio.\n",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 200
                }
            },
            "Quality": {
                "in": "query",
                "name": "quality",
                "description": "\\%age quality parameter of the output image",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "example": 75
                }
            },
            "Smartcrop": {
                "in": "query",
                "name": "smartcrop",
                "description": "Identifier of the `smartcrop` to be applied while delivering the asset. Specifying an unresolvable `smartcrop` identifier will lead to 400 responses.",
                "schema": {
                    "type": "string",
                    "example": "QHD"
                }
            },
            "RenditionName": {
                "in": "path",
                "name": "renditionName",
                "description": "any url-encoded or alphanumeric, non-whitespace set of characters that need to match one of the renditions uploaded/created for the specified asset. may contain hyphens and dots",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "([%.\\w-]+)"
                },
                "examples": {
                    "seo-name": {
                        "value": "banner"
                    }
                }
            },
            "Attachment": {
                "in": "query",
                "name": "attachment",
                "description": "use content-disposition header to force download prompt, if true",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": ["true", "1", "false", "0"],
                    "example": "true"
                }
            },
            "AssetID": {
                "in": "path",
                "name": "assetId",
                "description": "ID of the asset to access",
                "required": true,
                "schema": {
                    "type": "string",
                    "minLength": 1
                },
                "examples": {
                    "sample-asset-id": {
                        "value": "urn:aaid:aem:1a034bee-ebda-4787-bad3-f924d0772b75"
                    }
                }
            },
            "X-Adobe-Accept-Experimental": {
                "name": "X-Adobe-Accept-Experimental",
                "description": "The `X-Adobe-Accept-Experimental` request header is required when a client wants to opt-in into using an experimental\nAPI endpoint. Not providing this header to an endpoint that requires it will make the server answer with a 400 status\ncode.\n",
                "in": "header",
                "required": true,
                "schema": {
                    "type": "integer",
                    "enum": [1]
                }
            },
            "If-Match": {
                "name": "If-Match",
                "description": "The `If-Match` header field makes the request method conditional on the recipient origin server either having at least\none current representation of the target resource, when the field value is \"*\", or having a current representation of\nthe target resource that has an entity tag matching a member of the list of entity tags provided in the field value.\n\nFor more details, please head over to [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-if-match).\n",
                "in": "header",
                "required": true,
                "schema": {
                    "type": "string",
                    "description": "The value of an `ETag` received for a previous `HEAD` or `GET` request to this resource."
                }
            },
            "LinkId": {
                "in": "path",
                "name": "linkId",
                "description": "ID of the link to access",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "examples": {
                    "sample-link-id": {
                        "value": "6ba7b8109dad11d180b40002a5d5c51b62xsa4uT0qO_hvyym329pOYFasfPffVM9E-IPgs9KM"
                    }
                }
            }
        },
        "schemas": {
            "AssetId": {
                "type": "string",
                "description": "ID of the asset",
                "minLength": 1,
                "example": "urn:aaid:aem:1a034bee-ebda-4787-bad3-f924d0772b75"
            },
            "FileContentDisposition": {
                "type": "string",
                "description": "filename will be the seo-name set in request path, along with the extension of the delivered file",
                "example": "inline; filename=\"name.pdf\""
            },
            "ProblemDetails": {
                "description": "A [RFC7807](https://www.rfc-editor.org/rfc/rfc7807) JSON Problem Details Object",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A URI reference [RFC3986](https://www.rfc-editor.org/rfc/rfc3986) to a URL, which, when dereferenced, provides human readable documentation for the problem type.  The problem type may be equivalent to the `status` or may be a \"sub-type\".  This URI is not intended to be parsed by clients; rather it should be treated as an opaque string that uniquely represents the error condition as-is.",
                        "minLength": 1
                    },
                    "title": {
                        "type": "string",
                        "description": "A short, human-readable summary of the problem type.",
                        "minLength": 1
                    },
                    "status": {
                        "type": "integer",
                        "description": "The HTTP status code ([RFC9110], Section 15) generated by the origin server for this occurrence of the problem.",
                        "minLength": 1
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem.",
                        "minLength": 1
                    },
                    "requestId": {
                        "type": "string",
                        "description": "A unique identifier that is assigned to the request, either by the API caller or by the service itself.\n",
                        "minLength": 1
                    }
                },
                "required": ["type", "title", "status", "detail"]
            },
            "PlayerOutput": {
                "type": "string"
            },
            "FileContentType": {
                "type": "string",
                "description": "the content type of the delivered binary",
                "example": "application/pdf, image/jpg"
            },
            "AssetRenditionsItem": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "name of the rendition",
                        "minLength": 1,
                        "example": "2023-lexus-rx-450hl.jpg"
                    },
                    "format": {
                        "type": "string",
                        "description": "mime type of the rendition",
                        "minLength": 1,
                        "example": "image/jpeg"
                    },
                    "size": {
                        "type": "integer",
                        "description": "size of the rendition in bytes",
                        "minimum": 1
                    },
                    "dimensions": {
                        "type": "object",
                        "properties": {
                            "width": {
                                "type": "integer",
                                "format": "int32",
                                "minimum": 1,
                                "description": "Width of the rendition in pixels"
                            },
                            "height": {
                                "type": "integer",
                                "format": "int32",
                                "minimum": 1,
                                "description": "Height of the rendition in pixels"
                            }
                        }
                    }
                },
                "required": ["name", "size", "format", "dimensions"]
            },
            "VideoManifestFormatParam": {
                "type": "string",
                "enum": ["m3u8", "mpd"],
                "example": "m3u8"
            },
            "VideoManifestOutput": {
                "type": "string"
            },
            "RepositoryId": {
                "description": "The ID of the repository that contains the asset, folder or collection",
                "type": "string",
                "minLength": 1,
                "example": "author-p12345-e12345.adobeaemcloud.com"
            },
            "RepositoryMetadata": {
                "type": "object",
                "description": "Read-only metadata properties that are maintained by the repository for the asset.",
                "properties": {
                    "aem:assetState": {
                        "type": "string",
                        "description": "The processing state of the asset",
                        "readOnly": true
                    },
                    "aem:checkedOutBy": {
                        "type": "string",
                        "description": "If the asset has been checked out, the user who has done so",
                        "readOnly": true
                    },
                    "dam:sha1": {
                        "type": "string",
                        "description": "A SHA1 hash of the asset's binary content",
                        "readOnly": true
                    },
                    "dc:format": {
                        "type": "string",
                        "description": "The file format of the asset",
                        "readOnly": true
                    },
                    "repo:createDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The created date of the asset as maintained by the content repository",
                        "readOnly": true
                    },
                    "repo:createdBy": {
                        "type": "string",
                        "description": "The user that created the asset in the content repository",
                        "readOnly": true
                    },
                    "repo:modifiedBy": {
                        "type": "string",
                        "description": "The user that last modified the asset in the content repository",
                        "readOnly": true
                    },
                    "repo:modifyDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The last modified date of the asset as maintained by the content repository",
                        "readOnly": true
                    },
                    "repo:name": {
                        "type": "string",
                        "description": "The name of the asset in the repository",
                        "readOnly": true
                    },
                    "repo:path": {
                        "type": "string",
                        "description": "The path to the asset, if applicable, in the repository",
                        "readOnly": true
                    },
                    "repo:size": {
                        "type": "integer",
                        "description": "The size, in bytes, of the asset binary",
                        "readOnly": true
                    },
                    "repo:version": {
                        "type": "string",
                        "description": "A UUID that refers to the current repository version of the asset",
                        "readOnly": true
                    },
                    "tiff:imageLength": {
                        "type": "integer",
                        "description": "The number of rows of pixels in the image.",
                        "readOnly": true
                    },
                    "tiff:imageWidth": {
                        "type": "integer",
                        "description": "The number of columns in the image, i.e., the number of pixels per row.",
                        "readOnly": true
                    },
                    "repo:repositoryId": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepositoryId"
                            },
                            {
                                "readOnly": true
                            }
                        ]
                    },
                    "repo:ancestors": {
                        "type": "array",
                        "description": "Absolute Ancestor Asset ID List that starts with id of the root directory of the Repository and ends with id of the immediate parent of the Asset.",
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "repo:state": {
                        "type": "string",
                        "description": "Indicates the state change of an asset. This property is an enumeration that can have values - ACTIVE, DISCARDED, DISCARDED_PARENT.",
                        "readOnly": true
                    },
                    "aem:published": {
                        "type": "string",
                        "description": "The last published date of the asset as maintained by the content repository",
                        "readOnly": true
                    },
                    "repo:assetClass": {
                        "type": "string",
                        "description": "Asset type",
                        "enum": ["file", "directory", "collection"],
                        "readOnly": true
                    }
                },
                "additionalProperties": true,
                "example": {
                    "aem:assetState": "processed",
                    "aem:checkedOutBy": "testuser@test.com",
                    "dam:sha1": "8601cc48d27d85ae274c954286edfde34b907e12",
                    "dc:format": "image/jpeg",
                    "repo:createDate": "2023-04-14T06:31:07.174Z",
                    "repo:createdBy": "user@adobe.com",
                    "repo:modifiedBy": "dam-writer-service",
                    "repo:modifyDate": "2023-04-15T05:01:44.229Z",
                    "repo:name": "city.jpeg",
                    "repo:path": "/content/dam/city.jpeg",
                    "repo:size": 338049,
                    "repo:version": "oak:1.0::ci:y7ngaf96th56jt62awk8xkoa37c572fe",
                    "tiff:imageLength": 780,
                    "tiff:imageWidth": 1000,
                    "repo:repositoryId": "author-p12345-e123456.adobeaemcloud.com",
                    "repo:ancestors": ["urn:aaid:aem:abcd1234-ab12-ab12-ab12-abcdef123456"],
                    "repo:state": "ACTIVE",
                    "aem:published": "2023-04-22T23:26:09.036Z",
                    "repo:assetClass": "file"
                }
            },
            "AssetMetadata": {
                "type": "object",
                "description": "Metadata properties that have been extracted from the asset, derived during asset processing, or applied after ingestion.  These properties are, for the most part, editable.",
                "properties": {
                    "xcm:keywords": {
                        "type": "array",
                        "description": "tags that have been applied to the asset from the tag taxonomy",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string",
                                    "description": "the tag for the asset"
                                },
                                "repo:ancestors": {
                                    "type": "array",
                                    "description": "list of ancestor names for the tag",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "@lang": {
                                    "type": "string",
                                    "description": "the ISO 639-1 language code for the tag"
                                }
                            }
                        }
                    },
                    "dc:creator": {
                        "type": "array",
                        "description": "The entity primarily responsible for making the asset",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dc:description": {
                        "type": "string",
                        "description": "An account of the asset"
                    },
                    "dc:title": {
                        "type": "string",
                        "description": "A name given to the asset"
                    },
                    "exif:GPSLatitude": {
                        "type": "string",
                        "description": "Indicates the latitude. The latitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively."
                    },
                    "exif:GPSLongitude": {
                        "type": "string",
                        "description": "Indicates the longitude. The longitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively."
                    },
                    "photoshop:ColorMode": {
                        "type": "number",
                        "description": "The color mode of the asset"
                    },
                    "photoshop:DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The creation date of the asset as set by Photoshop"
                    },
                    "xcm:machineKeywords": {
                        "type": "array",
                        "description": "Smart Tags that have been predicted for the asset during asset processing",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string",
                                    "description": "the predicted tag for the asset"
                                },
                                "confidence": {
                                    "type": "number",
                                    "format": "double",
                                    "description": "the model's confidence score for this tag"
                                },
                                "localeCode": {
                                    "type": "string",
                                    "description": "the ISO 639-1 language code for the tag"
                                }
                            }
                        }
                    },
                    "tiff:BitsPerSample": {
                        "type": "array",
                        "description": "Number of bits per component.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "tiff:Orientation": {
                        "type": "number",
                        "description": "The orientation of the image with respect to the rows and columns."
                    },
                    "xmp:CreateDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time the resource was created."
                    },
                    "xmp:CreatorTool": {
                        "type": "string",
                        "description": "The name of the first known tool used to create the resource."
                    },
                    "xmp:ModifyDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time the resource was last modified."
                    }
                },
                "additionalProperties": true
            },
            "Metadata": {
                "type": "object",
                "properties": {
                    "assetId": {
                        "$ref": "#/components/schemas/AssetId"
                    },
                    "repositoryMetadata": {
                        "$ref": "#/components/schemas/RepositoryMetadata"
                    },
                    "assetMetadata": {
                        "$ref": "#/components/schemas/AssetMetadata"
                    }
                },
                "example": {
                    "value": {
                        "assetId": "urn:aaid:aem:abcd1234-ab12-ab12-ab12-abcdef123456",
                        "assetMetadata": {
                            "xcm:keywords": [
                                {
                                    "value": "Asset Properties : Orientation / Square",
                                    "@lang": "ENGLISH",
                                    "repo:ancestors": ["properties", "orientation", "square"]
                                }
                            ],
                            "xcm:machineKeywords": [
                                {
                                    "value": "city",
                                    "confidence": 0.8512217998504639,
                                    "localeCode": "en-US"
                                }
                            ],
                            "dc:creator": ["Photo Author"],
                            "dc:description": "This is a view of a city skyline reflected in a body of water",
                            "dc:title": "City skyline",
                            "exif:GPSLatitude": "43,19.11N",
                            "exif:GPSLongitude": "11,19.84E",
                            "photoshop:ColorMode": 3,
                            "photoshop:DateCreated": "2017-10-24T12:28:31.672Z",
                            "tiff:BitsPerSample": [8, 8, 8],
                            "tiff:Orientation": 1,
                            "xmp:CreateDate": "2016-08-09T00:00:00.000Z",
                            "xmp:CreatorTool": "Adobe Photoshop CC 2019 (Macintosh)",
                            "xmp:ModifyDate": "2019-11-21T22:02:22.000Z"
                        },
                        "repositoryMetadata": {
                            "aem:assetState": "processed",
                            "aem:checkedOutBy": "testuser@test.com",
                            "dam:sha1": "8601cc48d27d85ae274c954286edfde34b907e12",
                            "dc:format": "image/jpeg",
                            "repo:createDate": "2023-04-14T06:31:07.174Z",
                            "repo:createdBy": "user@adobe.com",
                            "repo:modifiedBy": "dam-writer-service",
                            "repo:modifyDate": "2023-04-15T05:01:44.229Z",
                            "repo:name": "city.jpeg",
                            "repo:path": "/content/dam/city.jpeg",
                            "repo:size": 338049,
                            "repo:version": "oak:1.0::ci:y7ngaf96th56jt62awk8xkoa37c572fe",
                            "tiff:imageLength": 780,
                            "tiff:imageWidth": 1000,
                            "repo:repositoryId": "author-p12345-e123456.adobeaemcloud.com",
                            "repo:ancestors": ["urn:aaid:aem:abcd1234-ab12-ab12-ab12-abcdef123456"],
                            "repo:state": "ACTIVE",
                            "aem:published": "2023-04-22T23:26:09.036Z"
                        }
                    }
                }
            },
            "CompositeQuery": {
                "description": "A composite query is a combination of clauses, each of which can itself be a composite query",
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OrQuery"
                    },
                    {
                        "$ref": "#/components/schemas/AndQuery"
                    },
                    {
                        "$ref": "#/components/schemas/NotQuery"
                    },
                    {
                        "$ref": "#/components/schemas/MatchQuery"
                    },
                    {
                        "$ref": "#/components/schemas/TermQuery"
                    },
                    {
                        "$ref": "#/components/schemas/RangeQuery"
                    }
                ]
            },
            "OrQuery": {
                "type": "object",
                "description": "Logical or operator. The results must match at least one of the sub-queries.\n",
                "additionalProperties": false,
                "properties": {
                    "or": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 5,
                        "items": {
                            "$ref": "#/components/schemas/CompositeQuery"
                        }
                    }
                },
                "required": ["or"],
                "example": "{\"or\":[{\"match\":{\"text\":\"blue\"}},{\"match\":{\"text\":\"red\"}}]}"
            },
            "AndQuery": {
                "type": "object",
                "description": "Logical and operator. The results must match all the sub-queries in this clause.\n",
                "additionalProperties": false,
                "properties": {
                    "and": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 5,
                        "items": {
                            "$ref": "#/components/schemas/CompositeQuery"
                        }
                    }
                },
                "required": ["and"],
                "example": {
                    "and": [
                        {
                            "match": {
                                "text": "blue"
                            }
                        },
                        {
                            "match": {
                                "text": "white"
                            }
                        }
                    ]
                }
            },
            "NotQuery": {
                "type": "object",
                "description": "Logical not operator. All matches are excluded from the results\n",
                "additionalProperties": false,
                "properties": {
                    "not": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/CompositeQuery"
                        }
                    }
                },
                "required": ["not"],
                "example": {
                    "not": [
                        {
                            "term": {
                                "metadata.repositoryMetadata.dc:format": ["video/mp4"]
                            }
                        }
                    ]
                }
            },
            "MatchQueryFields": {
                "description": "fields to search text in (optional)",
                "type": "array",
                "minItems": 1,
                "maxItems": 20,
                "items": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1
                }
            },
            "MatchQueryAnchoredOperators": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "text": {
                        "description": "The text to search. An empty string matches against every asset record.\n",
                        "type": "string",
                        "maxLength": 256,
                        "minLength": 0
                    },
                    "fields": {
                        "$ref": "#/components/schemas/MatchQueryFields"
                    },
                    "operator": {
                        "type": "string",
                        "enum": ["startsWith"],
                        "description": "Defines how to interpret the `text` input\n* `startsWith`: Give all results where the asset metadata has one or more attributes (selected via `fields` parameter) with values starting with `text`.\n                `fields` is a mandatory parameter for this operator.\n"
                    }
                },
                "required": ["text", "operator", "fields"]
            },
            "MatchQueryUnanchoredOperators": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "text": {
                        "description": "The text to search. An empty string matches against every asset record.\n",
                        "type": "string",
                        "maxLength": 256,
                        "minLength": 0
                    },
                    "fields": {
                        "$ref": "#/components/schemas/MatchQueryFields"
                    },
                    "operator": {
                        "type": "string",
                        "enum": ["matches"],
                        "default": "matches",
                        "description": "Give all results where \"text\" appears as the value of popular asset metadata attributes that matches the wildcard criteria:\n                      - metadata.*.xmp* (includes xmpmm*)\n                      - metadata.*.exif*\n                      - metadata.*.dc:*\n                      - metadata.*.Iptc*\n                      - repo:name\n"
                    }
                },
                "required": ["text"]
            },
            "MatchQuery": {
                "type": "object",
                "description": "Search for Full text (supports matches/startswith)\n",
                "additionalProperties": false,
                "properties": {
                    "match": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/MatchQueryAnchoredOperators"
                            },
                            {
                                "$ref": "#/components/schemas/MatchQueryUnanchoredOperators"
                            }
                        ]
                    }
                },
                "required": ["match"],
                "example": {
                    "match": {
                        "text": "crocs",
                        "operator": "matches",
                        "fields": [
                            "metadata.repositoryMetadata.repo:name",
                            "metadata.assetMetadata.xcm:machineKeywords.value"
                        ]
                    }
                }
            },
            "TermQuery": {
                "description": "Search for the query-term exactly matching the value of a specific field.\n\nThe `key` of the `term` object identifies the field whose value should be matched,\n`value` represents what to match against.\n\nThe API supports multi-valued fields.\n\nIn case multiple values are specified in the query clause, result-set includes documents where at least one\nof the specified values matches the value present in the field.\n\nTerm query supports only a single field in term clause. For searching on multiple fields term should be \ncomposed with AND, OR, NOT queries as per the need.\n",
                "properties": {
                    "term": {
                        "type": "object",
                        "minProperties": 1,
                        "maxProperties": 1,
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "minItems": 1,
                                "maxItems": 20,
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "maxLength": 256
                                    },
                                    {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            }
                        },
                        "example": {
                            "metadata.repositoryMetadata.dc:format": ["image/png", "image/jpeg"]
                        }
                    }
                },
                "required": ["term"],
                "example": {
                    "term": {
                        "metadata.repositoryMetadata.dc:format": ["image/png", "image/jpeg"]
                    }
                }
            },
            "RangeQuery": {
                "description": "Returns documents that contain terms within the provided range. The acceptable types for range includes:\n  * numbers (integer, double, long, float)\n  * dates (represented as String compliant with [ISO 8601 representation](https://www.w3.org/TR/NOTE-datetime-970915.html))\n",
                "additionalProperties": false,
                "properties": {
                    "range": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "gt": {
                                    "type": "string",
                                    "description": "Greater-than"
                                },
                                "gte": {
                                    "type": "string",
                                    "description": "Greater-than or equal-to"
                                },
                                "lt": {
                                    "type": "string",
                                    "description": "Less-than"
                                },
                                "lte": {
                                    "type": "string",
                                    "description": "Less-than or equal-to"
                                }
                            }
                        },
                        "example": {
                            "metadata.repositoryMetadata.repo:size": {
                                "lt": "20000000",
                                "gte": "50"
                            }
                        }
                    }
                },
                "required": ["range"],
                "example": {
                    "range": {
                        "metadata.repositoryMetadata.repo:createDate": {
                            "lt": "2023-01-04T13:49:00.00Z",
                            "gte": "2023-02-07T00:00:00.00Z"
                        }
                    }
                }
            },
            "OrderBy": {
                "description": "The value of an `orderBy` parameter contains a comma-separated list of expressions used to sort the items.\n\nThe expression may include the suffix `asc` for ascending or `desc` for descending, separated from the property\nname by one or more spaces. If `asc` or `desc` is not specified, the service will order by the specified\nproperty in ascending order.\n\nItems will be sorted by the result values of the first expression; items with the same value for the first\nexpression are sorted by the result value of the second expression and so on. The sort order is the\ninherent order for the type of the property.\n",
                "type": "string",
                "minLength": 1,
                "example": "metadata.repositoryMetadata.repo:size desc,metadata.repositoryMetadata.repo:createDate asc"
            },
            "Limit": {
                "description": "For a paginated request, this parameter defines the maximum number of items to retrieve.\n",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 50
            },
            "Cursor": {
                "description": "A cursor is an opaque string that can be used in API calls which support paginating the response. A non-existent cursor\nsignifies that the returned list does not have more elements.\n",
                "type": "string",
                "minLength": 1
            },
            "SearchOperation": {
                "type": "object",
                "properties": {
                    "query": {
                        "description": "List of Composite query. CompositeQueries in this list are AND'd.\n",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 5,
                        "items": {
                            "$ref": "#/components/schemas/CompositeQuery"
                        }
                    },
                    "orderBy": {
                        "$ref": "#/components/schemas/OrderBy"
                    },
                    "limit": {
                        "$ref": "#/components/schemas/Limit"
                    },
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    }
                },
                "required": ["query"],
                "example": {
                    "query": [
                        {
                            "and": [
                                {
                                    "or": [
                                        {
                                            "match": {
                                                "text": "blue"
                                            }
                                        },
                                        {
                                            "match": {
                                                "text": "red"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "not": [
                                        {
                                            "term": {
                                                "metadata.repositoryMetadata.dc:format": ["video/mp4"]
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "range": {
                                "metadata.repositoryMetadata.repo:size": {
                                    "gte": 3000000,
                                    "lte": 9000000
                                }
                            }
                        }
                    ],
                    "orderBy": "metadata.repositoryMetadata.repo:size desc,metadata.repositoryMetadata.repo:createDate asc",
                    "limit": 50,
                    "cursor": "[1463538857, \"654323\"]"
                }
            },
            "SearchOperationResponse": {
                "type": "object",
                "description": "Sample response :\n{\n  \"hits\": {\n    \"results\": [\n      //results redacted\n    ]\n  },\n  \"search_metadata\": {\n    \"count\": 9,\n    \"totalCount\": {\n      \"total\": 9,\n      \"relation\": \"eq\"\n    },\n    \"searchDuration\": 16\n  }\n}\n",
                "properties": {
                    "hits": {
                        "type": "object",
                        "properties": {
                            "results": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Metadata"
                                }
                            }
                        }
                    },
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "search_metadata": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "description": "Number of results on this page.\n",
                                "type": "integer",
                                "format": "int64",
                                "minimum": 0,
                                "maximum": 10000
                            },
                            "totalCount": {
                                "type": "object",
                                "properties": {
                                    "total": {
                                        "description": "Total number of results.",
                                        "type": "integer",
                                        "format": "int64",
                                        "minimum": 0,
                                        "maximum": 10000
                                    },
                                    "relation": {
                                        "description": "Can be either of eq (equals to) or gte (greater than equals to)",
                                        "type": "string",
                                        "enum": ["eq", "gte"]
                                    }
                                }
                            },
                            "searchDuration": {
                                "description": "Time taken to execute the search request in nano sec.\n",
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "required": ["count", "searchDuration"]
                    }
                },
                "required": ["hits", "search_metadata"],
                "example": {
                    "hits": {
                        "results": [
                            {
                                "assetId": "urn:aaid:aem:9d68909d-378b-4c18-8b9d-0ep0g826e984",
                                "repositoryMetadata": {
                                    "repo:name": "blue shoe.jpeg",
                                    "dc:format": "image/webp",
                                    "repo:createDate": "2023-05-29T12:54:36.410Z",
                                    "repo:modifyDate": "2023-05-11T14:12:09.304Z",
                                    "repo:size": 434292,
                                    "repo:repositoryId": "urn:rid:aem:65214-138691"
                                },
                                "assetMetadata": {
                                    "xcm:machineKeywords": [
                                        {
                                            "localeCode": "en-US",
                                            "confidence": 0.7371780872344971,
                                            "value": "shoe"
                                        },
                                        {
                                            "localeCode": "en-US",
                                            "confidence": 0.7185167074203491,
                                            "value": "wearable"
                                        }
                                    ],
                                    "tiff:ImageLength": 1800,
                                    "tiff:ImageWidth": 2400
                                }
                            },
                            {
                                "//other 8 asset metadata": null
                            }
                        ]
                    },
                    "cursor": "[\"45600323\",1478539971]",
                    "search_metadata": {
                        "count": 50,
                        "totalCount": {
                            "total": 92,
                            "relation": "eq"
                        },
                        "searchDuration": 16
                    }
                }
            },
            "CollectionId": {
                "type": "string",
                "description": "ID of the collection",
                "minLength": 1,
                "example": "urn:cid:aem:1a034bee-ebda-4787-bad3-f924d0772b75"
            },
            "BaseRepositoryMetadata": {
                "type": "object",
                "description": "Read-only metadata properties that are maintained by the repository for the asset, folder or collection.",
                "properties": {
                    "repo:repositoryId": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepositoryId"
                            },
                            {
                                "readOnly": true
                            }
                        ]
                    },
                    "repo:createDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The created date of the asset, folder or collection as maintained by the content repository",
                        "readOnly": true
                    },
                    "repo:createdBy": {
                        "type": "string",
                        "description": "The user that created the asset, folder or collection in the content repository",
                        "readOnly": true
                    },
                    "repo:modifiedBy": {
                        "type": "string",
                        "description": "The user that last modified the asset, folder or collection in the content repository",
                        "readOnly": true
                    },
                    "repo:modifyDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The last modified date of the asset, folder or collection as maintained by the content repository",
                        "readOnly": true
                    }
                },
                "additionalProperties": true
            },
            "CollectionMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/CollectionId"
                    },
                    "repositoryMetadata": {
                        "$ref": "#/components/schemas/BaseRepositoryMetadata"
                    },
                    "collectionMetadata": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "description": "The title of the Collection",
                                "example": "Product Images"
                            },
                            "description": {
                                "type": "string",
                                "description": "A short description of the Collection",
                                "example": "Images approved for use in the product catalog"
                            }
                        }
                    }
                },
                "required": ["id", "repositoryMetadata", "collectionMetadata"]
            },
            "CollectionItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of an item that represents the asset or collection",
                        "minLength": 1,
                        "example": "urn:aaid:aem:1a034bee-ebda-4787-bad3-f924d0772b75"
                    },
                    "repo:repositoryId": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepositoryId"
                            },
                            {
                                "readOnly": true
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the item",
                        "enum": ["asset", "collection"]
                    }
                }
            },
            "CollectionCreationRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Title of the Collection",
                        "example": "Product Images"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the Collection",
                        "example": "Images approved for use in the product catalog"
                    },
                    "items": {
                        "type": "array",
                        "description": "The items in the Collection",
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/CollectionItem"
                                }
                            ]
                        }
                    }
                },
                "required": ["title", "items"]
            },
            "CollectionMetadataUpdateRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Title of the Collection",
                        "example": "Product Images"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the Collection",
                        "example": "Images approved for use in the product catalog"
                    }
                }
            },
            "CollectionOperation": {
                "type": "object",
                "description": "Adds or removes an item from the collection.",
                "additionalProperties": false,
                "properties": {
                    "op": {
                        "description": "Identifies this operation as an `add` or `remove` operation",
                        "type": "string",
                        "minLength": 3,
                        "enum": ["add", "remove"]
                    },
                    "id": {
                        "description": "The ID of the item to add or remove. The ID can specify an asset or a collection.",
                        "type": "string",
                        "minLength": 1
                    },
                    "repo:repositoryId": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RepositoryId"
                            },
                            {
                                "readOnly": true
                            }
                        ]
                    },
                    "type": {
                        "description": "The type of item that is referenced by the id. Valid values are `asset` or `collection`.",
                        "type": "string",
                        "minLength": 5,
                        "enum": ["asset", "collection"]
                    }
                },
                "required": ["op", "id", "type"]
            },
            "CommandResultMessage": {
                "description": "CommandResultMessage Object to encapsulate the result of a command.",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A URI reference [RFC3986](https://www.rfc-editor.org/rfc/rfc3986) that identifies the message type.",
                        "minLength": 1
                    },
                    "title": {
                        "type": "string",
                        "description": "A short, human-readable summary of the problem type.",
                        "minLength": 1
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem."
                    }
                },
                "required": ["type", "title"]
            },
            "CommandResult": {
                "description": "The result of a command. A command is an operation that changes a system in a different way than via a CRUD\nrequest to a resource.\n",
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "The operation that was performed.",
                        "minLength": 1
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The HTTP status code ([RFC9110, Section 15](https://www.rfc-editor.org/rfc/rfc9110.html#section-15))\ngenerated by the origin server corresponding to this operation.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-readable explanation specific to this command, explaining the status.",
                        "minLength": 1
                    },
                    "data": {
                        "type": "object",
                        "description": "The data returned by the operation, which will vary by the implementing command. Each command\nMUST provide its own schema definition for this object, by defining all the properties a client is\nexpected to encounter.\n"
                    },
                    "errors": {
                        "type": "array",
                        "description": "An optional array of errors that occurred during the operation.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResultMessage"
                        }
                    },
                    "warnings": {
                        "type": "array",
                        "description": "An optional array of warnings that occurred during the operation.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResultMessage"
                        }
                    }
                },
                "required": ["operation", "status", "description"]
            },
            "CollectionJobStatus": {
                "type": "object",
                "description": "The status of a collection async job.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CommandResult"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "operation": {
                                "type": "string",
                                "enum": [
                                    "aem.assets.collections.createCollection",
                                    "aem.assets.collections.deleteCollection",
                                    "aem.assets.collections.addToCollection",
                                    "aem.assets.collections.removeFromCollection"
                                ]
                            },
                            "data": {
                                "allOf": [
                                    {
                                        "type": "object",
                                        "description": "Assets Collection Command Result",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "collectionId": {
                                                "$ref": "#/components/schemas/CollectionId"
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "Status of the collection operation",
                                                "minLength": 1,
                                                "enum": ["PROCESSING", "COMPLETED", "FAILED"],
                                                "readOnly": true
                                            }
                                        },
                                        "required": ["status"]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "example": {
                    "operation": "aem.assets.collections.deleteCollection",
                    "status": 200,
                    "description": "Collection deleted successfully",
                    "data": {
                        "id": "12a020e8-ca19-44aa-91fa-c1c0db97edff",
                        "collectionId": "urn:cid:aem:1a034bee-ebda-4787-bad3-f924d0772b75",
                        "status": "COMPLETED"
                    },
                    "errors": [],
                    "warnings": [
                        {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/not_found",
                            "title": "Not Found",
                            "detail": "Asset 'xyz-123' could not be found"
                        }
                    ]
                }
            },
            "LinkShareMetadataResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the link",
                        "example": "6ba7b8109dad11d180b40002a5d5c51b62xsa4uT0qO_hvyym329pOYFasfPffVM9E-IPgs9KM",
                        "minLength": 40
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the link",
                        "example": "Sample link"
                    },
                    "access": {
                        "type": "string",
                        "enum": ["public", "restricted"],
                        "description": "Specifies the access level for the link.",
                        "example": "public",
                        "minLength": 6
                    },
                    "sharedItemsCount": {
                        "type": "integer",
                        "description": "The count of shared assets or collections by the link.",
                        "minimum": 1
                    },
                    "expiryTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when shared link expires.",
                        "example": "2021-05-20T20:00:00.000Z",
                        "minLength": 19
                    },
                    "owner": {
                        "type": "string",
                        "description": "EmailId of user, who created this link",
                        "pattern": "^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})",
                        "example": "user@adobe.com",
                        "minLength": 6
                    }
                },
                "required": ["id", "access", "sharedItemsCount", "expiryTime", "owner"]
            },
            "LinkShareMetadataRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of the link",
                        "example": "Sample link"
                    },
                    "access": {
                        "type": "string",
                        "enum": ["public", "restricted"],
                        "description": "Specifies the access level for the link.",
                        "minLength": 6
                    },
                    "expiryTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when shared link expires.",
                        "example": "2021-05-20T20:00:00.000Z"
                    }
                },
                "required": ["access"]
            },
            "ShareItem": {
                "type": "object",
                "anyOf": [
                    {
                        "properties": {
                            "collections": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "collectionId": {
                                            "$ref": "#/components/schemas/CollectionId"
                                        },
                                        "repo:repositoryId": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/RepositoryId"
                                                },
                                                {
                                                    "readOnly": true
                                                }
                                            ]
                                        }
                                    },
                                    "required": ["collectionId"]
                                },
                                "minLength": 1
                            }
                        },
                        "required": ["collections"]
                    },
                    {
                        "properties": {
                            "assets": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "assetId": {
                                            "$ref": "#/components/schemas/AssetId"
                                        },
                                        "repo:repositoryId": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/RepositoryId"
                                                },
                                                {
                                                    "readOnly": true
                                                }
                                            ]
                                        }
                                    },
                                    "required": ["assetId"]
                                },
                                "minLength": 1
                            }
                        },
                        "required": ["assets"]
                    }
                ]
            },
            "ShareToken": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "Token to access shared assets or collections",
                        "pattern": "^([a-zA-Z0-9_-]{8,64})$",
                        "example": "T0lUJUypSG06pJabw3guL6kNRfz6S3wP6nA2gRlXERI",
                        "minLength": 8
                    },
                    "expiryTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when token to access shared assets or collections expires.",
                        "example": "2021-05-20T20:00:00.000Z",
                        "minLength": 19
                    }
                },
                "required": ["token", "expiryTime"]
            },
            "ShareItemsResponse": {
                "type": "object",
                "anyOf": [
                    {
                        "properties": {
                            "collections": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/CollectionId"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ShareToken"
                                        }
                                    ]
                                },
                                "minLength": 1
                            }
                        },
                        "required": ["collections"]
                    },
                    {
                        "properties": {
                            "assets": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ShareToken"
                                        }
                                    ],
                                    "properties": {
                                        "assetId": {
                                            "$ref": "#/components/schemas/AssetId"
                                        }
                                    },
                                    "required": ["assetId"]
                                },
                                "minLength": 1
                            }
                        },
                        "required": ["assets"]
                    }
                ]
            },
            "SearchTokenRequest": {
                "type": "object",
                "properties": {
                    "indexes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["assets", "collections", "linkshares", "querysuggestions"]
                        },
                        "description": "Specify indexes to grant access to.\n",
                        "example": ["assets", "collections"]
                    },
                    "operationType": {
                        "type": "string",
                        "enum": ["search", "analytics", "settings"],
                        "description": "Specifiy the type of operation."
                    }
                },
                "required": ["indexes", "operationType"]
            },
            "SearchTokenResponse": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The created token.",
                        "example": "YTgyMzMwOTkzMjA2Mzk5OWUxNjhjYmIwMGZkNGFmMzk2NDU3ZjMyYTg1NThiZjgx"
                    },
                    "expiryTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time until which the created token will be valid.",
                        "example": "2024-02-28T21:39:02.417-0800",
                        "minLength": 19
                    },
                    "appId": {
                        "type": "string",
                        "description": "This ID uniquely defines the application and will be required when using this token.",
                        "example": "5HEOA9BAT1"
                    }
                },
                "required": ["token", "expiryTime", "appId"]
            },
            "ArchiveFormat": {
                "type": "string",
                "description": "The output format of the archive",
                "default": "zip",
                "enum": ["zip"]
            },
            "CreateArchiveRequest": {
                "type": "object",
                "description": "Request to create an archive",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "Assets to be included in the archive. By default, any [custom renditions generated via Processing Profiles](https://experienceleague.adobe.com/en/docs/experience-manager-learn/assets/configuring/processing-profiles) and [original rendition](https://experienceleague.adobe.com/en/docs/experience-manager-learn/assets/authoring/renditions) can optionally specify renditions that MUST be included-in or excluded-from the archive being requested.\n",
                        "items": {
                            "type": "object",
                            "properties": {
                                "assetId": {
                                    "$ref": "#/components/schemas/AssetId"
                                },
                                "repo:repositoryId": {
                                    "$ref": "#/components/schemas/RepositoryId"
                                },
                                "includeRenditions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Specifies the renditions of the asset to be included in the archive.\n",
                                    "example": ["thumbnail.319.png", "customRenditionName.png"]
                                },
                                "excludeRenditions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Specifies the renditions of the asset to be excluded from the archive. If a given rendition is specified in both includeRenditions and excludeRenditions, then the rendition will be excluded from the archive.\n",
                                    "example": ["original"]
                                }
                            },
                            "required": ["assetId"]
                        },
                        "minItems": 1
                    },
                    "format": {
                        "$ref": "#/components/schemas/ArchiveFormat"
                    },
                    "namePrefix": {
                        "type": "string",
                        "description": "The name to use for the created archive file(s). Note that the API will treat this as a suggestion, and reserves the right to change the final archive name as needed. If not provided, the API will assign its own file name according to any logic it deems fit.",
                        "example": "assets"
                    }
                },
                "required": ["items"]
            },
            "ArchiveId": {
                "type": "string",
                "description": "Identifier for the archive under-process/processed by the service",
                "minLength": 1,
                "example": "1a034bee-ebda-4787-bad3-f924d0772b75"
            },
            "ArchiveMetadata": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ArchiveId"
                    },
                    "format": {
                        "$ref": "#/components/schemas/ArchiveFormat"
                    },
                    "submittedBy": {
                        "type": "string",
                        "description": "The user who submitted the archive request",
                        "minLength": 1,
                        "readOnly": true,
                        "example": "person@company.com"
                    },
                    "submittedDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time the archive creation request was submitted",
                        "readOnly": true,
                        "example": "2024-02-28T21:39:02.417-0800",
                        "minLength": 19
                    }
                },
                "required": ["id", "format", "submittedBy", "submittedDate"]
            },
            "ArchiveStatus": {
                "type": "object",
                "description": "Read-only metadata properties associated with the archive",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CommandResult"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "operation": {
                                "type": "string",
                                "enum": ["aem.assets.archives.createArchive"]
                            },
                            "data": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ArchiveMetadata"
                                    },
                                    {
                                        "type": "object",
                                        "description": "Assets Archive Command Result",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "The status of the archive creation process",
                                                "minLength": 1,
                                                "enum": ["PROCESSING", "COMPLETED", "FAILED"]
                                            },
                                            "completionDate": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "The date and time the archive request was completed. Available when the status is 'COMPLETED'"
                                            },
                                            "files": {
                                                "type": "array",
                                                "description": "Full URLs to the locations where the archive files' binaries can be retrieved. Available when the status is 'COMPLETED'",
                                                "items": {
                                                    "type": "string",
                                                    "format": "uri"
                                                }
                                            }
                                        },
                                        "required": ["status"]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "example": {
                    "operation": "aem.assets.archives.createArchive",
                    "status": 200,
                    "description": "Archive created successfully",
                    "data": {
                        "id": "12a020e8-ca19-44aa-91fa-c1c0db97edff",
                        "format": "zip",
                        "submittedBy": "person@company.com",
                        "submittedDate": "2024-02-28T21:39:02.417-0800",
                        "status": "COMPLETED",
                        "completionDate": "2024-02-28T21:50:31.346-0800",
                        "files": [
                            "https://polaris-asset-archives.adobe.io/adobe/assets/archives/12345/as/asset.zip",
                            "https://polaris-asset-archives.adobe.io/adobe/assets/archives/12345/as/asset1.zip"
                        ]
                    },
                    "errors": [],
                    "warnings": [
                        {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/not_found",
                            "title": "Not Found",
                            "detail": "Asset 'xyz-123' could not be found"
                        }
                    ]
                }
            },
            "CloudEvents_3rdParty": {
                "description": "AEM Eventing uses the current schema definition for all eventing use cases. The schema definition is based on CloudEvents\n[1.0.2](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md).\n\nh2. Changes\nAll Events once published MUST be treated like API. Changes to the event schema MUST be backwards compatible,\ni.e. prefer non-breaking changes (adding a field) which don't require an event type change and don't break the consumer.\nHowever, if there is a breaking change, it MUST be a new event type, while the old one is still sent out until no consumer\nstill requires it.\n",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "An identifier for the event.  When used in combination with the `source` property, it allows for each instance of\nan event to be uniquely identified.  That is to say, the combination of the `source` + `id` properties will be\nunique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it may have the same \nid and should be treated as a duplicate.\n",
                        "type": "string",
                        "minLength": 1
                    },
                    "source": {
                        "description": "An instance of the [acct URI scheme](https://www.rfc-editor.org/rfc/rfc7565.html) that uniquely identifies the\nproducer of this event, of the format `acct:aem-p<programId>-e<environmentId>@adobe.com`.\n",
                        "type": "string",
                        "format": "uri",
                        "pattern": "^acct:aem(-cmstg)?-p\\d+-e\\d+@adobe\\.com$",
                        "minLength": 1
                    },
                    "specversion": {
                        "description": "The version of the CloudEvents specification which the event uses.  AEM events use the CloudEvents spec version \n1.0.2, hence this value will be 1.0.\n",
                        "type": "string",
                        "enum": ["1.0"],
                        "minLength": 3
                    },
                    "type": {
                        "description": "The type for the event.  This will identify the AEM solution that has dispatched the event and may also include\nthe type of entity and the activity that occurred.\n",
                        "type": "string",
                        "pattern": "^aem\\..*$",
                        "minLength": 4
                    },
                    "datacontenttype": {
                        "description": "The format of the data in the event.  This will always be `application/json` for AEM events.\n",
                        "type": "string",
                        "enum": ["application/json"],
                        "minLength": 1
                    },
                    "dataschema": {
                        "description": "An optional attribute, which may point to a JSON schema document that covers the data object.\n",
                        "type": "string",
                        "format": "uri"
                    },
                    "time": {
                        "description": "A timestamp of when the event occurred.\n",
                        "type": "string",
                        "format": "date-time",
                        "minLength": 1
                    },
                    "data": {
                        "description": "The event payload.\n",
                        "type": "object"
                    }
                },
                "required": ["id", "source", "specversion", "type", "datacontenttype", "time", "data"],
                "example": {
                    "specversion": "1.0",
                    "type": "aem.assets.asset.created",
                    "source": "acct:aem-p56789-e12345@adobe.com",
                    "id": "7c1104e5-4cd7-47d6-a50f-2568c480f2e9",
                    "time": "2018-04-05T17:31:00Z",
                    "datacontenttype": "application/json",
                    "data": {
                        "myProp": "myValue"
                    }
                }
            },
            "EventAssetMetadata": {
                "type": "object",
                "description": "Metadata properties that have been extracted from the asset, derived during asset processing, or applied after ingestion.  These properties are, for the most part, editable.",
                "properties": {
                    "xcm:machineKeywords": {
                        "type": "array",
                        "description": "Smart Tags that have been predicted for the asset during asset processing",
                        "items": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string",
                                    "description": "The predicted tag for the asset"
                                },
                                "confidence": {
                                    "type": "number",
                                    "format": "double",
                                    "description": "The model's confidence score for this tag"
                                }
                            }
                        }
                    },
                    "pur:expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the asset will expire."
                    },
                    "dc:title": {
                        "type": "string",
                        "description": "A name given to the asset"
                    }
                },
                "additionalProperties": true,
                "example": {
                    "xcm:machineKeywords": [
                        {
                            "value": "graphic design",
                            "confidence": 0.926
                        },
                        {
                            "value": "clipart",
                            "confidence": 0.757
                        }
                    ],
                    "pur:expirationDate": "2023-04-17T06:31:07.174Z",
                    "dc:title": "Asset name"
                }
            },
            "EventMetadata": {
                "type": "object",
                "properties": {
                    "assetId": {
                        "$ref": "#/components/schemas/AssetId"
                    },
                    "repositoryMetadata": {
                        "$ref": "#/components/schemas/RepositoryMetadata"
                    },
                    "assetMetadata": {
                        "$ref": "#/components/schemas/EventAssetMetadata"
                    }
                },
                "example": {
                    "value": {
                        "assetId": "urn:aaid:aem:abcd1234-ab12-ab12-ab12-abcdef123456",
                        "assetMetadata": {
                            "xcm:machineKeywords": [
                                {
                                    "value": "city",
                                    "confidence": 0.8512217998504639,
                                    "localeCode": "en-US"
                                }
                            ],
                            "pur:expirationDate": "2023-04-17T06:31:07.174Z"
                        },
                        "repositoryMetadata": {
                            "aem:assetState": "processed",
                            "aem:checkedOutBy": "testuser@test.com",
                            "dam:sha1": "8601cc48d27d85ae274c954286edfde34b907e12",
                            "dc:format": "image/jpeg",
                            "repo:createDate": "2023-04-14T06:31:07.174Z",
                            "repo:createdBy": "user@adobe.com",
                            "repo:modifiedBy": "dam-writer-service",
                            "repo:modifyDate": "2023-04-15T05:01:44.229Z",
                            "repo:name": "city.jpeg",
                            "repo:path": "/content/dam/city.jpeg",
                            "repo:size": 338049,
                            "repo:version": "oak:1.0::ci:y7ngaf96th56jt62awk8xkoa37c572fe",
                            "tiff:imageLength": 780,
                            "tiff:imageWidth": 1000,
                            "repo:repositoryId": "author-p12345-e123456.adobeaemcloud.com",
                            "repo:ancestors": ["urn:aaid:aem:abcd1234-ab12-ab12-ab12-abcdef123456"],
                            "repo:state": "ACTIVE",
                            "aem:published": "2023-04-22T23:26:09.036Z"
                        }
                    }
                }
            }
        },
        "headers": {
            "ETag": {
                "schema": {
                    "type": "string"
                },
                "description": "The `ETag` field in a response provides the current entity tag for the selected representation, as determined at the\nconclusion of handling the request. An entity tag is an opaque validator for differentiating between multiple\nrepresentations of the same resource, regardless of whether those multiple representations are due to resource state\nchanges over time, content negotiation resulting in multiple representations being valid at the same time, or both.\nAn entity tag consists of an opaque quoted string, possibly prefixed by a weakness indicator.\n\nFor more details, please head over to [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-etag).\n",
                "required": true
            },
            "Last-Modified": {
                "schema": {
                    "type": "string"
                },
                "description": "The \"Last-Modified\" header field in a response provides a timestamp indicating the date and time at which the origin\nserver believes the selected representation was last modified, as determined at the conclusion of handling the\nrequest.\n\nFor more details, please head over to [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-last-modified).\n",
                "required": true
            },
            "Location": {
                "schema": {
                    "type": "string",
                    "format": "uri"
                },
                "description": "The `Location` header field is used in some responses to refer to a specific resource in relation to the response.\nThe type of relationship is defined by the combination of request method and status code semantics.\n\nFor more details, please head over to [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-location).\n",
                "required": true
            },
            "Retry-After": {
                "schema": {
                    "anyOf": [
                        {
                            "type": "string",
                            "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (([0-2][0-9]|3[01] Jan)|([0-2][0-9] Feb)|([0-2][0-9]|3[01] Mar)|([0-2][0-9]|30 Apr)|([0-2][0-9]|3[01] May)|([0-2][0-9]|30 Jun)|([0-2][0-9]|3[01] Jul)|([0-2][0-9]|3[01] Aug)|([0-2][0-9]|30 Sep)|([0-2][0-9]|3[01] Oct)|([0-2][0-9]|30 Nov)|([0-2][0-9]|3[01] Dec)) ([0-9]{4}) ([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]) GMT$",
                            "example": "Fri, 31 Dec 1999 23:59:59 GMT",
                            "description": "The HTTP-date to which the user agent should wait to make a follow up request"
                        },
                        {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 0,
                            "example": 120,
                            "description": "The number of seconds the user agent should wait to make a follow up request"
                        }
                    ]
                },
                "description": "The `Retry-After` header indicates how long the user agent should wait before making a follow-up request.\n\nThe Retry-After value can be either an HTTP-date or a number of seconds to delay after receiving the response.\n\nFor more details, please head over to [RFC9110](https://datatracker.ietf.org/doc/html/rfc9110#name-retry-after).\n"
            }
        },
        "responses": {
            "400_BadRequest": {
                "description": "Bad Request. The Problem Details object will provide more information about the exact cause.",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "default": 400
                                        },
                                        "title": {
                                            "type": "string",
                                            "default": "Bad Request"
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/bad_request",
                            "title": "Bad Request",
                            "status": 400,
                            "detail": "Bad request, please check that you have provided the correct parameters and that they are valid."
                        }
                    }
                }
            },
            "401_Unauthorized": {
                "description": "Unauthorized",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "default": 401
                                        },
                                        "title": {
                                            "type": "string",
                                            "default": "Unauthorized"
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/unauthorized",
                            "title": "Unauthorized",
                            "status": 401,
                            "detail": "The request did not contain a valid Authorization header."
                        }
                    }
                }
            },
            "403_Forbidden": {
                "description": "Forbidden",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "default": 403
                                        },
                                        "title": {
                                            "type": "string",
                                            "default": "Forbidden"
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/forbidden",
                            "title": "Forbidden",
                            "status": 403,
                            "detail": "The credentials provided do not have sufficient permissions to access this resource."
                        }
                    }
                }
            },
            "404_NotFound": {
                "description": "Not Found",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "default": 404
                                        },
                                        "title": {
                                            "type": "string",
                                            "default": "Not Found"
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/not_found",
                            "title": "Not Found",
                            "status": 404,
                            "detail": "The requested resource could not be found."
                        }
                    }
                }
            },
            "304_NotModified": {
                "description": "Not Modified",
                "content": {},
                "headers": {
                    "ETag": {
                        "$ref": "#/components/headers/ETag"
                    },
                    "Last-Modified": {
                        "$ref": "#/components/headers/Last-Modified"
                    }
                }
            },
            "500_InternalServerError": {
                "description": "The server encountered an unexpected error. Retrying the request after a certain time could help.\n",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "default": 500
                                        },
                                        "title": {
                                            "type": "string",
                                            "default": "Internal Server Error"
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/internal_server_error",
                            "title": "Internal Server Error",
                            "status": 500,
                            "detail": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                        }
                    }
                }
            },
            "412_PreconditionFailed": {
                "description": "Precondition Failed",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "default": "Precondition Failed"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "default": 412
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/precondition_failed",
                            "title": "Precondition Failed",
                            "status": 412,
                            "detail": "The provided conditional header was not fulfilled."
                        }
                    }
                }
            },
            "428_PreconditionRequired": {
                "description": "Precondition Required",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "default": "Precondition Required"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "default": 428
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/precondition_required",
                            "title": "Precondition Required",
                            "status": 428,
                            "detail": "This operation requires the use of a conditional header."
                        }
                    }
                }
            },
            "415_UnsupportedMediaType": {
                "description": "Unsupported Media Type. When provided as a response to a `PATCH` request,\nthe response will provide an `Accept-Patch` response header to notify\nthe client what patch document media types are supported.\n",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "example": "Unsupported Media Type"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "default": 415
                                        }
                                    }
                                }
                            ]
                        },
                        "example": {
                            "type": "http://api.adobeaemcloud.com/adobe/meta/errors/unsupported_media_type",
                            "title": "Unsupported Media Type",
                            "status": 415,
                            "detail": "This request is not acceptable because the payload is in an unsupported format."
                        }
                    }
                }
            }
        }
    }
}
